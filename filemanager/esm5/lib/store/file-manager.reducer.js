/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { createFeatureSelector } from '@ngrx/store';
import { FileManagerActionTypes } from './file-manager.action';
/**
 * @record
 */
export function StoreEntities() { }
/**
 * @record
 */
export function IFileManagerState() { }
if (false) {
    /** @type {?} */
    IFileManagerState.prototype.entities;
    /** @type {?} */
    IFileManagerState.prototype.files;
    /** @type {?} */
    IFileManagerState.prototype.selectedFiles;
}
/**
 * @param {?} state
 * @param {?} action
 * @return {?}
 */
function cropFile(state, action) {
    /** @type {?} */
    var file = action.payload.file;
    /** @type {?} */
    var id = file.getId().toString();
    state.entities[id] = (/** @type {?} */ (tslib_1.__assign({}, file.toJSON())));
    return {
        entities: state.entities,
        files: state.files,
        selectedFiles: state.selectedFiles
    };
}
/**
 * @param {?} state
 * @return {?}
 */
function inverseFilesSelection(state) {
    return {
        entities: state.entities,
        files: state.files,
        selectedFiles: state.files.filter(function (i) { return state.selectedFiles.indexOf(i) === -1; })
    };
}
/**
 * @param {?} state
 * @param {?} action
 * @return {?}
 */
function loadFiles(state, action) {
    /** @type {?} */
    var entities = {};
    /** @type {?} */
    var files = [];
    action.payload.files.map(function (file) {
        /** @type {?} */
        var id = file.id.toString();
        entities[id] = file;
        files.push(id);
    });
    return {
        entities: entities,
        files: files,
        selectedFiles: []
    };
}
/**
 * @param {?} state
 * @param {?} action
 * @return {?}
 */
function moveFiles(state, action) {
    /** @type {?} */
    var files = action.payload.files;
    /** @type {?} */
    var ids = files.map(function (file) { return file.id.toString(); });
    /** @type {?} */
    var folderId = action.payload.folderId ? action.payload.folderId.toString() : '';
    /** @type {?} */
    var entities = tslib_1.__assign({}, state.entities);
    ids.forEach(function (id) {
        /** @type {?} */
        var oldEntity = tslib_1.__assign({}, entities[id]);
        oldEntity.folderId = folderId;
        entities[id] = oldEntity;
    });
    return {
        entities: entities,
        files: state.files.filter(function (i) { return ids.indexOf(i) === -1; }),
        selectedFiles: state.selectedFiles.filter(function (i) { return ids.indexOf(i) === -1; })
    };
}
/**
 * @param {?} state
 * @param {?} action
 * @return {?}
 */
function removeFile(state, action) {
    /** @type {?} */
    var id = action.payload.file.getId();
    delete state.entities[id];
    return {
        entities: state.entities,
        files: state.files.filter(function (i) { return i !== id; }),
        selectedFiles: state.selectedFiles
    };
}
/**
 * @param {?} state
 * @return {?}
 */
function removeSelectedFiles(state) {
    /** @type {?} */
    var files = state.files.filter(function (i) { return state.selectedFiles.indexOf(i) === -1; });
    /** @type {?} */
    var entities = {};
    files.forEach(function (fileId) {
        entities[fileId] = state.entities[fileId];
    });
    return {
        entities: entities,
        files: files,
        selectedFiles: []
    };
}
/**
 * @param {?} state
 * @param {?} action
 * @return {?}
 */
function selectFile(state, action) {
    return {
        entities: state.entities,
        files: state.files,
        selectedFiles: tslib_1.__spread(state.selectedFiles, [action.payload.file.getId().toString()])
    };
}
/**
 * @param {?} state
 * @return {?}
 */
function selectAllFiles(state) {
    return {
        entities: state.entities,
        files: state.files,
        selectedFiles: tslib_1.__spread(state.files)
    };
}
/**
 * @param {?} state
 * @param {?} action
 * @return {?}
 */
function uploadFiles(state, action) {
    /** @type {?} */
    var newState = {
        entities: tslib_1.__assign({}, state.entities),
        files: tslib_1.__spread(state.files),
        selectedFiles: []
    };
    action.payload.files.forEach(function (file) {
        /** @type {?} */
        var id = file.id.toString();
        newState.entities[id] = file;
        newState.files.push(id);
    });
    return newState;
}
/**
 * @param {?} state
 * @return {?}
 */
function unSelectAllFiles(state) {
    return {
        entities: state.entities,
        files: state.files,
        selectedFiles: []
    };
}
/**
 * @param {?} state
 * @param {?} action
 * @return {?}
 */
function unSelectFile(state, action) {
    /** @type {?} */
    var fileId = action.payload.file.getId().toString();
    return {
        entities: state.entities,
        files: state.files,
        selectedFiles: state.selectedFiles.filter(function (id) { return id !== fileId; })
    };
}
/**
 * @param {?=} state
 * @param {?=} action
 * @return {?}
 */
export function fileManagerReducer(state, action) {
    if (state === void 0) { state = {
        entities: {},
        files: [],
        selectedFiles: []
    }; }
    switch (action.type) {
        case FileManagerActionTypes.CROP_FILE_SUCCESS:
            return cropFile(state, action);
        case FileManagerActionTypes.INVERSE_FILE_SELECTION:
            return inverseFilesSelection(state);
        case FileManagerActionTypes.DELETE_FILE_SELECTION_SUCCESS:
            return removeSelectedFiles(state);
        case FileManagerActionTypes.DELETE_FILE_SUCCESS:
            return removeFile(state, action);
        case FileManagerActionTypes.MOVE_FILES_SUCCESS:
            return moveFiles(state, action);
        case FileManagerActionTypes.LOAD_FILES_SUCCESS:
            return loadFiles(state, action);
        case FileManagerActionTypes.SELECT_ALL:
            return selectAllFiles(state);
        case FileManagerActionTypes.SELECT_FILE:
            return selectFile(state, action);
        case FileManagerActionTypes.UNSELECT_ALL:
            return unSelectAllFiles(state);
        case FileManagerActionTypes.UNSELECT_FILE:
            return unSelectFile(state, action);
        case FileManagerActionTypes.UPLOAD_FILE_SUCCESS:
            return uploadFiles(state, action);
        case FileManagerActionTypes.DELETE_FILE_SELECTION:
        case FileManagerActionTypes.CROP_FILE:
        case FileManagerActionTypes.DELETE_FILE:
        case FileManagerActionTypes.LOAD_FILES:
        case FileManagerActionTypes.MOVE_FILES_ERROR:
            return state;
        default:
            return state;
    }
}
/** @type {?} */
export var filemanagerStateSelector = createFeatureSelector('files');
/** @type {?} */
export var getAll = function (state) {
    return state.files.map(function (id) { return state.entities[id]; });
};
/** @type {?} */
export var isChangeStateFiles = function (newState, prevState) {
    return prevState.files.length !== newState.files.length || prevState.files.filter(function (i) { return newState.files.indexOf(i) === -1; }).length > 0;
};
/** @type {?} */
export var isChangeStateSelectedFiles = function (newState, prevState) {
    return prevState.selectedFiles.length !== newState.selectedFiles.length || prevState.selectedFiles.filter(function (i) { return newState.selectedFiles.indexOf(i) === -1; }).length > 0;
};
//# sourceMappingURL=data:application/json;base64,