{"version":3,"sources":["ng://@rign/angular2-filemanager/lib/configuration/fileManagerConfiguration.service.ts","ng://@rign/angular2-filemanager/lib/configuration/IUrlConfiguration.ts","../../node_modules/tslib/tslib.es6.js","ng://@rign/angular2-filemanager/lib/configuration/tree.service.ts","ng://@rign/angular2-filemanager/lib/store/file-manager.action.ts","ng://@rign/angular2-filemanager/lib/crop/crop.component.ts","ng://@rign/angular2-filemanager/lib/dropdown/dropdown.component.ts","ng://@rign/angular2-filemanager/lib/services/imageDataConverter.service.ts","ng://@rign/angular2-filemanager/lib/services/extendedFileUplaoder.service.ts","ng://@rign/angular2-filemanager/lib/services/FilemanagerNotifcations.ts","ng://@rign/angular2-filemanager/lib/filesList/fileManagerUploader.service.ts","ng://@rign/angular2-filemanager/lib/filesList/file/file.component.ts","ng://@rign/angular2-filemanager/lib/store/fileManagerActions.service.ts","ng://@rign/angular2-filemanager/lib/store/file-manager-dispatcher.service.ts","ng://@rign/angular2-filemanager/lib/store/fileManagerApiAbstract.class.ts","ng://@rign/angular2-filemanager/lib/store/fileManagerApi.service.ts","ng://@rign/angular2-filemanager/lib/store/fileManagerEffects.service.ts","ng://@rign/angular2-filemanager/lib/filesList/filesList.component.ts","ng://@rign/angular2-filemanager/lib/preview/preview.component.ts","ng://@rign/angular2-filemanager/lib/services/searchFilter.service.ts","ng://@rign/angular2-filemanager/lib/services/fileTypeFilter.service.ts","ng://@rign/angular2-filemanager/lib/filesList/file.model.ts","ng://@rign/angular2-filemanager/lib/store/file-manager.reducer.ts","ng://@rign/angular2-filemanager/lib/services/currentDirectoryFiles.service.ts","ng://@rign/angular2-filemanager/lib/store/fileManagerBackendApi.service.ts","ng://@rign/angular2-filemanager/lib/toolbar/fileTypeFilter/fileTypeFilter.component.ts","ng://@rign/angular2-filemanager/lib/toolbar/interface/IUploadItemEvent.ts","ng://@rign/angular2-filemanager/lib/toolbar/models/button.model.ts","ng://@rign/angular2-filemanager/lib/toolbar/models/toolbarEvent.model.ts","ng://@rign/angular2-filemanager/lib/toolbar/searchFile/searchFile.component.ts","ng://@rign/angular2-filemanager/lib/dropdown/AbstractButton.class.ts","ng://@rign/angular2-filemanager/lib/dropdown/Button.class.ts","ng://@rign/angular2-filemanager/lib/dropdown/ButtonDivider.class.ts","ng://@rign/angular2-filemanager/lib/toolbar/selectionDropDown/selection.component.ts","ng://@rign/angular2-filemanager/lib/toolbar/toolbar.component.ts","ng://@rign/angular2-filemanager/lib/filemanager.component.ts","ng://@rign/angular2-filemanager/lib/filemanager.module.ts"],"names":["FileManagerConfiguration","configuration","this","allowedCropSize","name","width","height","contextMenuItems","fileTypesFilter","mimes","iconCls","text","defaultSelected","fileUrl","_a","urls","foldersUrl","folderMoveUrl","folderUrls","filesUrl","isMultiSelection","maxFileSize","mimeTypes","allowChooseMultipleFiles","Injectable","Inject","args","IUrlConfiguration","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__metadata","metadataKey","metadataValue","metadata","__read","o","m","Symbol","iterator","e","ar","next","done","push","value","error","__spread","concat","TreeService","http","_this","_super","apiConfig","addUrl","getUrl","updateUrl","removeUrl","moveUrl","tslib_1.__extends","HttpClient","NodeService","CHOOSE_FILES","CROP_FILE","CROP_FILE_SUCCESS","CROP_FILE_ERROR","DELETE_FILE","DELETE_FILE_SUCCESS","DELETE_FILE_SELECTION","DELETE_FILE_SELECTION_SUCCESS","INVERSE_FILE_SELECTION","LOAD_FILES","LOAD_FILES_SUCCESS","MOVE_FILES_SUCCESS","MOVE_FILES_ERROR","SELECT_ALL","SELECT_FILE","UNSELECT_FILE","UNSELECT_ALL","UPLOAD_FILE","UPLOAD_FILE_ERROR","UPLOAD_FILE_SUCCESS","ChooseFilesAction","payload","type","FileManagerActionTypes","CropFileAction","CropFileErrorAction","CropFileSuccessAction","DeleteFileAction","DeleteFileSuccessAction","DeleteSelectedFilesAction","DeleteSelectedFilesSuccessAction","InverseFilesSelectionAction","LoadFilesAction","LoadFilesSuccessAction","MoveFilesErrorAction","MoveFilesSuccessAction","SelectAllFilesAction","SelectFileAction","UnSelectAllFilesAction","UnSelectFileAction","UploadFilesAction","UploadFilesErrorAction","UploadFilesSuccessAction","CropComponent","resolver","store","onCrop","EventEmitter","cropSizeList","updateCropSize","cropSize","image","Image","cropperComponent","resolveComponentFactory","ImageCropperComponent","cropperComponentRef","container","createComponent","detach","currentCropSize","instance","settings","getCropperSettings","subscribe","bounds","setTimeout","src","file","url","setImage","ngAfterContentInit","cropImage","x","left","y","top","dispatch","cropperSettings","CropperSettings","scale","calculateScale","getWidth","getHeight","noFileInput","canvasWidth","canvasHeight","Component","selector","template","ComponentFactoryResolver","Store","Input","Output","ViewChild","read","ViewContainerRef","DropdownComponent","onClick","isOpen","hide","selectButton","button","emit","toggleOpen","ImageDataConverter","getProperties","folderId","properties","id","UUID","size","data","getBase64FromFile","pipe","concatMap","indexOf","getImageDimensions","of","map","dimensions","reader","FileReader","readAsDataURL","fromEvent","result","toString","style","display","loadImage","naturalWidth","naturalHeight","document","body","appendChild","ExtendedFileUploader","options","filemanagerNotification","onWhenAddingFileFailed","item","filter","notification","title","message","sendNotification","uploadItem","imageDataConverter","_onProgressItem","isUploading","header","headers","find","object","_file","_onCompleteItem","JSON","stringify","FileUploader","FilemanagerNotifcations","notification$","Subject","getNotificationStream","FileManagerUploader","allowedMimeType","uploader","clear","authToken","setOptions","getDefaultOptions","removeAfterUpload","autoUpload","method","setAuthorizationToken","token","setDirectoryId","directoryId","FileComponent","onPreviewFile","onCropFile","onSelectFile","removeTitle","deleteFile","$event","preventDefault","stopPropagation","getRemoveMessage","openPreview","fileEvent","eventName","openCrop","selectFile","unSelectFile","chooseFile","files","toJSON","encapsulation","ViewEncapsulation","None","FileManagerActionsService","chooseFiles","FILEMANAGER_CHOOSE_FILES","cropFile","FILEMANAGER_CROP_FILE","cropFileSuccess","FILEMANAGER_CROP_FILE_SUCCESS","cropFileError","FILEMANAGER_CROP_FILE_ERROR","FILEMANAGER_DELETE_FILE","deleteFileSuccess","FILEMANAGER_DELETE_FILE_SUCCESS","deleteSelectedFiles","fileIds","FILEMANAGER_DELETE_FILE_SELECTION","deleteSelectedFilesSuccess","FILEMANAGER_DELETE_FILE_SELECTION_SUCCESS","loadFiles","FILEMANAGER_LOAD_FILES","inverseFileSelection","FILEMANAGER_INVERSE_FILE_SELECTION","loadFilesSuccess","FILEMANAGER_LOAD_FILES_SUCCESS","moveFileSuccess","FILEMANAGER_MOVE_FILES_SUCCESS","moveFileError","FILEMANAGER_MOVE_FILES_ERROR","selectAllFiles","FILEMANAGER_SELECT_ALL","FILEMANAGER_SELECT_FILE","unSelectAll","FILEMANAGER_UNSELECT_ALL","FILEMANAGER_UNSELECT_FILE","upload","FILEMANAGER_UPLOAD_FILE","uploadSuccess","FILEMANAGER_UPLOAD_FILE_SUCCESS","uploadError","FILEMANAGER_UPLOAD_FILE_ERROR","FileManagerDispatcherService","fileManagerActions","inverseSelection","unSelectAllFiles","FILEMANAGER_TREE_NAME","AbstractFileManagerApiService","treeName","fileManagerName","currentNodeId","FileManagerApiService","filemanagerNotfication","load","nodeId","nodes","getAllDataFromLocalStorage","getChildren","add","node","parentNodeId","parentId","saveNodes","empty","move","srcNode","targetNode","srcId","targetId","index","findIndexByNodeId","update","remove","throwError","splice","setAllNodes","getAllFileDataFromLocalStorage","newFiles","getFilesFromFolder","convertLocalData2IOuterFile","removeFile","findIndexByFileId","saveFiles","removeSelectedFiles","selectedFiles","numberOfFiles","forEach","fileId","uploadFile","fileData","convertIOuterFile2LocalData","Observable","throw","moveFile","ids","movedFiles","findIndex","localStorage","getItem","parse","setItem","thumbnailUrl","FileManagerEffectsService","actions$","fileManagerApiService","loadFiles$","ofType","switchMap","action","catchError","onLoadFilesError","cropFile$","deleteFile$","onDeleteFileError","deleteFilesSelection$","deleteFilesSelection","onDeleteFilesSelectionError","uploadFile$","moveFile$","TreeActionTypes","TREE_MOVE_NODE","sourceOfDroppedData","moveFiles","filesMoveSuccess$","onMoveFilesSuccess","uploadError$","cropFileSuccess$","deleteFileSuccess$","onCropFileError","onMoveFilesError","folder","Actions","tslib_1.__decorate","Effect","FilesListComponent","fileManagerDispatcher","notifications","fileManagerEffects","dragZone","success","toggleSelection","selected","isSelected","getId","changeDetection","ChangeDetectionStrategy","OnPush","NotificationsService","PreviewComponent","currentIndex","ngOnChanges","prev","keyEvent","event","keyCode","HostListener","SearchFilterService","filter$","BehaviorSubject","getValue","setValue","FileTypeFilterService","FileModel","_iconsFolder","smallIconsFolder","fromJSON","_name","isImage","_orgData","getFileExt","bigIconsFolder","split","pop","getMime","getSelectData","mime","fileManagerReducer","state","entities","inverseFilesSelection","oldEntity","uploadFiles","newState","filemanagerStateSelector","createFeatureSelector","getAll","CurrentDirectoryFilesService","fileTypeFilter","searchFilterService","store$","select","observable$","entities$","distinctUntilChanged","currentDirectoryFileIds$","selectedFiles$","files$","getFilesStream","filteredFiles$","getCurrentDirectoryFilesStream","withLatestFrom","combineLatest","search","toLocaleLowerCase","FileManagerBackendApiService","$http","nodeIds","params","HttpParams","set","get","post","newNode","put","source","movedNode","delete","removedNode","join","FileTypeFilterComponent","typeFilterList","selectedType","ngOnInit","setFilterType","IUploadItemEvent","ADD_FOLDER","CHOOSE_SELECTION","DELETE_SELECTION","INVERSE_SELECTION","REFRESH_FILES_LIST","ToolbarEventModel","SearchFileComponent","searchField","FormControl","valueChanges","debounceTime","AbstractButtonClass","symbol","label","icon","iconCssClass","disabled","ButtonClass","isDivider","ButtonDividerClass","SelectionComponent","currentDirectoryFilesService","onMenuButtonClick","selectAllButton","Button","unselectAllButton","inverseSelectionButton","deleteSelectionButton","chooseSelectionButton","selectButtonsList","createBasicButtons","initListenOnLoadFiles","ngOnDestroy","onLoadFilesSubscriber","unsubscribe","numberOfSelectedFiles","disableAllButtons","enableAllButtons","enableSelectAllButton","onSelectDropdownClick","buttons","ToolbarComponent","fileManagerUploader","onAddFolderClick","onUpload","onCompleteAll","currentFolderId","onCompleteItem","response","status","addFolder","onRefreshFilesList","FileManagerComponent","nodeDispatcherService","treeService","filemanagerNotifcations","treeInitializerService","onSingleFileSelect","treeConfiguration","showAddButton","disableMoveNodes","treeId","dropZone","contextMenu","currentSelectedFilesIds","currentSelectedFiles","isPreviewMode","isCropMode","notificationOptions","position","timeOut","lastOnBottom","preventDuplicates","rtl","showProgressBar","pauseOnHover","subscription","Subscription","menu","_b","treeModel","init","currentSelectedNode$","currentSelectedFolder","closeModal","onAddFolder","treeComponent","onAdd","fileEventData","currentSelectedFile","onOpenCropFileEditor","reloadFiles","keyEvents","providers","NodeDispatcherService","TreeInitializerService","TreeComponent","FileManagerModule","forRoot","config","apiProvider","ngModule","provide","useValue","forChild","NgModule","imports","CommonModule","ConfirmationPopoverModule","EffectsModule","forFeature","FormsModule","FileUploadModule","HttpClientModule","ImageCropperModule","ReactiveFormsModule","SimpleNotificationsModule","StoreModule","TranslateModule","TreeModule","declarations","entryComponents","exports","schemas","CUSTOM_ELEMENTS_SCHEMA","prevState"],"mappings":"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","sourcesContent":["import {IContextMenu} from '@rign/angular2-tree';\nimport {Injectable, Inject} from '@angular/core';\nimport {IFileTypeFilter} from '../toolbar/interface/IFileTypeFilter';\nimport {ICropSize} from '../crop/ICropSize';\nimport {IFileManagerConfiguration} from './IFileManagerConfiguration';\n\n@Injectable()\nexport class FileManagerConfiguration {\n\n  public allowedCropSize: ICropSize[] = [\n    {\n      name: 'RI_FM_BTN_LANDSCAPE',\n      width: 300,\n      height: 100\n    },\n    {\n      name: 'RI_FM_BTN_PORTRAIT',\n      width: 200,\n      height: 300\n    }\n  ];\n\n  public contextMenuItems: IContextMenu[] = [];\n\n  public fileTypesFilter: IFileTypeFilter[] = [\n    {\n      name: 'ALL',\n      mimes: [],\n      iconCls: 'fa fa-file-o',\n      text: 'All files',\n      defaultSelected: true\n    },\n    {\n      name: 'IMAGES',\n      mimes: ['image/jpg', 'image/jpeg', 'image/png', 'image/gif', 'image/png'],\n      iconCls: 'fa fa-picture-o',\n      text: 'Images'\n    },\n    {\n      name: 'AUDIO',\n      mimes: ['audio/mpeg', 'audio/x-ms-wma', 'audio/vnd.rn-realaudio', 'audio/x-wav', 'audio/mp3'],\n      iconCls: 'fa fa-file-audio-o',\n      text: 'Audio'\n    },\n    {\n      name: 'VIDEO',\n      mimes: ['video/mpeg', 'video/mp4', 'video/quicktime', 'video/x-ms-wmv'],\n      iconCls: 'fa fa-file-video-o',\n      text: 'Video'\n    },\n    {\n      name: 'ARCHIVE',\n      mimes: ['application/zip'],\n      iconCls: 'fa fa-file-archive-o',\n      text: 'Archive'\n    }\n  ];\n\n  public folderUrls: {foldersUrl: string, folderMoveUrl: string};\n  public fileUrl = '/api/files';\n\n  public isMultiSelection: boolean;\n\n  public maxFileSize: number;\n\n  public mimeTypes: string[] | null;\n\n  public allowChooseMultipleFiles: boolean;\n\n  constructor(@Inject('fileManagerConfiguration') configuration: IFileManagerConfiguration) {\n    const {foldersUrl, folderMoveUrl} = configuration.urls;\n    this.folderUrls = {foldersUrl, folderMoveUrl};\n    this.fileUrl = configuration.urls.filesUrl;\n    this.isMultiSelection = configuration.isMultiSelection || false;\n    this.maxFileSize = configuration.maxFileSize || 0;\n    this.mimeTypes = configuration.mimeTypes || null;\n    this.allowChooseMultipleFiles = configuration.allowChooseMultipleFiles || false;\n  }\n}\n","export class IUrlConfiguration {\n  filesUrl: string | null;\n  foldersUrl: string;\n  folderMoveUrl: string;\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import {Injectable, Inject} from '@angular/core';\nimport {NodeService} from '@rign/angular2-tree';\nimport {IFileManagerConfiguration} from './IFileManagerConfiguration';\nimport {HttpClient} from '@angular/common/http';\n\n@Injectable()\nexport class TreeService extends NodeService {\n  public constructor(protected http: HttpClient, @Inject('fileManagerConfiguration') configuration: IFileManagerConfiguration) {\n    super(http);\n\n    this.apiConfig = {\n      addUrl: configuration.urls.foldersUrl,\n      getUrl: configuration.urls.foldersUrl,\n      updateUrl: configuration.urls.foldersUrl,\n      removeUrl: configuration.urls.foldersUrl,\n      moveUrl: configuration.urls.folderMoveUrl\n    };\n  }\n}\n","import {Action} from '@ngrx/store';\nimport {IOuterFile} from '../filesList/interface/IOuterFile';\nimport {ICropBounds} from '../crop/ICropBounds';\nimport {IFileModel} from '../filesList/interface/IFileModel';\n\nexport enum FileManagerActionTypes {\n  CHOOSE_FILES = 'FILEMANAGER_CHOOSE_FILES',\n  CROP_FILE = 'FILEMANAGER_CROP_FILE',\n  CROP_FILE_SUCCESS = 'FILEMANAGER_CROP_FILE_SUCCESS',\n  CROP_FILE_ERROR = 'FILEMANAGER_CROP_FILE_ERROR',\n  DELETE_FILE = 'FILEMANAGER_DELETE_FILE',\n  DELETE_FILE_SUCCESS = 'FILEMANAGER_DELETE_FILE_SUCCESS',\n  DELETE_FILE_SELECTION = 'FILEMANAGER_DELETE_FILE_SELECTION',\n  DELETE_FILE_SELECTION_SUCCESS = 'FILEMANAGER_DELETE_FILE_SELECTION_SUCCESS',\n  INVERSE_FILE_SELECTION = 'FILEMANAGER_INVERSE_FILE_SELECTION',\n  LOAD_FILES = 'FILEMANAGER_LOAD_FILES',\n  LOAD_FILES_SUCCESS = 'FILEMANAGER_LOAD_FILES_SUCCESS',\n  MOVE_FILES_SUCCESS = 'FILEMANAGER_MOVE_FILES_SUCCESS',\n  MOVE_FILES_ERROR = 'FILEMANAGER_MOVE_FILES_ERROR',\n  SELECT_ALL = 'FILEMANAGER_SELECT_ALL',\n  SELECT_FILE = 'FILEMANAGER_SELECT_FILE',\n  UNSELECT_FILE = 'FILEMANAGER_UNSELECT_FILE',\n  UNSELECT_ALL = 'FILEMANAGER_UNSELECT_ALL',\n  UPLOAD_FILE = 'FILEMANAGER_UPLOAD_FILE',\n  UPLOAD_FILE_ERROR = 'FILEMANAGER_UPLOAD_FILE_ERROR',\n  UPLOAD_FILE_SUCCESS = 'FILEMANAGER_UPLOAD_FILE_SUCCESS',\n}\n\nexport class ChooseFilesAction implements Action {\n  readonly type = FileManagerActionTypes.CHOOSE_FILES;\n\n  public constructor(public payload: { files: IOuterFile[] }) {\n\n  }\n}\n\nexport class CropFileAction implements Action {\n  readonly type = FileManagerActionTypes.CROP_FILE;\n\n  public constructor(public payload: { file: IFileModel, bounds: ICropBounds }) {\n\n  }\n}\n\nexport class CropFileErrorAction implements Action {\n  readonly type = FileManagerActionTypes.CROP_FILE_ERROR;\n\n  public constructor(public payload: { file: IFileModel}) {\n\n  }\n}\n\nexport class CropFileSuccessAction implements Action {\n  readonly type = FileManagerActionTypes.CROP_FILE_SUCCESS;\n\n  public constructor(public payload: { file: IFileModel}) {\n\n  }\n}\n\nexport class DeleteFileAction implements Action {\n  readonly type = FileManagerActionTypes.DELETE_FILE;\n\n  public constructor(public payload: { file: IFileModel}) {\n\n  }\n}\n\nexport class DeleteFileSuccessAction implements Action {\n  readonly type = FileManagerActionTypes.DELETE_FILE_SUCCESS;\n\n  public constructor(public payload: { file: IFileModel}) {\n\n  }\n}\n\nexport class DeleteSelectedFilesAction implements Action {\n  readonly type = FileManagerActionTypes.DELETE_FILE_SELECTION;\n\n  public constructor(public payload: { files: string[]}) {\n\n  }\n}\n\nexport class DeleteSelectedFilesSuccessAction implements Action {\n  readonly type = FileManagerActionTypes.DELETE_FILE_SELECTION_SUCCESS;\n\n  public constructor(public payload: { files: string[]}) {\n\n  }\n}\n\nexport class InverseFilesSelectionAction implements Action {\n  readonly type = FileManagerActionTypes.INVERSE_FILE_SELECTION;\n\n}\n\nexport class LoadFilesAction implements Action {\n  readonly type = FileManagerActionTypes.LOAD_FILES;\n\n  public constructor(public payload: { folderId: string}) {\n\n  }\n}\n\nexport class LoadFilesSuccessAction implements Action {\n  readonly type = FileManagerActionTypes.LOAD_FILES_SUCCESS;\n\n  public constructor(public payload: { files: IOuterFile[]}) {\n\n  }\n}\n\nexport class MoveFilesErrorAction implements Action {\n  readonly type = FileManagerActionTypes.MOVE_FILES_ERROR;\n\n  public constructor(public payload: { files: IOuterFile[]}) {\n\n  }\n}\n\nexport class MoveFilesSuccessAction implements Action {\n  readonly type = FileManagerActionTypes.MOVE_FILES_SUCCESS;\n\n  public constructor(public payload: { folderId: string, files: IOuterFile[]}) {\n\n  }\n}\n\nexport class SelectAllFilesAction implements Action {\n  readonly type = FileManagerActionTypes.SELECT_ALL;\n}\n\nexport class SelectFileAction implements Action {\n  readonly type = FileManagerActionTypes.SELECT_FILE;\n\n  public constructor(public payload: { file: IFileModel}) {\n\n  }\n}\n\nexport class UnSelectAllFilesAction implements Action {\n  readonly type = FileManagerActionTypes.UNSELECT_ALL;\n}\n\nexport class UnSelectFileAction implements Action {\n  readonly type = FileManagerActionTypes.UNSELECT_FILE;\n\n  public constructor(public payload: { file: IFileModel}) {\n\n  }\n}\n\nexport class UploadFilesAction implements Action {\n  readonly type = FileManagerActionTypes.UPLOAD_FILE;\n\n  public constructor(public payload: { files: IOuterFile[]}) {\n\n  }\n}\n\nexport class UploadFilesErrorAction implements Action {\n  readonly type = FileManagerActionTypes.UPLOAD_FILE_ERROR;\n\n  public constructor(public payload: { files: IOuterFile[]}) {\n\n  }\n}\n\nexport class UploadFilesSuccessAction implements Action {\n  readonly type = FileManagerActionTypes.UPLOAD_FILE_SUCCESS;\n\n  public constructor(public payload: { files: IOuterFile[]}) {\n\n  }\n}\n\nexport type FileManagerAction =\n  ChooseFilesAction\n  | CropFileAction\n  | CropFileErrorAction\n  | CropFileSuccessAction\n  | DeleteFileAction\n  | DeleteFileSuccessAction\n  | DeleteSelectedFilesAction\n  | DeleteSelectedFilesSuccessAction\n  | InverseFilesSelectionAction\n  | LoadFilesAction\n  | LoadFilesSuccessAction\n  | MoveFilesErrorAction\n  | MoveFilesSuccessAction\n  | SelectAllFilesAction\n  | SelectFileAction\n  | UnSelectAllFilesAction\n  | UnSelectFileAction\n  | UploadFilesAction\n  | UploadFilesErrorAction\n  | UploadFilesSuccessAction\n;\n","import {\n  Component, Input, ViewChild, ViewContainerRef, ComponentFactoryResolver, Output,\n  EventEmitter, AfterContentInit\n} from '@angular/core';\nimport {FileModel} from '../filesList/file.model';\nimport {CropperSettings} from 'ng2-img-cropper/src/cropperSettings';\nimport {ICropSize} from './ICropSize';\nimport {FileManagerConfiguration} from '../configuration/fileManagerConfiguration.service';\nimport {Bounds} from 'ng2-img-cropper/src/model/bounds';\nimport {ICropBounds} from './ICropBounds';\nimport {ImageCropperComponent} from 'ng2-img-cropper';\nimport {IFileManagerState} from '../store/file-manager.reducer';\nimport {Store} from '@ngrx/store';\nimport {CropFileAction} from '../store/file-manager.action';\n\n@Component({\n  selector: 'crop-image',\n  styleUrls: ['./crop.scss'],\n  template: `\n    <div class=\"crop-image\">\n      <div class=\"crop-workbench\">\n        <div #container></div>\n      </div>\n      <div class=\"btn-toolbar\">\n        <div class=\"btn-group\">\n          <button class=\"btn btn-primary\" *ngFor=\"let cropSize of cropSizeList\" (click)=\"updateCropSize(cropSize)\"\n                  [ngClass]=\"{'active': cropSize == currentCropSize}\">{{cropSize.name | translate}}\n          </button>\n        </div>\n        <div class=\"btn-group pull-right\">\n          <button class=\"btn btn-success btn-icon\" (click)=\"cropImage()\">\n            <i class=\"fa fa-check\"></i>\n            <span>{{'RI_FM_BTN_SAVE' | translate}}</span>\n          </button>\n        </div>\n      </div>\n    </div>\n  `\n})\n\nexport class CropComponent implements AfterContentInit {\n  @Input()\n  public file: FileModel;\n\n  @Output()\n  public onCrop = new EventEmitter();\n\n  @ViewChild('container', {read: ViewContainerRef})\n  public container: ViewContainerRef;\n\n  @ViewChild('cropper')\n  public cropper: ImageCropperComponent;\n\n  private bounds: Bounds;\n\n  public cropSizeList: ICropSize[];\n  public currentCropSize: ICropSize;\n\n  constructor(private resolver: ComponentFactoryResolver,\n              private configuration: FileManagerConfiguration,\n              private store: Store<IFileManagerState>) {\n    this.cropSizeList = configuration.allowedCropSize;\n  }\n\n  updateCropSize(cropSize: ICropSize) {\n    const image = new Image();\n    const cropperComponent = this.resolver.resolveComponentFactory(ImageCropperComponent);\n    const cropperComponentRef = this.container.createComponent(cropperComponent);\n\n    if (this.container.length > 1) {\n      this.container.detach(0);\n    }\n\n    this.currentCropSize = cropSize;\n    cropperComponentRef.instance.settings = this.getCropperSettings();\n    cropperComponentRef.instance.image = {};\n    cropperComponentRef.instance.onCrop\n      .subscribe((bounds: Bounds) => this.bounds = bounds);\n\n    setTimeout(() => {\n      image.src = this.file.url;\n      cropperComponentRef.instance.setImage(image);\n    });\n  }\n\n  public ngAfterContentInit(): void {\n    this.updateCropSize(this.cropSizeList[0]);\n  }\n\n  public cropImage() {\n    const bounds: ICropBounds = {\n      x: this.bounds.left,\n      y: this.bounds.top,\n      width: this.bounds.width,\n      height: this.bounds.height\n    };\n\n    this.store.dispatch(new CropFileAction({file: this.file, bounds}));\n  }\n\n\n  private getCropperSettings(): CropperSettings {\n    const cropperSettings = new CropperSettings();\n    const scale = this.calculateScale();\n    const width = scale * this.file.getWidth();\n    const height = scale * this.file.getHeight();\n\n    cropperSettings.noFileInput = true;\n    cropperSettings.width = this.currentCropSize.width;\n    cropperSettings.height = this.currentCropSize.height;\n    cropperSettings.canvasWidth = width;\n    cropperSettings.canvasHeight = height;\n\n    return cropperSettings;\n  }\n\n  /**\n   * Calculates scale between current file dimensions and box 600x600\n   */\n  private calculateScale(): number {\n    const scale = this.file.getWidth() / this.file.getHeight();\n\n    if (scale > 1) {\n      if (this.file.getWidth() > 600) {\n        return 600 / this.file.getWidth();\n      }\n    } else {\n      if (this.file.getHeight() > 600) {\n        return 600 / this.file.getHeight();\n      }\n    }\n\n    return 1;\n  }\n}\n","import {Component, Input, Output, EventEmitter} from '@angular/core';\nimport {IButtonData} from './IButton';\n\n@Component({\n  selector: 'ri-dropdown',\n  styleUrls: ['./dropdown.scss'],\n  templateUrl: './dropdown.html'\n})\n\nexport class DropdownComponent {\n  @Input()\n  public mainButton: IButtonData;\n\n  @Input()\n  public buttons: IButtonData[];\n\n  @Input()\n  public displayMainButtonLabel: boolean;\n\n  @Output()\n  public onClick = new EventEmitter();\n\n  public isOpen = false;\n\n  public hide(): void {\n    this.isOpen = false;\n  }\n\n  public selectButton(button: IButtonData): void {\n    this.hide();\n    this.onClick.emit(button);\n  }\n\n  public toggleOpen() {\n    this.isOpen = !this.isOpen;\n  }\n}\n","import {UUID} from 'angular2-uuid';\nimport {Injectable} from '@angular/core';\nimport {concatMap, map} from 'rxjs/operators';\nimport {fromEvent, Observable, of} from 'rxjs';\n\nexport interface IFileDataProperties {\n  id: string | number;\n  folderId: string;\n  name: string;\n  size: number;\n  data: string;\n  type: string;\n  width?: number;\n  height?: number;\n  selected?: boolean;\n}\n\nexport interface IImageDimensions {\n  width: number;\n  height: number;\n}\n\n@Injectable()\nexport class ImageDataConverter {\n  public getProperties(file: File, folderId: string): Observable<IFileDataProperties> {\n    const properties: IFileDataProperties = {\n      id: UUID.UUID(),\n      folderId: folderId,\n      name: file.name,\n      size: file.size,\n      type: file.type,\n      data: ''\n    };\n\n    const reader = this.getBase64FromFile(file);\n\n    return reader\n      .pipe(\n        concatMap((data: string) => {\n          properties.data = data;\n\n          if (properties.type.indexOf('image') === 0) {\n            return this.getImageDimensions(data);\n          } else {\n            return of({width: 0, height: 0});\n          }\n        }),\n        map((dimensions: IImageDimensions) => {\n          properties.width = dimensions.width;\n          properties.height = dimensions.height;\n\n          return properties;\n        })\n      );\n  }\n\n  /**\n   * Create observable which return image as base64 data\n   */\n  private getBase64FromFile(file: File): Observable<string> {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n\n\n    return fromEvent(reader, 'load')\n      .pipe(\n        map(() => {\n          return reader.result.toString();\n        })\n      );\n  }\n\n  /**\n   * Create observable which return dimensions of the image\n   */\n  private getImageDimensions(data: string): Observable<IImageDimensions> {\n    const image = new Image();\n    image.src = data;\n    image.style.display = 'none';\n\n    const loadImage = fromEvent(image, 'load')\n      .pipe(\n        map(() => {\n          return {\n            width: image.naturalWidth,\n            height: image.naturalHeight\n          };\n        })\n      );\n\n    document.body.appendChild(image);\n\n    return loadImage;\n  }\n}\n","import {FileItem, FileUploader, FileUploaderOptions} from 'ng2-file-upload';\nimport {IFileDataProperties, ImageDataConverter} from './imageDataConverter.service';\nimport {FilemanagerNotifcations, INotification} from './FilemanagerNotifcations';\nimport {FileLikeObject} from 'ng2-file-upload/file-upload/file-like-object.class';\n\nexport class ExtendedFileUploader extends FileUploader {\n\n  public constructor(options: FileUploaderOptions, private filemanagerNotification: FilemanagerNotifcations) {\n    super(options);\n  }\n\n  public onWhenAddingFileFailed(item: FileLikeObject, filter: any, options: FileUploaderOptions) {\n    const notification: INotification = {\n      type: 'alert',\n      title: 'Add file to queue',\n      message: `File not add to queue`\n    };\n\n    if (filter.name === 'fileSize') {\n      notification.message = `File size is too large - max size  is ${options.maxFileSize / 1024} KB`;\n    } else {\n      notification.message = `File mime type \"${item.type}\" is not allowed`;\n    }\n    this.filemanagerNotification.sendNotification(notification);\n  }\n\n  public uploadItem(value: FileItem): void {\n    if (this.options.url) {\n      super.uploadItem(value);\n    } else {\n      const imageDataConverter = new ImageDataConverter();\n      this._onProgressItem(value, 0);\n\n      if (this.isUploading) {\n        return;\n      }\n\n      this.isUploading = true;\n\n      const header = this.options.headers.find((object: any) => object.name === 'folderId');\n\n      this._onProgressItem(value, 50);\n      imageDataConverter.getProperties(value._file, header.value)\n        .subscribe((file: IFileDataProperties) => {\n          this.isUploading = false;\n\n          this._onProgressItem(value, 100);\n          this._onCompleteItem(value, JSON.stringify(file), 200, {});\n        });\n    }\n  }\n}\n","import {Subject} from 'rxjs';\n\nexport interface INotification {\n  type: 'alert' | 'error' | 'success';\n  title: string;\n  message?: string;\n}\n\nexport class FilemanagerNotifcations {\n  private notification$ = new Subject<INotification>();\n\n  public sendNotification(notification: INotification): void {\n    this.notification$.next(notification);\n  }\n\n  public getNotificationStream(): Subject<INotification> {\n    return this.notification$;\n  }\n}\n","import {Injectable, Inject} from '@angular/core';\nimport {ExtendedFileUploader} from '../services/extendedFileUplaoder.service';\nimport {IFileManagerConfiguration} from '../configuration/IFileManagerConfiguration';\nimport {FilemanagerNotifcations} from '../services/FilemanagerNotifcations';\nimport {FileUploaderOptions} from 'ng2-file-upload';\n\n@Injectable()\nexport class FileManagerUploader {\n  public uploader: ExtendedFileUploader;\n\n  public constructor(@Inject('fileManagerConfiguration') configuration: IFileManagerConfiguration,\n                     filemanagerNotification: FilemanagerNotifcations) {\n    const options: FileUploaderOptions = {\n      allowedMimeType: configuration.mimeTypes,\n      url: configuration.urls.filesUrl,\n      maxFileSize: configuration.maxFileSize\n    };\n\n    this.uploader = new ExtendedFileUploader(options, filemanagerNotification);\n  }\n\n  public clear() {\n    this.uploader.authToken = null;\n    this.uploader.setOptions(this.getDefaultOptions());\n  }\n\n  public getDefaultOptions() {\n    const options = {};\n    options['removeAfterUpload'] = true;\n    options['autoUpload'] = true;\n    options['method'] = 'POST';\n\n    return options;\n  }\n\n  public setAuthorizationToken(token: string) {\n    this.uploader.authToken = token;\n  }\n\n  public setDirectoryId(directoryId: string | number): FileManagerUploader {\n    const options = this.getDefaultOptions();\n\n    options['headers'] = [{name: 'folderId', value: directoryId.toString()}];\n\n    this.uploader.setOptions(options);\n\n    return this;\n  }\n}\n","import {Component, EventEmitter, Input, Output, ViewEncapsulation} from '@angular/core';\nimport {IFileModel} from '../interface/IFileModel';\nimport {FileManagerConfiguration} from '../../configuration/fileManagerConfiguration.service';\nimport {IFileEvent} from '../interface/IFileEvent';\nimport {Store} from '@ngrx/store';\nimport {IFileManagerState} from '../../store/file-manager.reducer';\nimport {\n  ChooseFilesAction,\n  DeleteFileAction,\n  SelectFileAction,\n  UnSelectFileAction\n} from '../../store/file-manager.action';\n\n@Component({\n  selector: 'ri-file-component',\n  templateUrl: './file.component.html',\n  encapsulation: ViewEncapsulation.None\n})\nexport class FileComponent {\n  @Input()\n  public file: IFileModel;\n\n  @Output()\n  public onPreviewFile = new EventEmitter();\n\n  @Output()\n  public onCropFile = new EventEmitter();\n\n  @Output()\n  public onSelectFile = new EventEmitter();\n\n  public removeTitle = 'Remove file';\n\n  public constructor(public configuration: FileManagerConfiguration,\n                     private store: Store<IFileManagerState>) {\n  }\n\n  /**\n   * Fired when clicked on button \"delete file\"\n   *\n   * @param file\n   */\n  public deleteFile($event: MouseEvent, file: IFileModel) {\n    this.store.dispatch(new DeleteFileAction({file}));\n\n    $event.preventDefault();\n    $event.stopPropagation();\n  }\n\n  public getRemoveMessage(file: IFileModel) {\n    return 'You are try to delete <b>' + file.name + '</b>. Are you sure?';\n  }\n\n  public openPreview($event: MouseEvent): void {\n    let fileEvent: IFileEvent = {\n      eventName: 'onPreviewFile',\n      file: this.file\n    };\n    this.onPreviewFile.emit(fileEvent);\n\n    $event.preventDefault();\n    $event.stopPropagation();\n  }\n\n  public openCrop($event: MouseEvent): void {\n    let fileEvent: IFileEvent = {\n      eventName: 'onCropFile',\n      file: this.file\n    };\n    this.onCropFile.emit(fileEvent);\n\n    $event.preventDefault();\n    $event.stopPropagation();\n  }\n\n  public selectFile(): void {\n    this.store.dispatch(new SelectFileAction({file: this.file}));\n  }\n\n  public unSelectFile(): void {\n    this.store.dispatch(new UnSelectFileAction({file: this.file}));\n  }\n\n  public chooseFile($event: MouseEvent, file: IFileModel): void {\n    this.store.dispatch(new ChooseFilesAction({files: [file.toJSON()]}));\n\n    $event.preventDefault();\n    $event.stopPropagation();\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {Action} from '@ngrx/store';\nimport {IOuterFile} from '../filesList/interface/IOuterFile';\nimport {IFileModel} from '../filesList/interface/IFileModel';\nimport {ICropBounds} from '../crop/ICropBounds';\n\nexport interface IFileManagerPayloadData {\n  folderId?: string;\n  files?: IOuterFile[];\n  file?: IFileModel;\n  fileIds?: string[];\n  bounds?: ICropBounds;\n}\n\nexport interface IFileManagerAction extends Action {\n  payload: IFileManagerPayloadData;\n}\n\n/**\n * @Deprecated - Will be removed in 3.0.0\n */\n@Injectable()\nexport class FileManagerActionsService {\n  static FILEMANAGER_CHOOSE_FILES = 'FILEMANAGER_CHOOSE_FILES';\n  static FILEMANAGER_CROP_FILE = 'FILEMANAGER_CROP_FILE';\n  static FILEMANAGER_CROP_FILE_SUCCESS = 'FILEMANAGER_CROP_FILE_SUCCESS';\n  static FILEMANAGER_CROP_FILE_ERROR = 'FILEMANAGER_CROP_FILE_ERROR';\n  static FILEMANAGER_DELETE_FILE = 'FILEMANAGER_DELETE_FILE';\n  static FILEMANAGER_DELETE_FILE_SUCCESS = 'FILEMANAGER_DELETE_FILE_SUCCESS';\n  static FILEMANAGER_DELETE_FILE_SELECTION = 'FILEMANAGER_DELETE_FILE_SELECTION';\n  static FILEMANAGER_DELETE_FILE_SELECTION_SUCCESS = 'FILEMANAGER_DELETE_FILE_SELECTION_SUCCESS';\n  static FILEMANAGER_INVERSE_FILE_SELECTION = 'FILEMANAGER_INVERSE_FILE_SELECTION';\n  static FILEMANAGER_LOAD_FILES = 'FILEMANAGER_LOAD_FILES';\n  static FILEMANAGER_LOAD_FILES_SUCCESS = 'FILEMANAGER_LOAD_FILES_SUCCESS';\n  static FILEMANAGER_MOVE_FILES_SUCCESS = 'FILEMANAGER_MOVE_FILES_SUCCESS';\n  static FILEMANAGER_MOVE_FILES_ERROR = 'FILEMANAGER_MOVE_FILES_ERROR';\n  static FILEMANAGER_SELECT_ALL = 'FILEMANAGER_SELECT_ALL';\n  static FILEMANAGER_SELECT_FILE = 'FILEMANAGER_SELECT_FILE';\n  static FILEMANAGER_UNSELECT_FILE = 'FILEMANAGER_UNSELECT_FILE';\n  static FILEMANAGER_UNSELECT_ALL = 'FILEMANAGER_UNSELECT_ALL';\n  static FILEMANAGER_UPLOAD_FILE = 'FILEMANAGER_UPLOAD_FILE';\n  static FILEMANAGER_UPLOAD_FILE_ERROR = 'FILEMANAGER_UPLOAD_FILE_ERROR';\n  static FILEMANAGER_UPLOAD_FILE_SUCCESS = 'FILEMANAGER_UPLOAD_FILE_SUCCESS';\n\n\n  /**\n   * @Deprecated - Will be removed in 3.0.0, use new ChooseFilesAction() instead of it\n   */\n  public chooseFiles(files: IOuterFile[]): IFileManagerAction {\n    return {\n      type: FileManagerActionsService.FILEMANAGER_CHOOSE_FILES,\n      payload: {files}\n    };\n  }\n\n  /**\n   * @Deprecated - Will be removed in 3.0.0, use new CropFileAction() instead of it\n   */\n  public cropFile(file: IFileModel, bounds: ICropBounds): IFileManagerAction {\n    return {\n      type: FileManagerActionsService.FILEMANAGER_CROP_FILE,\n      payload: {\n        file: file,\n        bounds: bounds\n      }\n    };\n  }\n\n  /**\n   * @Deprecated - Will be removed in 3.0.0, use new CropFileSuccessAction() instead of it\n   */\n  public cropFileSuccess(file: IFileModel): IFileManagerAction {\n    return {\n      type: FileManagerActionsService.FILEMANAGER_CROP_FILE_SUCCESS,\n      payload: {\n        file: file\n      }\n    };\n  }\n\n  /**\n   * @Deprecated - Will be removed in 3.0.0, use new CropFileErrorAction() instead of it\n   */\n  public cropFileError(file: IFileModel): IFileManagerAction {\n    return {\n      type: FileManagerActionsService.FILEMANAGER_CROP_FILE_ERROR,\n      payload: {\n        file: file\n      }\n    };\n  }\n\n  /**\n   * @Deprecated - Will be removed in 3.0.0, use new DeleteFileAction() instead of it\n   */\n  public deleteFile(file: IFileModel): IFileManagerAction {\n    return {\n      type: FileManagerActionsService.FILEMANAGER_DELETE_FILE,\n      payload: {\n        file: file\n      }\n    };\n  }\n\n  /**\n   * @Deprecated - Will be removed in 3.0.0, use new DeleteFileSuccessAction() instead of it\n   */\n  public deleteFileSuccess(file: IFileModel): IFileManagerAction {\n    return {\n      type: FileManagerActionsService.FILEMANAGER_DELETE_FILE_SUCCESS,\n      payload: {\n        file: file\n      }\n    };\n  }\n\n  /**\n   * @Deprecated - Will be removed in 3.0.0, use new DeleteSelectedFilesAction() instead of it\n   */\n  public deleteSelectedFiles(fileIds: string[]): IFileManagerAction {\n    return {\n      type: FileManagerActionsService.FILEMANAGER_DELETE_FILE_SELECTION,\n      payload: {fileIds}\n    };\n  }\n\n  /**\n   * @Deprecated - Will be removed in 3.0.0, use new DeleteSelectedFilesSuccessAction() instead of it\n   */\n  public deleteSelectedFilesSuccess(files: IOuterFile[]): IFileManagerAction {\n    return {\n      type: FileManagerActionsService.FILEMANAGER_DELETE_FILE_SELECTION_SUCCESS,\n      payload: {files}\n    };\n  }\n\n  /**\n   * @Deprecated - Will be removed in 3.0.0, use new LoadFilesAction() instead of it\n   */\n  public loadFiles(folderId: string): IFileManagerAction {\n    return {\n      type: FileManagerActionsService.FILEMANAGER_LOAD_FILES,\n      payload: {\n        folderId: folderId\n      }\n    };\n  }\n\n  /**\n   * @Deprecated - Will be removed in 3.0.0, use new InverseFilesSelectionAction() instead of it\n   */\n  public inverseFileSelection(): IFileManagerAction {\n    return {\n      type: FileManagerActionsService.FILEMANAGER_INVERSE_FILE_SELECTION,\n      payload: {}\n    };\n  }\n\n  /**\n   * @Deprecated - Will be removed in 3.0.0, use new LoadFilesSuccessAction() instead of it\n   */\n  public loadFilesSuccess(folderId: string, files: IOuterFile[]): IFileManagerAction {\n    return {\n      type: FileManagerActionsService.FILEMANAGER_LOAD_FILES_SUCCESS,\n      payload: {\n        folderId: folderId,\n        files: files\n      }\n    };\n  }\n\n  /**\n   * @Deprecated - Will be removed in 3.0.0, use new MoveFilesSuccessAction() instead of it\n   */\n  public moveFileSuccess(files: IOuterFile[], folderId: string) {\n    return {\n      type: FileManagerActionsService.FILEMANAGER_MOVE_FILES_SUCCESS,\n      payload: {folderId, files}\n    };\n  }\n\n  /**\n   * @Deprecated - Will be removed in 3.0.0, use new MoveFilesErrorAction() instead of it\n   */\n  public moveFileError(files: IOuterFile[]): IFileManagerAction {\n    return {\n      type: FileManagerActionsService.FILEMANAGER_MOVE_FILES_ERROR,\n      payload: {files}\n    };\n  }\n\n  /**\n   * @Deprecated - Will be removed in 3.0.0, use new SelectAllFilesAction() instead of it\n   */\n  public selectAllFiles(): IFileManagerAction {\n    return {\n      type: FileManagerActionsService.FILEMANAGER_SELECT_ALL,\n      payload: {}\n    };\n  }\n\n  /**\n   * @Deprecated - Will be removed in 3.0.0, use new SelectFileAction() instead of it\n   */\n  public selectFile(file: IFileModel): IFileManagerAction {\n    return {\n      type: FileManagerActionsService.FILEMANAGER_SELECT_FILE,\n      payload: {\n        file: file\n      }\n    };\n  }\n\n  /**\n   * @Deprecated - Will be removed in 3.0.0, use new UnSelectAllFilesAction() instead of it\n   */\n  public unSelectAll(): IFileManagerAction {\n    return {\n      type: FileManagerActionsService.FILEMANAGER_UNSELECT_ALL,\n      payload: {}\n    };\n  }\n\n  /**\n   * @Deprecated - Will be removed in 3.0.0, use new UnSelectFileAction() instead of it\n   */\n  public unSelectFile(file: IFileModel): IFileManagerAction {\n    return {\n      type: FileManagerActionsService.FILEMANAGER_UNSELECT_FILE,\n      payload: {\n        file: file\n      }\n    };\n  }\n\n  /**\n   * @Deprecated - Will be removed in 3.0.0, use new UploadFilesAction() instead of it\n   */\n  public upload(file: IOuterFile): IFileManagerAction {\n    return {\n      type: FileManagerActionsService.FILEMANAGER_UPLOAD_FILE,\n      payload: {\n        files: [file]\n      }\n    };\n  }\n\n  /**\n   * @Deprecated - Will be removed in 3.0.0, use new UploadFilesSuccessAction() instead of it\n   */\n  public uploadSuccess(file: IOuterFile): IFileManagerAction {\n    return {\n      type: FileManagerActionsService.FILEMANAGER_UPLOAD_FILE_SUCCESS,\n      payload: {\n        files: [file]\n      }\n    };\n  }\n\n  /**\n   * @Deprecated - Will be removed in 3.0.0, use new UploadFilesErrorAction() instead of it\n   */\n  public uploadError(file: IOuterFile): IFileManagerAction {\n    return {\n      type: FileManagerActionsService.FILEMANAGER_UPLOAD_FILE_ERROR,\n      payload: {\n        files: [file]\n      }\n    };\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {Store} from '@ngrx/store';\nimport {IFileManagerState} from './file-manager.reducer';\nimport {FileManagerActionsService} from './fileManagerActions.service';\nimport {IFileModel} from '../filesList/interface/IFileModel';\nimport {IOuterFile} from '../filesList/interface/IOuterFile';\nimport {ICropBounds} from '../crop/ICropBounds';\nimport {\n  ChooseFilesAction,\n  CropFileAction,\n  DeleteFileAction,\n  DeleteSelectedFilesAction,\n  InverseFilesSelectionAction,\n  LoadFilesAction,\n  SelectAllFilesAction,\n  SelectFileAction,\n  UnSelectAllFilesAction,\n  UnSelectFileAction, UploadFilesAction, UploadFilesErrorAction, UploadFilesSuccessAction\n} from './file-manager.action';\n\n/**\n * @Deprecated - Will be removed in 3.0.0\n */\n@Injectable()\nexport class FileManagerDispatcherService {\n\n  constructor(private store: Store<IFileManagerState>, private fileManagerActions: FileManagerActionsService) {\n  }\n\n  /**\n   * @Deprecated - Will be removed in 3.0.0, dispatch ChooseFilesAction instead of it\n   */\n  public chooseFiles(files: IOuterFile[]): void {\n    this.store.dispatch(new ChooseFilesAction({files}));\n  }\n\n  /**\n   * @Deprecated - Will be removed in 3.0.0, dispatch CropFileAction instead of it\n   */\n  public cropFile(file: IFileModel, bounds: ICropBounds): void {\n    this.store.dispatch(new CropFileAction({bounds, file}));\n  }\n\n  /**\n   * @Deprecated - Will be removed in 3.0.0, dispatch DeleteFileAction instead of it\n   */\n  public deleteFile(file: IFileModel): void {\n    this.store.dispatch(new DeleteFileAction({file}));\n  }\n\n  /**\n   * @Deprecated - Will be removed in 3.0.0, dispatch DeleteSelectedFilesAction instead of it\n   */\n  public deleteSelectedFiles(files: string[]): void {\n    this.store.dispatch(new DeleteSelectedFilesAction({files}));\n  }\n\n  /**\n   * @Deprecated - Will be removed in 3.0.0, dispatch InverseFilesSelectionAction instead of it\n   */\n  public inverseSelection(): void {\n    this.store.dispatch(new InverseFilesSelectionAction());\n  }\n\n  /**\n   * @Deprecated - Will be removed in 3.0.0, dispatch LoadFilesAction instead of it\n   */\n  public loadFiles(folderId: string | null): void {\n    this.store.dispatch(new LoadFilesAction({folderId}));\n  }\n\n  /**\n   * @Deprecated - Will be removed in 3.0.0, dispatch SelectAllFilesAction instead of it\n   */\n  public selectAllFiles(): void {\n    this.store.dispatch(new SelectAllFilesAction());\n  }\n\n  /**\n   * @Deprecated - Will be removed in 3.0.0, dispatch SelectFileAction instead of it\n   */\n  public selectFile(file: IFileModel): void {\n    this.store.dispatch(new SelectFileAction({file}));\n  }\n\n  /**\n   * @Deprecated - Will be removed in 3.0.0, dispatch UnSelectAllFilesAction instead of it\n   */\n  public unSelectAllFiles(): void {\n    this.store.dispatch(new UnSelectAllFilesAction());\n  }\n\n  /**\n   * @Deprecated - Will be removed in 3.0.0, dispatch UnSelectFileAction instead of it\n   */\n  public unSelectFile(file: IFileModel): void {\n    this.store.dispatch(new UnSelectFileAction({file}));\n  }\n\n  /**\n   * @Deprecated - Will be removed in 3.0.0, dispatch UploadFilesErrorAction instead of it\n   */\n  public uploadError(file: IOuterFile) {\n    this.store.dispatch(new UploadFilesErrorAction({files: [file]}));\n  }\n\n  /**\n   * @Deprecated - Will be removed in 3.0.0, dispatch UploadFilesAction instead of it\n   */\n  public upload(file: IOuterFile) {\n    this.store.dispatch(new UploadFilesAction({files: [file]}));\n  }\n\n  /**\n   * @Deprecated - Will be removed in 3.0.0, dispatch UploadFilesSuccessAction instead of it\n   */\n  public uploadSuccess(file: IOuterFile) {\n    this.store.dispatch(new UploadFilesSuccessAction({files: [file]}));\n  }\n}\n","import {IOuterNode} from '@rign/angular2-tree';\nimport {IFileDataProperties} from '../services/imageDataConverter.service';\n\nexport const FILEMANAGER_TREE_NAME = 'fileManagerTree';\n\nexport abstract class AbstractFileManagerApiService {\n\n  protected treeName = FILEMANAGER_TREE_NAME;\n  protected fileManagerName = 'fileManagerFiles';\n\n\n  protected nodes: IOuterNode[];\n  protected files: IFileDataProperties[];\n\n  protected currentNodeId = '';\n}\n","import {Injectable} from '@angular/core';\nimport {IOuterNode, INodeService} from '@rign/angular2-tree';\nimport {UUID} from 'angular2-uuid';\nimport {IFileManagerApi} from './IFileManagerApi';\nimport {IOuterFile} from '../filesList/interface/IOuterFile';\nimport {IFileDataProperties} from '../services/imageDataConverter.service';\nimport {ICropBounds} from '../crop/ICropBounds';\nimport {FilemanagerNotifcations} from '../services/FilemanagerNotifcations';\nimport {AbstractFileManagerApiService, FILEMANAGER_TREE_NAME} from './fileManagerApiAbstract.class';\nimport {empty, Observable, of, throwError} from 'rxjs';\n\n@Injectable()\nexport class FileManagerApiService extends AbstractFileManagerApiService implements IFileManagerApi, INodeService {\n\n  public constructor(private filemanagerNotfication: FilemanagerNotifcations) {\n    super();\n  }\n\n  public get treeId(): string {\n    return FILEMANAGER_TREE_NAME;\n  }\n\n  public load(nodeId = ''): Observable<IOuterNode[]> {\n    if (!this.nodes) {\n      this.nodes = this.getAllDataFromLocalStorage();\n    }\n\n    const nodes = this.getChildren(nodeId);\n\n    return of(nodes);\n  }\n\n  public add(node: IOuterNode, parentNodeId: string = null): Observable<IOuterNode> {\n    node.parentId = parentNodeId;\n    node.id = UUID.UUID();\n\n    this.nodes.push(node);\n\n    if (this.saveNodes()) {\n      return of(node);\n    } else {\n      return empty();\n    }\n\n  }\n\n  public move(srcNode: IOuterNode, targetNode: IOuterNode | null): Observable<IOuterNode> {\n    const srcId = srcNode.id;\n    const targetId = targetNode ? targetNode.id : '';\n\n    const index = this.findIndexByNodeId(srcId);\n\n    this.nodes[index].parentId = targetId;\n\n    if (this.saveNodes()) {\n      return of(this.nodes[index]);\n    } else {\n      return empty();\n    }\n\n  }\n\n  public update(node: IOuterNode): Observable<IOuterNode> {\n    const index = this.findIndexByNodeId(node.id);\n\n    this.nodes[index] = node;\n\n    if (this.saveNodes()) {\n      return of(node);\n    } else {\n      return empty();\n    }\n  }\n\n  public remove(nodeId: string): Observable<IOuterNode> {\n    const index = this.findIndexByNodeId(nodeId);\n    const node = this.nodes[index];\n\n    const hasChildren = this.getChildren(nodeId).length > 0;\n\n    if (!hasChildren) {\n      this.nodes.splice(index, 1);\n\n      this.saveNodes();\n\n      return of(node);\n    } else {\n      return throwError('Node is not empty');\n    }\n  }\n\n  public setAllNodes(nodes: IOuterNode[]): void {\n    this.nodes = [...nodes];\n\n    this.saveNodes();\n  }\n\n  /**\n   * Crop file\n   */\n  public cropFile(file: IOuterFile, bounds: ICropBounds): Observable<IOuterFile> {\n    return throwError('This functionality is not available with LocalStorage');\n  }\n\n  /**\n   * Load files from directory\n   */\n  public loadFiles(nodeId = ''): Observable<IOuterFile[]> {\n    this.currentNodeId = nodeId;\n\n    if (!this.files) {\n      this.files = this.getAllFileDataFromLocalStorage();\n    }\n\n    const files = this.getFilesFromFolder(nodeId);\n\n    const newFiles: IOuterFile[] = files.map((file: IFileDataProperties) => {\n      return this.convertLocalData2IOuterFile(file);\n    });\n\n    return of(newFiles);\n  }\n\n  public removeFile(file: IOuterFile): Observable<boolean> {\n    const index = this.findIndexByFileId(file.id.toString());\n\n    if (index === -1) {\n      return of(false);\n    }\n\n    this.files.splice(index, 1);\n    this.saveFiles();\n\n    return of(true);\n  }\n\n  public removeSelectedFiles(selectedFiles: string[]) {\n    const numberOfFiles = this.files.length;\n\n    selectedFiles.forEach((fileId: string) => {\n      const index = this.findIndexByFileId(fileId);\n\n      if (index > -1) {\n        this.files.splice(index, 1);\n      }\n    });\n\n    this.saveFiles();\n\n    return of((this.files.length + selectedFiles.length === numberOfFiles));\n  }\n\n  public uploadFile(file: IOuterFile): Observable<IOuterFile> {\n    const fileData = this.convertIOuterFile2LocalData(file);\n    this.files.push(fileData);\n\n    if (this.saveFiles()) {\n      return of(this.convertLocalData2IOuterFile(fileData));\n    } else {\n      return Observable.throw('Upload error');\n    }\n  }\n\n  public moveFile(files: IOuterFile[], node: IOuterNode = null): Observable<IOuterFile[]> {\n    const ids: string[] = files.map(file => file.id.toString());\n    const folderId = node ? node.id.toString() : '';\n\n    const movedFiles = this.files.filter(file => ids.indexOf(file.id.toString()) > -1);\n    const errorMsg = 'Can not move file to the same folder';\n\n    const isMovedToSameFolder = false;\n\n    movedFiles.forEach((file) => {\n      if (node) {\n        if (node.id === file.folderId) {\n        }\n      } else {\n        if (file.folderId === '' || file.folderId === null) {\n          return Observable.throw(errorMsg);\n        }\n      }\n\n\n      file.folderId = folderId;\n    });\n\n    if (isMovedToSameFolder) {\n        return Observable.throw(errorMsg);\n    }\n\n    if (this.saveFiles()) {\n      return of(movedFiles.map(file => this.convertLocalData2IOuterFile(file)));\n    } else {\n      return Observable.throw('Move files error');\n    }\n  }\n\n  private findIndexByNodeId(nodeId: string): number {\n    return this.nodes.findIndex((node) => {\n      return node.id === nodeId;\n    });\n  }\n\n  private findIndexByFileId(fileId: string): number {\n    return this.files.findIndex((file) => file.id === fileId);\n  }\n\n  private getChildren(nodeId: string): IOuterNode[] {\n    return this.nodes.filter((node: IOuterNode) => node.parentId === nodeId);\n  }\n\n  private getFilesFromFolder(nodeId: string): IFileDataProperties[] {\n    return this.files.filter((file: IFileDataProperties) => file.folderId === nodeId);\n  }\n\n  protected getAllDataFromLocalStorage(): IOuterNode[] {\n    try {\n      const data = localStorage.getItem(this.treeName);\n\n      if (data) {\n        return JSON.parse(data);\n      }\n\n      return [];\n\n    } catch (e) {\n      return [];\n    }\n  }\n\n  protected getAllFileDataFromLocalStorage(): IFileDataProperties[] {\n    try {\n      const data = localStorage.getItem(this.fileManagerName);\n\n      if (data) {\n        return JSON.parse(data);\n      }\n\n      return [];\n\n    } catch (e) {\n      return [];\n    }\n  }\n\n  private saveNodes() {\n    try {\n      localStorage.setItem(this.treeName, JSON.stringify(this.nodes));\n\n      return true;\n    } catch (e) {\n      this.filemanagerNotfication.sendNotification({\n        type: 'error',\n        title: 'State is not saved.',\n        message: 'Reload previous state.'\n      });\n\n      this.files = null;\n      this.nodes = null;\n\n      this.load();\n\n      return false;\n    }\n  }\n\n  private saveFiles(): boolean {\n    try {\n      localStorage.setItem(this.fileManagerName, JSON.stringify(this.files));\n\n      return true;\n    } catch (e) {\n      this.filemanagerNotfication.sendNotification({\n        type: 'error',\n        title: 'State is not saved.',\n        message: 'Reload previous state.'\n      });\n\n      const nodeId = this.files[(this.files.length - 1)].folderId || null;\n\n      this.files = null;\n\n      this.load(nodeId);\n\n      return false;\n    }\n  }\n\n  private convertLocalData2IOuterFile(file: IFileDataProperties): IOuterFile {\n    return {\n      id: file.id,\n      folderId: file.folderId,\n      name: file.name,\n      thumbnailUrl: file.data,\n      url: file.data,\n      width: file.width,\n      height: file.height,\n      type: file.type,\n      size: file.size\n    };\n  }\n\n  private convertIOuterFile2LocalData(file: IOuterFile): IFileDataProperties {\n    return {\n      id: file.id.toString(),\n      folderId: file.folderId,\n      name: file.name,\n      type: file.type,\n      data: file.data,\n      size: file.size,\n      width: file.width,\n      height: file.height\n    };\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {TreeActionTypes} from '@rign/angular2-tree';\nimport {Actions, Effect, ofType} from '@ngrx/effects';\nimport {IOuterNode, TreeMoveNodeAction} from '@rign/angular2-tree';\nimport {FileManagerActionsService, IFileManagerAction} from './fileManagerActions.service';\nimport {IOuterFile} from '../filesList/interface/IOuterFile';\nimport {empty, Observable, of} from 'rxjs';\nimport {IFileModel} from '../filesList/interface/IFileModel';\nimport {ICropBounds} from '../crop/ICropBounds';\nimport {FileManagerApiService} from './fileManagerApi.service';\nimport {FilemanagerNotifcations} from '../services/FilemanagerNotifcations';\nimport {catchError, filter, map, switchMap} from 'rxjs/operators';\nimport {\n  CropFileAction,\n  CropFileErrorAction,\n  CropFileSuccessAction,\n  DeleteFileSuccessAction, DeleteSelectedFilesSuccessAction, FileManagerAction, LoadFilesAction,\n  LoadFilesSuccessAction, MoveFilesErrorAction, MoveFilesSuccessAction, UploadFilesErrorAction, UploadFilesSuccessAction\n} from './file-manager.action';\n\n@Injectable()\nexport class FileManagerEffectsService {\n\n  @Effect()\n  public loadFiles$ = this.actions$\n    .pipe(\n      ofType(FileManagerActionsService.FILEMANAGER_LOAD_FILES),\n      switchMap((action: IFileManagerAction) => this.loadFiles(action.payload.folderId)\n        .pipe(\n          map((files: IOuterFile[]): FileManagerAction => {\n            return new LoadFilesSuccessAction({files});\n          }),\n          catchError((e) => {\n            return of(this.onLoadFilesError(action.payload.folderId));\n          })\n        )\n      )\n    );\n\n  @Effect()\n  public cropFile$ = this.actions$\n    .pipe(\n      ofType(FileManagerActionsService.FILEMANAGER_CROP_FILE),\n      switchMap((action: IFileManagerAction) => this.cropFile(action.payload.file, action.payload.bounds)\n        .pipe(\n          map((result: IOuterFile): FileManagerAction => {\n            this.filemanagerNotfication.sendNotification({\n              type: 'success',\n              title: 'Crop Image.',\n              message: 'Image has been cropped.'\n            });\n            return new CropFileSuccessAction({file: action.payload.file});\n          }),\n          catchError(() => of(new CropFileErrorAction({file: action.payload.file})))\n        )\n      )\n    );\n\n  @Effect()\n  public deleteFile$ = this.actions$\n    .pipe(\n      ofType(FileManagerActionsService.FILEMANAGER_DELETE_FILE),\n      switchMap((action: IFileManagerAction) => this.deleteFile(action.payload.file)\n        .pipe(\n          map((result: boolean): FileManagerAction => {\n            return new DeleteFileSuccessAction({file: action.payload.file});\n          }),\n          catchError(() => of(this.onDeleteFileError(action.payload.file)))\n        )\n      )\n    );\n\n  @Effect()\n  public deleteFilesSelection$ = this.actions$\n    .pipe(\n      ofType(FileManagerActionsService.FILEMANAGER_DELETE_FILE_SELECTION),\n      switchMap((action: IFileManagerAction) => this.deleteFilesSelection(action.payload.fileIds)\n        .pipe(\n          map((result: boolean): FileManagerAction => {\n            return new DeleteSelectedFilesSuccessAction({files: action.payload.fileIds});\n          }),\n          catchError(() => of(this.onDeleteFilesSelectionError(action.payload.files)))\n        )\n      )\n    );\n\n\n  @Effect()\n  public uploadFile$ = this.actions$\n    .pipe(\n      ofType(FileManagerActionsService.FILEMANAGER_UPLOAD_FILE),\n      switchMap((action: IFileManagerAction) => this.uploadFile(action.payload.files[0])\n        .pipe(\n          map((result: IOuterFile): FileManagerAction => {\n            return new UploadFilesSuccessAction({files: [result]});\n          }),\n          catchError(() => {\n            return empty();\n          })\n        )\n      )\n    );\n\n  @Effect()\n  public moveFile$ = this.actions$\n    .pipe(\n      ofType(TreeActionTypes.TREE_MOVE_NODE),\n      filter((action: TreeMoveNodeAction) => {\n        return action.payload.sourceOfDroppedData === 'FILE';\n      }),\n      switchMap((action: TreeMoveNodeAction) => this.moveFiles([<IOuterFile>action.payload.oldNode], action.payload.node)\n        .pipe(\n          map((result: IOuterFile[]): FileManagerAction => {\n            const folderId = (<IOuterFile>action.payload.oldNode).folderId;\n\n            return new MoveFilesSuccessAction({files: result, folderId});\n          }),\n          catchError(() => {\n            return of(new MoveFilesErrorAction({files: [<IOuterFile>action.payload.oldNode]}));\n          })\n        )\n      )\n    );\n\n  @Effect()\n  public filesMoveSuccess$ = this.actions$\n    .pipe(\n      ofType(FileManagerActionsService.FILEMANAGER_MOVE_FILES_SUCCESS),\n      map((action: MoveFilesSuccessAction) => {\n        this.onMoveFilesSuccess();\n\n        return new LoadFilesAction({folderId: action.payload.folderId});\n      })\n    );\n\n  public uploadError$ = this.actions$\n    .pipe(\n      ofType(FileManagerActionsService.FILEMANAGER_UPLOAD_FILE_ERROR),\n      map((action: UploadFilesErrorAction) => {\n        this.filemanagerNotfication.sendNotification({\n          type: 'alert',\n          title: 'File upload',\n          message: `${action.payload.files[0].name} exists on the server in this directory`\n        });\n      })\n    );\n\n  public cropFileSuccess$: Observable<CropFileSuccessAction>;\n  public deleteFileSuccess$: Observable<DeleteFileSuccessAction>;\n\n  constructor(private actions$: Actions,\n              private fileManagerActions: FileManagerActionsService,\n              private filemanagerNotfication: FilemanagerNotifcations,\n              private fileManagerApiService: FileManagerApiService) {\n\n    this.cropFileSuccess$ = this.actions$\n      .pipe(\n        ofType(FileManagerActionsService.FILEMANAGER_CROP_FILE_SUCCESS)\n      );\n\n    this.deleteFileSuccess$ = this.actions$\n      .pipe(\n        ofType(FileManagerActionsService.FILEMANAGER_DELETE_FILE_SUCCESS)\n      );\n\n    this.actions$\n      .pipe(\n        ofType(FileManagerActionsService.FILEMANAGER_CROP_FILE_ERROR)\n      )\n      .subscribe((action: IFileManagerAction) => {\n        this.onCropFileError(action.payload.file);\n      });\n\n    this.actions$\n      .pipe(\n        ofType(FileManagerActionsService.FILEMANAGER_MOVE_FILES_ERROR)\n      )\n      .subscribe((action: IFileManagerAction) => {\n        this.onMoveFilesError();\n      });\n  }\n\n  protected cropFile(file: IFileModel, bounds: ICropBounds): Observable<IOuterFile> {\n    return this.fileManagerApiService.cropFile(file.toJSON(), bounds);\n  }\n\n  protected deleteFile(file: IFileModel): Observable<boolean> {\n    return this.fileManagerApiService.removeFile(file.toJSON());\n  }\n\n  protected deleteFilesSelection(files: string[]): Observable<boolean> {\n    return this.fileManagerApiService.removeSelectedFiles(files);\n  }\n\n  protected loadFiles(folderId: string | null): Observable<IOuterFile[]> {\n    return this.fileManagerApiService.loadFiles(folderId);\n  }\n\n  protected uploadFile(file: IOuterFile): Observable<IOuterFile> {\n    return this.fileManagerApiService.uploadFile(file);\n  }\n\n  protected moveFiles(files: IOuterFile[], folder: IOuterNode = null): Observable<IOuterFile[]> {\n    return this.fileManagerApiService.moveFile(files, folder);\n  }\n\n  protected onCropFileError(file: IFileModel): void {\n    this.filemanagerNotfication.sendNotification({\n      type: 'alert',\n      title: 'Crop Image',\n      message: '[FILEMANAGER] Can not crop file'\n    });\n  }\n\n  protected onDeleteFileError(file: IFileModel): void {\n    this.filemanagerNotfication.sendNotification({\n      type: 'error',\n      title: 'Delete file',\n      message: '[FILEMANAGER] Can not delete file' + file.name\n    });\n  }\n\n  protected onDeleteFilesSelectionError(files: IOuterFile[]): void {\n    this.filemanagerNotfication.sendNotification({\n      type: 'error',\n      title: 'Delete selected files',\n      message: '[FILEMANAGER] Not all files were deleted'\n    });\n  }\n\n  protected onLoadFilesError(folderId: string): void {\n    this.filemanagerNotfication.sendNotification({\n      type: 'error',\n      title: 'Load files',\n      message: '[FILEMANAGER] Can not load files for folder ' + folderId\n    });\n  }\n\n  protected onMoveFilesSuccess(): void {\n    this.filemanagerNotfication.sendNotification({\n      type: 'success',\n      title: 'Move files',\n      message: 'File was successfully moved to folder'\n    });\n  }\n\n  protected onMoveFilesError(): void {\n    this.filemanagerNotfication.sendNotification({\n      type: 'error',\n      title: 'Move files',\n      message: 'File was not successfully moved to new folder'\n    });\n  }\n}\n","import {Component, Input, Output, EventEmitter, ChangeDetectionStrategy, ViewEncapsulation} from '@angular/core';\nimport {FileModel} from './file.model';\nimport {IFileEvent} from './interface/IFileEvent';\nimport {IFileModel} from './interface/IFileModel';\nimport {FileManagerConfiguration} from '../configuration/fileManagerConfiguration.service';\nimport {IFileManagerAction} from '../store/fileManagerActions.service';\nimport {FileManagerDispatcherService} from '../store/file-manager-dispatcher.service';\nimport {NotificationsService} from 'angular2-notifications';\nimport {FileManagerEffectsService} from '../store/fileManagerEffects.service';\nimport {FILEMANAGER_TREE_NAME} from '../store/fileManagerApiAbstract.class';\nimport {Store} from '@ngrx/store';\nimport {IFileManagerState} from '../store/file-manager.reducer';\nimport {DeleteFileAction, SelectFileAction, UnSelectFileAction} from '../store/file-manager.action';\n\n@Component({\n  selector: 'ri-files-list',\n  templateUrl: './files.html',\n  styleUrls: ['./files-list.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\n\nexport class FilesListComponent {\n  @Input()\n  public files: FileModel[];\n\n  @Input()\n  public selectedFiles: string[];\n\n  @Output()\n  public onPreviewFile = new EventEmitter();\n\n  @Output()\n  public onCropFile = new EventEmitter();\n\n  @Output()\n  public onSelectFile = new EventEmitter();\n\n  public removeTitle = 'Remove file';\n\n  public dragZone = FILEMANAGER_TREE_NAME;\n\n  public constructor(public configuration: FileManagerConfiguration,\n                     private store: Store<IFileManagerState>,\n                     private fileManagerDispatcher: FileManagerDispatcherService,\n                     notifications: NotificationsService,\n                     fileManagerEffects: FileManagerEffectsService) {\n\n    fileManagerEffects.deleteFileSuccess$\n      .subscribe((action: IFileManagerAction) => {\n        notifications.success('File delete', `${action.payload.file.name} has been deleted`);\n      });\n  }\n\n  /**\n   * Fired when clicked on button \"delete file\"\n   *\n   * @param file\n   */\n  public deleteFile(file: IFileModel) {\n    this.store.dispatch(new DeleteFileAction({file}));\n  }\n\n  public getRemoveMessage(file: IFileModel) {\n    return 'You are try to delete <b>' + file.name + '</b>. Are you sure?';\n  }\n\n  public openPreview(fileEvent: IFileEvent): void {\n    this.onPreviewFile.emit(fileEvent);\n  }\n\n  public openCrop(fileEvent: IFileEvent): void {\n    this.onCropFile.emit(fileEvent);\n  }\n\n  public toggleSelection(file: IFileModel): void {\n    if (file.selected) {\n      this.store.dispatch(new UnSelectFileAction({file}));\n    } else {\n      this.store.dispatch(new SelectFileAction({file}));\n    }\n  }\n\n  public isSelected(file: FileModel): boolean {\n    return this.selectedFiles.indexOf(file.getId().toString()) > -1;\n  }\n}\n","import {Component, Input, OnChanges, HostListener} from '@angular/core';\nimport {IFileModel} from '../filesList/interface/IFileModel';\nimport {FileModel} from '../filesList/file.model';\n\n@Component({\n  selector: 'ri-file-preview',\n  templateUrl: './preview.html'\n})\n\nexport class PreviewComponent implements OnChanges {\n  /**\n   * Collection of files\n   */\n  @Input() files: IFileModel[];\n\n  /**\n   * Current viewed file\n   */\n  @Input() file: IFileModel;\n\n  /**\n   * Current index\n   */\n  public currentIndex = 0;\n\n  public length = 0;\n\n  ngOnChanges() {\n    this.length = this.files.length;\n\n    const selectedFiles = this.files\n      .filter((file: FileModel) => file.getId() === this.file.getId());\n\n    this.currentIndex = selectedFiles.length === 1 ? this.files.indexOf(selectedFiles[0]) : -1;\n  }\n\n  public next() {\n    if (this.currentIndex < this.length - 1) {\n      this.currentIndex++;\n    }\n  }\n\n  public prev() {\n    if (this.currentIndex > 0) {\n      this.currentIndex--;\n    }\n  }\n\n  @HostListener('window:keydown', ['$event'])\n  public keyEvent(event: KeyboardEvent) {\n    if (event.keyCode === 37 || event.keyCode === 74) {\n      this.prev();\n    }\n\n    if (event.keyCode === 39 || event.keyCode === 75) {\n      this.next();\n    }\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {BehaviorSubject} from 'rxjs';\n\n@Injectable()\nexport class SearchFilterService {\n  /**\n   * File type filter\n   */\n  public filter$: BehaviorSubject<string> = new BehaviorSubject('');\n\n  public getValue(): string {\n    return this.filter$.getValue();\n  }\n\n  public setValue(value: string) {\n    this.filter$.next(value);\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {BehaviorSubject} from 'rxjs';\nimport {IFileTypeFilter} from '../toolbar/interface/IFileTypeFilter';\n\n@Injectable()\nexport class FileTypeFilterService {\n\n  /**\n   * File type filter\n   */\n  public filter$: BehaviorSubject<IFileTypeFilter | null> = new BehaviorSubject(null);\n\n  public getValue(): IFileTypeFilter | null {\n    return this.filter$.getValue();\n  }\n\n  public setValue(value: IFileTypeFilter | null) {\n    this.filter$.next(value);\n  }\n}\n","import {IOuterFile} from './interface/IOuterFile';\nimport {IFileModel} from './interface/IFileModel';\nimport {ISelectFile} from './interface/ISelectFile';\n\nexport class FileModel implements IFileModel {\n  static smallIconsFolder = '/icons/128px/';\n  static bigIconsFolder = '/icons/512px/';\n\n  private _orgData: IOuterFile;\n  private _name: string;\n\n  private _iconsFolder = FileModel.smallIconsFolder;\n\n  public selected = false;\n\n  set name(name: string) {\n    this._name = name;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get thumbnailUrl() {\n    return this.isImage() ? this._orgData.thumbnailUrl : `${FileModel.smallIconsFolder}${this.getFileExt()}.png`;\n  }\n\n  get url() {\n    return this.isImage() ? this._orgData.url : `${FileModel.bigIconsFolder}${this.getFileExt()}.png`;\n  }\n\n  public constructor(data: IOuterFile) {\n    this.fromJSON(data);\n  }\n\n  public fromJSON(data: IOuterFile) {\n    this._orgData = data;\n\n    this.name = data.name;\n    this.selected = data.selected || false;\n  }\n\n  public toJSON() {\n    return this._orgData;\n  }\n\n  public getId() {\n    return this._orgData.id;\n  }\n\n  public getHeight(): number {\n    return this._orgData.height || 0;\n  }\n\n  public getFileExt() {\n    return this.name.split('.').pop();\n  }\n\n  public getMime() {\n    return this._orgData.type;\n  }\n\n  public getWidth(): number {\n    return this._orgData.width || 0;\n  }\n\n  public isImage() {\n    return ['image/jpg', 'image/jpeg', 'image/png', 'image/gif', 'image/png'].indexOf(this.getMime()) > -1;\n  }\n\n  public getSelectData(): ISelectFile {\n    return {\n      id: this.getId(),\n      name: this.name,\n      url: this.url,\n      width: this.getWidth(),\n      height: this.getHeight(),\n      mime: this.getMime()\n    };\n  }\n}\n","import {IOuterFile} from '../filesList/interface/IOuterFile';\nimport {createFeatureSelector, MemoizedSelector} from '@ngrx/store';\nimport {\n  CropFileSuccessAction, DeleteFileSuccessAction,\n  FileManagerAction,\n  FileManagerActionTypes,\n  LoadFilesSuccessAction,\n  MoveFilesSuccessAction, SelectFileAction, UnSelectFileAction, UploadFilesSuccessAction\n} from './file-manager.action';\n\nexport interface StoreEntities {\n  [key: string]: IOuterFile;\n}\n\nexport interface IFileManagerState {\n  entities: StoreEntities;\n  files: string[];\n  selectedFiles: string[];\n}\n\n\nfunction cropFile(state: IFileManagerState, action: CropFileSuccessAction): IFileManagerState {\n  const file = action.payload.file;\n  const id = file.getId().toString();\n\n  state.entities[id] = <IOuterFile>{...file.toJSON()};\n\n  return {\n    entities: state.entities,\n    files: state.files,\n    selectedFiles: state.selectedFiles\n  };\n}\n\nfunction inverseFilesSelection(state: IFileManagerState): IFileManagerState {\n  return {\n    entities: state.entities,\n    files: state.files,\n    selectedFiles: state.files.filter((i: string) => state.selectedFiles.indexOf(i) === -1)\n  };\n}\n\nfunction loadFiles(state: IFileManagerState, action: LoadFilesSuccessAction): IFileManagerState {\n  const entities: StoreEntities = {};\n  const files: string[] = [];\n\n  action.payload.files.map((file: IOuterFile) => {\n    const id = file.id.toString();\n\n    entities[id] = file;\n    files.push(id);\n  });\n\n\n  return {\n    entities: entities,\n    files: files,\n    selectedFiles: []\n  };\n}\n\n\nfunction moveFiles(state: IFileManagerState, action: MoveFilesSuccessAction): IFileManagerState {\n  const files = action.payload.files;\n  const ids: string[] = files.map(file => file.id.toString());\n  const folderId = action.payload.folderId ? action.payload.folderId.toString() : '';\n\n  const entities = {...state.entities};\n\n  ids.forEach((id: string) => {\n    const oldEntity = {...entities[id]};\n    oldEntity.folderId = folderId;\n\n    entities[id] = oldEntity;\n  });\n\n  return {\n    entities: entities,\n    files: state.files.filter((i: string) => ids.indexOf(i) === -1),\n    selectedFiles: state.selectedFiles.filter((i: string) => ids.indexOf(i) === -1)\n  };\n}\n\nfunction removeFile(state: IFileManagerState, action: DeleteFileSuccessAction): IFileManagerState {\n  const id = action.payload.file.getId();\n\n  delete state.entities[id];\n\n  return {\n    entities: state.entities,\n    files: state.files.filter((i: string) => i !== id),\n    selectedFiles: state.selectedFiles\n  };\n}\n\nfunction removeSelectedFiles(state: IFileManagerState): IFileManagerState {\n  const files: string[] = state.files.filter((i: string) => state.selectedFiles.indexOf(i) === -1);\n  const entities: StoreEntities = {};\n\n  files.forEach((fileId: string) => {\n    entities[fileId] = state.entities[fileId];\n  });\n\n  return {\n    entities: entities,\n    files: files,\n    selectedFiles: []\n  };\n}\n\nfunction selectFile(state: IFileManagerState, action: SelectFileAction): IFileManagerState {\n  return {\n    entities: state.entities,\n    files: state.files,\n    selectedFiles: [...state.selectedFiles, action.payload.file.getId().toString()]\n  };\n}\n\nfunction selectAllFiles(state: IFileManagerState): IFileManagerState {\n  return {\n    entities: state.entities,\n    files: state.files,\n    selectedFiles: [...state.files]\n  };\n}\n\nfunction uploadFiles(state: IFileManagerState, action: UploadFilesSuccessAction): IFileManagerState {\n  const newState = {\n    entities: {...state.entities},\n    files: [...state.files],\n    selectedFiles: []\n  };\n\n  action.payload.files.forEach((file: IOuterFile) => {\n    const id = file.id.toString();\n\n    newState.entities[id] = file;\n    newState.files.push(id);\n  });\n\n\n  return newState;\n}\n\n\nfunction unSelectAllFiles(state: IFileManagerState): IFileManagerState {\n  return {\n    entities: state.entities,\n    files: state.files,\n    selectedFiles: []\n  };\n}\n\nfunction unSelectFile(state: IFileManagerState, action: UnSelectFileAction): IFileManagerState {\n  const fileId = action.payload.file.getId().toString();\n\n  return {\n    entities: state.entities,\n    files: state.files,\n    selectedFiles: state.selectedFiles.filter((id: string) => id !== fileId)\n  };\n}\n\nexport function fileManagerReducer(state: IFileManagerState = {\n  entities: {},\n  files: [],\n  selectedFiles: []\n}, action: FileManagerAction): IFileManagerState {\n  switch (action.type) {\n    case FileManagerActionTypes.CROP_FILE_SUCCESS:\n      return cropFile(state, action);\n    case FileManagerActionTypes.INVERSE_FILE_SELECTION:\n      return inverseFilesSelection(state);\n    case FileManagerActionTypes.DELETE_FILE_SELECTION_SUCCESS:\n      return removeSelectedFiles(state);\n    case FileManagerActionTypes.DELETE_FILE_SUCCESS:\n      return removeFile(state, action);\n    case FileManagerActionTypes.MOVE_FILES_SUCCESS:\n      return moveFiles(state, action);\n    case FileManagerActionTypes.LOAD_FILES_SUCCESS:\n      return loadFiles(state, action);\n    case FileManagerActionTypes.SELECT_ALL:\n      return selectAllFiles(state);\n    case FileManagerActionTypes.SELECT_FILE:\n      return selectFile(state, action);\n    case FileManagerActionTypes.UNSELECT_ALL:\n      return unSelectAllFiles(state);\n    case FileManagerActionTypes.UNSELECT_FILE:\n      return unSelectFile(state, action);\n    case FileManagerActionTypes.UPLOAD_FILE_SUCCESS:\n      return uploadFiles(state, action);\n    case FileManagerActionTypes.DELETE_FILE_SELECTION:\n    case FileManagerActionTypes.CROP_FILE:\n    case FileManagerActionTypes.DELETE_FILE:\n    case FileManagerActionTypes.LOAD_FILES:\n    case FileManagerActionTypes.MOVE_FILES_ERROR:\n      return state;\n    default:\n      return state;\n  }\n}\n\nexport const filemanagerStateSelector: MemoizedSelector<object, IFileManagerState> = createFeatureSelector<IFileManagerState>('files');\n\nexport const getAll = (state: IFileManagerState): IOuterFile[] => {\n  return state.files.map((id: string) => state.entities[id]);\n};\n\nexport const isChangeStateFiles = (newState: IFileManagerState, prevState: IFileManagerState): boolean => {\n  return prevState.files.length !== newState.files.length || prevState.files.filter((i: string) => newState.files.indexOf(i) === -1).length > 0;\n};\n\nexport const isChangeStateSelectedFiles = (newState: IFileManagerState, prevState: IFileManagerState): boolean => {\n  return prevState.selectedFiles.length !== newState.selectedFiles.length || prevState.selectedFiles.filter((i: string) => newState.selectedFiles.indexOf(i) === -1).length > 0;\n};\n","import {ITreeState} from '@rign/angular2-tree';\nimport {SearchFilterService} from './searchFilter.service';\nimport {FileTypeFilterService} from './fileTypeFilter.service';\nimport {Store} from '@ngrx/store';\nimport {FileModel} from '../filesList/file.model';\nimport {filemanagerStateSelector, getAll, IFileManagerState, StoreEntities} from '../store/file-manager.reducer';\nimport {IOuterFile} from '../filesList/interface/IOuterFile';\nimport {IFileTypeFilter} from '../toolbar/interface/IFileTypeFilter';\nimport {Injectable} from '@angular/core';\nimport {distinctUntilChanged, map, withLatestFrom} from 'rxjs/operators';\nimport {combineLatest, Observable} from 'rxjs';\n\n@Injectable()\nexport class CurrentDirectoryFilesService {\n\n  /**\n   * List of all files\n   */\n  public files$: Observable<FileModel[]>;\n\n  /**\n   * List of files for current selected directory\n   */\n  public filteredFiles$: Observable<FileModel[]>;\n\n  /**\n   * List of all files as JSON data\n   */\n  public entities$: Observable<StoreEntities>;\n\n  /**\n   * List of selected file ids\n   */\n  public selectedFiles$: Observable<string[]>;\n\n  /**\n   * List of all files in current directory\n   */\n  public currentDirectoryFileIds$: Observable<string[]>;\n\n  public constructor(private store: Store<IFileManagerState>,\n                     private fileTypeFilter: FileTypeFilterService,\n                     private searchFilterService: SearchFilterService) {\n\n    const store$ = this.store.select(filemanagerStateSelector);\n    const observable$ = store$;\n    this.entities$ = observable$\n      .pipe(\n        map((state: IFileManagerState) => state.entities),\n        distinctUntilChanged()\n      );\n\n    this.currentDirectoryFileIds$ = observable$\n      .pipe(\n        map((state: IFileManagerState) => state.files),\n        distinctUntilChanged()\n      );\n\n    this.selectedFiles$ = store$\n      .pipe(\n        map((state: IFileManagerState) => state.selectedFiles)\n      );\n\n    this.files$ = this.getFilesStream();\n    this.filteredFiles$ = this.getCurrentDirectoryFilesStream();\n  }\n\n  /**\n   * Return stream of files\n   */\n  private getFilesStream(): Observable<FileModel[]> {\n    return this.currentDirectoryFileIds$\n      .pipe(\n        withLatestFrom(this.entities$),\n        map((ar: any) => {\n          return {\n            entities: ar[1],\n            files: ar[0]\n          };\n        }),\n        map((state: any) => {\n          return getAll(state)\n            .map((file: IOuterFile) => {\n              return new FileModel(file);\n            });\n        })\n      );\n  }\n\n  /**\n   * Return stream of current directory filtered files\n   */\n  private getCurrentDirectoryFilesStream(): Observable<FileModel[]> {\n    return combineLatest(\n      this.files$,\n      this.fileTypeFilter.filter$,\n      this.searchFilterService.filter$\n    )\n      .pipe(\n        map((data: [FileModel[], IFileTypeFilter, string]): FileModel[] => {\n          let files = data[0];\n          const fileTypeFilter = data[1];\n          const search = data[2].toLocaleLowerCase();\n\n          if (search !== '') {\n            files = files.filter((file: FileModel) => {\n              return file.name.toLocaleLowerCase().indexOf(search) > -1;\n            });\n          }\n\n\n          if (fileTypeFilter && fileTypeFilter.mimes.length > 0) {\n            files = files.filter((file: FileModel) => {\n              return fileTypeFilter.mimes.indexOf(file.getMime()) > -1;\n            });\n          }\n\n          return files;\n        })\n      );\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {INodeService, IOuterNode} from '@rign/angular2-tree';\nimport {Observable, of} from 'rxjs';\nimport {FileManagerConfiguration} from '../configuration/fileManagerConfiguration.service';\nimport {AbstractFileManagerApiService, FILEMANAGER_TREE_NAME} from './fileManagerApiAbstract.class';\nimport {HttpClient, HttpParams} from '@angular/common/http';\nimport {IFileManagerApi} from './IFileManagerApi';\nimport {map} from 'rxjs/operators';\nimport {IOuterFile} from '../filesList/interface/IOuterFile';\nimport {ICropBounds} from '../crop/ICropBounds';\nimport {IFileDataProperties} from '../services/imageDataConverter.service';\n\n@Injectable()\nexport class FileManagerBackendApiService extends AbstractFileManagerApiService implements IFileManagerApi, INodeService {\n\n  public constructor(private $http: HttpClient,\n                     private configuration: FileManagerConfiguration) {\n    super();\n    this.nodes = [];\n    this.files = [];\n  }\n\n  public get treeId(): string {\n    return FILEMANAGER_TREE_NAME;\n  }\n\n  /**\n   * Load folder chidls for given folder id\n   */\n  public load(nodeId = ''): Observable<IOuterNode[]> {\n    const nodeIds = this.nodes.map((node: IOuterNode) => node.id);\n\n    const params = new HttpParams().set('nodeId', nodeId || '');\n\n    return this.$http.get<IOuterNode[]>(this.configuration.folderUrls.foldersUrl, {params})\n      .pipe(\n        map((nodes: IOuterNode[]) => {\n          nodes.forEach((node: IOuterNode) => {\n            if (nodeIds.indexOf(node.id) === -1) {\n              this.nodes.push(node);\n            } else {\n              const index = this.nodes.findIndex((item: IOuterNode) => node.id === item.id);\n              this.nodes[index] = node;\n            }\n          });\n\n          return nodes;\n        })\n      );\n  }\n\n  /**\n   * Create new folder\n   */\n  public add(node: IOuterNode, parentNodeId: string = null): Observable<IOuterNode> {\n    const data = {\n      node: node,\n      parentNodeId: parentNodeId\n    };\n\n    return this.$http.post<IOuterNode>(this.configuration.folderUrls.foldersUrl, data)\n      .pipe(\n        map((newNode: IOuterNode) => {\n          this.nodes.push(newNode);\n\n          return newNode;\n        })\n      );\n  }\n\n  /**\n   * Move folder from source parent to target parent\n   */\n  public move(srcNode: IOuterNode, targetNode: IOuterNode | null): Observable<IOuterNode> {\n    const srcId = srcNode.id;\n    const targetId = targetNode ? targetNode.id : null;\n\n\n    return this.$http.put<IOuterNode>(this.configuration.folderUrls.folderMoveUrl, {source: srcId, target: targetId})\n      .pipe(\n        map((movedNode: IOuterNode) => {\n          const index = this.findIndexByNodeId(srcId);\n          this.nodes[index].parentId = targetId;\n\n          return movedNode;\n        })\n      );\n  }\n\n  /**\n   * Update folder name\n   */\n  public update(node: IOuterNode): Observable<IOuterNode> {\n    return this.$http.put<IOuterNode>(this.configuration.folderUrls.foldersUrl, node)\n      .pipe(\n        map((newNode: IOuterNode) => {\n          const index = this.findIndexByNodeId(node.id);\n\n          this.nodes[index] = newNode;\n\n          return newNode;\n        })\n      );\n  }\n\n  /**\n   * Remove node by given id\n   */\n  public remove(nodeId: string): Observable<IOuterNode> {\n    const index = this.findIndexByNodeId(nodeId);\n\n    const hasChildren = this.getChildren(nodeId).length > 0;\n\n    if (!hasChildren) {\n      const params = new HttpParams().set('nodeId', nodeId);\n\n      return this.$http.delete<IOuterNode>(this.configuration.folderUrls.foldersUrl, {params})\n        .pipe(\n          map((removedNode: IOuterNode) => {\n            this.nodes.splice(index, 1);\n\n            return removedNode;\n          })\n        );\n    } else {\n      return Observable.throw('Node is not empty');\n    }\n  }\n\n  public setAllNodes(nodes: IOuterNode[]): void {\n    this.nodes = [...nodes];\n  }\n\n  /**\n   * Crop file\n   */\n  public cropFile(file: IOuterFile, bounds: ICropBounds): Observable<IOuterFile> {\n    return this.$http.put<IOuterFile>(this.configuration.fileUrl, {id: file.id, bounds: bounds});\n  }\n\n  /**\n   * Load files from directory\n   */\n  public loadFiles(nodeId = ''): Observable<IOuterFile[]> {\n    this.currentNodeId = nodeId;\n    const params = new HttpParams().set('dirId', nodeId);\n\n    return this.$http.get<IOuterFile[]>(this.configuration.fileUrl, {params})\n      .pipe(\n        map((files: IOuterFile[]) => {\n          this.files = files.map((file: IOuterFile) => <IFileDataProperties>file);\n\n          return files;\n        })\n      );\n  }\n\n  /**\n   * Remove file from folder\n   */\n  public removeFile(file: IOuterFile): Observable<boolean> {\n    const index = this.findIndexByFileId(file.id.toString());\n\n    if (index === -1) {\n      return of(false);\n    }\n\n    const params = new HttpParams().set('id', file.id.toString());\n\n    return this.$http.delete<any>(this.configuration.fileUrl, {params})\n      .pipe(\n        map(() => {\n          this.files.splice(index, 1);\n\n          return true;\n        })\n      );\n  }\n\n  public removeSelectedFiles(selectedFiles: string[]) {\n    const params = new HttpParams().set('id', selectedFiles.join('|'));\n\n    return this.$http.delete<any>(this.configuration.fileUrl, {params})\n      .pipe(\n        map(() => {\n          selectedFiles.forEach((fileId: string) => {\n            const index = this.findIndexByFileId(fileId);\n\n            if (index > -1) {\n              this.files.splice(index, 1);\n            }\n          });\n\n          return true;\n        })\n      );\n  }\n\n  /**\n   * This method is success method, real upload is done in ExtendedFileUploader\n   */\n  public uploadFile(file: IOuterFile): Observable<IOuterFile> {\n    const fileData = <IFileDataProperties>file;\n    this.files.push(fileData);\n\n    return of(file);\n  }\n\n  public moveFile(files: IOuterFile[], node: IOuterNode): Observable<IOuterFile[]> {\n    const ids: string[] = files.map(file => file.id.toString());\n\n    return this.$http.put<IOuterFile[]>(this.configuration.fileUrl, {files: ids, folderId: node ? node.id : ''});\n  }\n\n  private findIndexByNodeId(nodeId: string): number {\n    return this.nodes.findIndex((node) => {\n      return node.id === nodeId;\n    });\n  }\n\n  private findIndexByFileId(fileId: string): number {\n    return this.files.findIndex((file) => file.id === fileId);\n  }\n\n  private getChildren(nodeId: string): IOuterNode[] {\n    return this.nodes.filter((node: IOuterNode) => node.parentId === nodeId);\n  }\n\n  private convertLocalData2IOuterFile(file: IFileDataProperties): IOuterFile {\n    return {\n      id: file.id,\n      folderId: file.folderId,\n      name: file.name,\n      thumbnailUrl: file.data,\n      url: file.data,\n      width: file.width,\n      height: file.height,\n      type: file.type,\n      size: file.size\n    };\n  }\n\n  private convertIOuterFile2LocalData(file: IOuterFile): IFileDataProperties {\n    return {\n      id: file.id.toString(),\n      folderId: file.folderId,\n      name: file.name,\n      type: file.type,\n      data: file.data,\n      size: file.size,\n      width: file.width,\n      height: file.height\n    };\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core';\nimport {IFileTypeFilter} from '../interface/IFileTypeFilter';\nimport {FileTypeFilterService} from '../../services/fileTypeFilter.service';\n\n@Component({\n  selector: 'ri-file-type-filter',\n  templateUrl: './fileTypeFilter.component.html'\n})\n\nexport class FileTypeFilterComponent implements OnInit {\n  @Input() typeFilterList: IFileTypeFilter[] = [];\n\n  public selectedType: IFileTypeFilter = null;\n\n  constructor(private fileTypeFilter: FileTypeFilterService) {\n    this.fileTypeFilter.filter$\n      .subscribe((type: IFileTypeFilter | null) => {\n        this.selectedType = type;\n      })\n  }\n\n  ngOnInit() {\n    /** init file type filter **/\n    this.typeFilterList\n      .filter((type: IFileTypeFilter) => {\n        return type.defaultSelected;\n      })\n      .forEach((type: IFileTypeFilter) => {\n        this.fileTypeFilter.setValue(type);\n      });\n  }\n\n  /**\n   * Set current filter and fire event\n   * @param type\n   */\n  public setFilterType(type: IFileTypeFilter) {\n    this.fileTypeFilter.setValue(type);\n  }\n}\n","export class IUploadItemEvent {\n  name: string;\n  response: any;\n  status: number;\n}\n","export enum Button {\n  ADD_FOLDER = 'ADD_FOLDER',\n  CHOOSE_SELECTION = 'CHOOSE_SELECTION',\n  DELETE_SELECTION = 'DELETE_SELECTION',\n  INVERSE_SELECTION = 'INVERSE_SELECTION',\n  REFRESH_FILES_LIST = 'REFRESH_FILES_LIST',\n  SELECT_ALL = 'SELECT_ALL',\n  UNSELECT_ALL = 'UNSELECT_ALL',\n}\n","import {IToolbarEvent} from '../interface/IToolbarEvent';\n\nexport class ToolbarEventModel implements IToolbarEvent {\n  constructor(public name: string, public value: string = null) {\n  }\n}\n","import {Component, OnInit} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {SearchFilterService} from '../../services/searchFilter.service';\nimport {debounceTime} from 'rxjs/operators';\n\n@Component({\n  selector: 'ri-search-file',\n  templateUrl: './searchFile.component.html'\n})\n\nexport class SearchFileComponent implements OnInit {\n\n  public searchField = new FormControl();\n\n  constructor(private searchFilterService: SearchFilterService) {\n  }\n\n  ngOnInit() {\n    this.searchField.valueChanges\n      .pipe(\n        debounceTime(250)\n      )\n      .subscribe((value: string) => this.searchFilterService.setValue(value));\n  }\n}\n","import {IButton, IButtonData} from './IButton';\n\nexport abstract class AbstractButtonClass implements IButton {\n  public symbol: string;\n  public name: string;\n  public label: boolean;\n  public icon: boolean;\n  public iconCssClass: string;\n  public disabled?: boolean;\n\n  public constructor(data: IButtonData) {\n    this.symbol = data.symbol;\n    this.name = data.name;\n    this.label = data.label;\n    this.icon = data.icon;\n    this.iconCssClass = data.iconCssClass;\n    this.disabled = data.disabled;\n  }\n\n  abstract isDivider(): boolean;\n}\n","import {AbstractButtonClass} from './AbstractButton.class';\n\nexport class ButtonClass extends AbstractButtonClass {\n  public isDivider(): boolean {\n    return false;\n  }\n}\n","import {AbstractButtonClass} from './AbstractButton.class';\n\nexport class ButtonDividerClass extends AbstractButtonClass {\n  public constructor() {\n    super({\n      symbol: '',\n      name: '',\n      label: false,\n      icon: false,\n      iconCssClass: ''\n    });\n  }\n\n  public isDivider(): boolean {\n    return true;\n  }\n}\n","import {Component, EventEmitter, OnDestroy, Output} from '@angular/core';\nimport {IButton, IButtonData} from '../../dropdown/IButton';\nimport {ButtonClass} from '../../dropdown/Button.class';\nimport {Button} from '../models/button.model';\nimport {ButtonDividerClass} from '../../dropdown/ButtonDivider.class';\nimport {CurrentDirectoryFilesService} from '../../services/currentDirectoryFiles.service';\nimport {combineLatest, Subscription} from 'rxjs';\nimport {FileManagerConfiguration} from '../../configuration/fileManagerConfiguration.service';\nimport {IToolbarEvent} from '../interface/IToolbarEvent';\nimport {ToolbarEventModel} from '../models/toolbarEvent.model';\nimport {distinctUntilChanged} from 'rxjs/operators';\n\n@Component({\n  selector: 'ri-selection-dropdown',\n  templateUrl: './selection.dropdown.html'\n})\nexport class SelectionComponent implements OnDestroy {\n  @Output()\n  public onMenuButtonClick = new EventEmitter();\n\n  public selectButtonsList: IButton[];\n\n  public selectAllButton = new ButtonClass({\n    symbol: Button.SELECT_ALL,\n    name: 'RI_FM_LBL_SELECT_ALL',\n    label: true,\n    icon: true,\n    iconCssClass: 'fa fa-check-square-o'\n  });\n\n  private unselectAllButton = new ButtonClass({\n    symbol: Button.UNSELECT_ALL,\n    name: 'RI_FM_LBL_UNSELECT_ALL',\n    label: true,\n    icon: true,\n    iconCssClass: 'fa fa-square-o'\n  });\n\n  private inverseSelectionButton = new ButtonClass({\n    symbol: Button.INVERSE_SELECTION,\n    name: 'RI_FM_LBL_INVERSE_SELECTION',\n    label: true,\n    icon: true,\n    iconCssClass: 'fa fa-check-square'\n  });\n\n  private deleteSelectionButton = new ButtonClass({\n    symbol: Button.DELETE_SELECTION,\n    name: 'RI_FM_LBL_DELETE_SELECTION',\n    label: true,\n    icon: true,\n    iconCssClass: 'fa fa-trash'\n  });\n\n  private chooseSelectionButton = new ButtonClass({\n    symbol: Button.CHOOSE_SELECTION,\n    name: 'RI_FM_LBL_CHOOSE_SELECTION',\n    label: true,\n    icon: true,\n    iconCssClass: 'fa fa-image'\n  });\n\n  private onLoadFilesSubscriber: Subscription;\n\n  public constructor(public configuration: FileManagerConfiguration,\n                     private currentDirectoryFilesService: CurrentDirectoryFilesService) {\n\n    this.selectButtonsList = this.createBasicButtons();\n\n    this.initListenOnLoadFiles();\n  }\n\n  public ngOnDestroy() {\n    this.onLoadFilesSubscriber.unsubscribe();\n  }\n\n  /**\n   * Initialize listener on load files\n   */\n  public initListenOnLoadFiles() {\n    this.onLoadFilesSubscriber = combineLatest(\n      this.currentDirectoryFilesService.currentDirectoryFileIds$,\n      this.currentDirectoryFilesService.selectedFiles$\n    )\n      .pipe(\n        distinctUntilChanged()\n      )\n      .subscribe((data: string[][]) => {\n        const numberOfFiles = data[0].length;\n        const numberOfSelectedFiles = data[1].length;\n\n        this.disableAllButtons();\n\n        if (numberOfFiles > 0) {\n          if (numberOfSelectedFiles > 0) {\n            this.enableAllButtons();\n          } else {\n            this.enableSelectAllButton();\n          }\n        }\n      });\n  }\n\n\n  public onSelectDropdownClick(button: IButtonData) {\n    const event: IToolbarEvent = new ToolbarEventModel(button.symbol);\n    this.onMenuButtonClick.emit(event);\n  }\n\n  /**\n   * Disable all dropdown buttons and main button\n   */\n  private disableAllButtons(): void {\n    this.selectAllButton.disabled = true;\n\n    this.selectButtonsList\n      .filter((button: IButton) => {\n        return !button.isDivider();\n      })\n      .forEach((button: IButtonData) => {\n        button.disabled = true;\n      });\n  }\n\n  /**\n   * Enable all dropdown buttons and main button\n   */\n  private enableAllButtons(): void {\n    this.selectAllButton.disabled = false;\n\n    this.selectButtonsList\n      .forEach((button: IButtonData) => {\n        button.disabled = false;\n      });\n  }\n\n  /**\n   * Create list of buttons\n   */\n  private createBasicButtons(): IButton[] {\n    const buttons = [\n      this.selectAllButton,\n      this.unselectAllButton,\n      this.inverseSelectionButton,\n      new ButtonDividerClass(),\n      this.deleteSelectionButton,\n    ];\n\n    if (this.configuration.allowChooseMultipleFiles) {\n      buttons.push(new ButtonDividerClass());\n      buttons.push(this.chooseSelectionButton);\n    }\n\n    return buttons;\n  }\n\n  /**\n   * Enable only select button\n   */\n  private enableSelectAllButton(): void {\n    this.selectAllButton.disabled = false;\n    this.inverseSelectionButton.disabled = false;\n  }\n}\n","import {Component, EventEmitter, Output, Input, OnChanges} from '@angular/core';\nimport {Button} from './models/button.model';\nimport {ToolbarEventModel} from './models/toolbarEvent.model';\nimport {IToolbarEvent} from './interface/IToolbarEvent';\nimport {FileManagerConfiguration} from '../configuration/fileManagerConfiguration.service';\nimport {FileManagerUploader} from '../filesList/fileManagerUploader.service';\nimport {Store} from '@ngrx/store';\nimport {IFileManagerState} from '../store/file-manager.reducer';\nimport {UploadFilesAction, UploadFilesErrorAction} from '../store/file-manager.action';\n\n@Component({\n  selector: 'ri-toolbar',\n  styleUrls: ['./toolbar.scss'],\n  templateUrl: './toolbar.html'\n})\n\nexport class ToolbarComponent implements OnChanges {\n  @Input() currentFolderId: string;\n\n  @Output() onAddFolderClick = new EventEmitter();\n  @Output() onUpload = new EventEmitter();\n  @Output() onMenuButtonClick = new EventEmitter();\n\n\n  public constructor(public configuration: FileManagerConfiguration,\n                     public fileManagerUploader: FileManagerUploader,\n                     private store: Store<IFileManagerState>) {\n\n    this.fileManagerUploader.clear();\n\n    this.fileManagerUploader.uploader.onCompleteAll = () => {\n      this.onUpload.emit(this.currentFolderId || '');\n    };\n\n    this.fileManagerUploader.uploader.onCompleteItem = (item: any, response: any, status: number, headers: any) => {\n      if (status === 200) {\n        this.store.dispatch(new UploadFilesAction({files: JSON.parse(response)}));\n      } else {\n        this.store.dispatch(new UploadFilesErrorAction({files: JSON.parse(response)}));\n      }\n    };\n  }\n\n  public ngOnChanges() {\n    this.fileManagerUploader.setDirectoryId(this.currentFolderId || '');\n  }\n\n  public addFolder() {\n    let event: IToolbarEvent = new ToolbarEventModel(Button.ADD_FOLDER, 'Nowy folder');\n    this.onAddFolderClick.emit(event);\n  }\n\n  public onRefreshFilesList() {\n    let event: IToolbarEvent = new ToolbarEventModel(Button.REFRESH_FILES_LIST);\n    this.onMenuButtonClick.emit(event);\n  }\n}\n","import {\n  Component, OnInit, ViewChild, HostListener, EventEmitter, Output, OnDestroy\n} from '@angular/core';\nimport {\n  TreeComponent,\n  NodeService,\n  IContextMenu,\n  IOuterNode,\n  ITreeData,\n  ITreeState,\n  IConfiguration,\n  TreeModel,\n  NodeDispatcherService, TreeInitializerService,\n} from '@rign/angular2-tree';\nimport {FileModel} from './filesList/file.model';\nimport {NotificationsService} from 'angular2-notifications';\nimport {IFileEvent} from './filesList/interface/IFileEvent';\nimport {Button} from './toolbar/models/button.model';\nimport {FilesListComponent} from './filesList/filesList.component';\nimport {IToolbarEvent} from './toolbar/interface/IToolbarEvent';\nimport {IFileModel} from './filesList/interface/IFileModel';\nimport {FileManagerConfiguration} from './configuration/fileManagerConfiguration.service';\nimport {Store} from '@ngrx/store';\nimport {FileManagerEffectsService} from './store/fileManagerEffects.service';\nimport {FileManagerApiService} from './store/fileManagerApi.service';\nimport {FilemanagerNotifcations, INotification} from './services/FilemanagerNotifcations';\nimport {CurrentDirectoryFilesService} from './services/currentDirectoryFiles.service';\nimport {IOuterFile} from './filesList/interface/IOuterFile';\nimport {FILEMANAGER_TREE_NAME} from './store/fileManagerApiAbstract.class';\nimport {\n  ChooseFilesAction,\n  DeleteSelectedFilesAction, InverseFilesSelectionAction, LoadFilesAction,\n  SelectAllFilesAction,\n  UnSelectAllFilesAction\n} from './store/file-manager.action';\nimport {combineLatest, Observable, Subscription} from 'rxjs';\n\n@Component({\n  selector: 'ri-filemanager',\n  providers: [NodeService, NotificationsService],\n  styleUrls: ['./main.scss'],\n  templateUrl: './filemanager.html'\n})\nexport class FileManagerComponent implements OnInit, OnDestroy {\n  @Output()\n  public onSingleFileSelect = new EventEmitter();\n\n  @ViewChild(TreeComponent)\n  public treeComponent: TreeComponent;\n\n  @ViewChild(FilesListComponent)\n  public filesList: FilesListComponent;\n\n  /**\n   * List of files for current selected directory\n   */\n  private files$: Observable<FileModel[]>;\n\n  public filteredFiles$: Observable<FileModel[]>;\n  public selectedFiles$: Observable<string[]>;\n\n  public folders: Observable<ITreeData>;\n\n  public treeConfiguration: IConfiguration = {\n    showAddButton: false,\n    disableMoveNodes: false,\n    treeId: FILEMANAGER_TREE_NAME,\n    dragZone: FILEMANAGER_TREE_NAME,\n    dropZone: [FILEMANAGER_TREE_NAME]\n  };\n\n  public treeModel: TreeModel;\n\n  /** UNSED **/\n  public contextMenu: IContextMenu[] = [];\n\n  public currentSelectedFile: IFileModel;\n  public currentSelectedFilesIds: string[] = [];\n  public currentSelectedFiles: IOuterFile[] = [];\n\n  public isPreviewMode = false;\n  public isCropMode = false;\n\n  public notificationOptions = {\n    position: ['bottom', 'right'],\n    timeOut: 3000,\n    lastOnBottom: false,\n    preventDuplicates: true,\n    rtl: false,\n    showProgressBar: true,\n    pauseOnHover: true\n  };\n\n  /**\n   * List of context menu\n   */\n  public menu: IContextMenu[];\n\n  protected currentSelectedFolder: IOuterNode;\n\n  private subscription = new Subscription();\n\n  public constructor(private store: Store<ITreeState>,\n                     private nodeDispatcherService: NodeDispatcherService,\n                     private treeService: FileManagerApiService,\n                     private notifications: NotificationsService,\n                     private configuration: FileManagerConfiguration,\n                     private fileManagerEffects: FileManagerEffectsService,\n                     private filemanagerNotifcations: FilemanagerNotifcations,\n                     private currentDirectoryFilesService: CurrentDirectoryFilesService,\n                     private treeInitializerService: TreeInitializerService) {\n\n    this.menu = configuration.contextMenuItems;\n\n    this.filemanagerNotifcations.getNotificationStream()\n      .subscribe((notification: INotification) => {\n        const {type, title, message} = notification;\n\n        this.notifications[type](title, message);\n      });\n\n    this.subscription.add(\n      this.currentDirectoryFilesService.selectedFiles$\n        .subscribe((data: string[]) => {\n          this.currentSelectedFilesIds = data;\n        })\n    );\n\n    this.subscription.add(\n      combineLatest(\n        this.currentDirectoryFilesService.selectedFiles$,\n        this.currentDirectoryFilesService.entities$,\n      )\n        .subscribe(([ids, entities]: [string[], { [key: string]: IOuterFile }]) => {\n          this.currentSelectedFiles = ids.map((id) => entities[id]);\n        })\n    );\n  }\n\n  public ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n\n  public ngOnInit(): void {\n    this.treeModel = this.treeInitializerService.init(this.treeConfiguration, this.treeService);\n\n    this.subscription.add(\n      this.treeModel.currentSelectedNode$\n        .subscribe((node: IOuterNode) => this.currentSelectedFolder = node)\n    );\n\n    /*** START - init files ***/\n    this.files$ = this.currentDirectoryFilesService.files$;\n    this.filteredFiles$ = this.currentDirectoryFilesService.filteredFiles$;\n    this.selectedFiles$ = this.currentDirectoryFilesService.selectedFiles$;\n\n\n    this.subscription.add(\n      this.treeModel.currentSelectedNode$\n        .subscribe((node: IOuterNode | null) => {\n          this.loadFiles(node ? node.id : '');\n        })\n    );\n\n    /*** END - init files ***/\n    this.subscription.add(\n      this.fileManagerEffects.cropFileSuccess$\n        .subscribe(() => {\n          this.closeModal();\n        })\n    );\n  }\n\n  get currentSelectedFolderId(): string | null {\n    return this.currentSelectedFolder ? this.currentSelectedFolder.id : null;\n  }\n\n\n  public onAddFolder() {\n    this.treeComponent.onAdd();\n  }\n\n  /***********************************************************************\n   * FILE EVENTS\n   **********************************************************************/\n  /**\n   * Run when all files are uploaded\n   */\n  public onUpload(folderId: string) {\n    this.notifications.success('File upload', 'Upload complete');\n  }\n\n\n  public onPreviewFile(fileEventData: IFileEvent) {\n    this.isPreviewMode = true;\n    this.currentSelectedFile = fileEventData.file;\n  }\n\n\n  public onOpenCropFileEditor(fileEventData: IFileEvent) {\n    this.isCropMode = true;\n    this.currentSelectedFile = fileEventData.file;\n  }\n\n\n  public onSelectFile(event: FileModel) {\n    this.onSingleFileSelect.next(event.getSelectData());\n  }\n\n  /***********************************************************************\n   * TOOLBAR EVENTS\n   **********************************************************************/\n\n\n  public onMenuButtonClick(event: IToolbarEvent) {\n    switch (event.name) {\n      case Button.CHOOSE_SELECTION:\n        this.store.dispatch(new ChooseFilesAction({files: this.currentSelectedFiles}));\n        break;\n      case Button.DELETE_SELECTION:\n        this.store.dispatch(new DeleteSelectedFilesAction({files: this.currentSelectedFilesIds}));\n        break;\n      case Button.SELECT_ALL:\n        this.store.dispatch(new SelectAllFilesAction());\n        break;\n      case Button.UNSELECT_ALL:\n        this.store.dispatch(new UnSelectAllFilesAction());\n        break;\n      case Button.INVERSE_SELECTION:\n        this.store.dispatch(new InverseFilesSelectionAction());\n        break;\n      case Button.REFRESH_FILES_LIST:\n        this.reloadFiles();\n        break;\n    }\n  }\n\n  /***********************************************************************\n   * OTHER FUNCTIONS\n   **********************************************************************/\n  @HostListener('window:keydown', ['$event'])\n  public keyEvents(event: KeyboardEvent) {\n    if (this.isPreviewMode || this.isCropMode) {\n      if (event.keyCode === 27) {\n        this.closeModal();\n      }\n    }\n  }\n\n  public closeModal() {\n    this.isPreviewMode = false;\n    this.isCropMode = false;\n  }\n\n\n  private loadFiles(folderId: string) {\n    this.store.dispatch(new LoadFilesAction({folderId: folderId || ''}));\n  }\n\n  private reloadFiles() {\n    const id = this.currentSelectedFolder ? this.currentSelectedFolder.id : '';\n\n    this.loadFiles(id);\n  }\n}\n","import {NgModule, CUSTOM_ELEMENTS_SCHEMA, Provider, ModuleWithProviders} from '@angular/core';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {TreeModule} from '@rign/angular2-tree';\nimport {NotificationsService, SimpleNotificationsModule} from 'angular2-notifications';\nimport {FileManagerComponent} from './filemanager.component';\nimport {ToolbarComponent} from './toolbar/toolbar.component';\nimport {FilesListComponent} from './filesList/filesList.component';\nimport {ImageCropperComponent, ImageCropperModule} from 'ng2-img-cropper';\nimport {CropComponent} from './crop/crop.component';\nimport {PreviewComponent} from './preview/preview.component';\nimport {DropdownComponent} from './dropdown/dropdown.component';\nimport {FileUploadModule} from 'ng2-file-upload';\nimport {FileManagerConfiguration} from './configuration/fileManagerConfiguration.service';\nimport {FileManagerUploader} from './filesList/fileManagerUploader.service';\nimport {TreeService} from './configuration/tree.service';\nimport {EffectsModule} from '@ngrx/effects';\nimport {FileManagerEffectsService} from './store/fileManagerEffects.service';\nimport {StoreModule} from '@ngrx/store';\nimport {fileManagerReducer} from './store/file-manager.reducer';\nimport {FileManagerActionsService} from './store/fileManagerActions.service';\nimport {StoreDevtoolsModule} from '@ngrx/store-devtools';\nimport {FileTypeFilterService} from './services/fileTypeFilter.service';\nimport {SearchFilterService} from './services/searchFilter.service';\nimport {FileManagerDispatcherService} from './store/file-manager-dispatcher.service';\nimport {FileTypeFilterComponent} from './toolbar/fileTypeFilter/fileTypeFilter.component';\nimport {SearchFileComponent} from './toolbar/searchFile/searchFile.component';\nimport {FileManagerApiService} from './store/fileManagerApi.service';\nimport {ImageDataConverter} from './services/imageDataConverter.service';\nimport {FilemanagerNotifcations} from './services/FilemanagerNotifcations';\nimport {ConfirmationPopoverModule} from 'angular-confirmation-popover';\nimport {FileManagerBackendApiService} from './store/fileManagerBackendApi.service';\nimport {CurrentDirectoryFilesService} from './services/currentDirectoryFiles.service';\nimport {SelectionComponent} from './toolbar/selectionDropDown/selection.component';\nimport {FileComponent} from './filesList/file/file.component';\nimport {TranslateModule} from '@ngx-translate/core';\nimport {IFileManagerConfiguration} from './configuration/IFileManagerConfiguration';\nimport {HttpClientModule} from '@angular/common/http';\nimport {CommonModule} from '@angular/common';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfirmationPopoverModule,\n    EffectsModule.forFeature([FileManagerEffectsService]),\n    FormsModule,\n    FileUploadModule,\n    HttpClientModule,\n    ImageCropperModule,\n    ReactiveFormsModule,\n    SimpleNotificationsModule,\n    StoreModule.forFeature('files', fileManagerReducer),\n    TranslateModule,\n    TreeModule\n  ],\n  declarations: [\n    FileManagerComponent,\n    FileComponent,\n    FileTypeFilterComponent,\n    ToolbarComponent,\n    FilesListComponent,\n    DropdownComponent,\n    PreviewComponent,\n    CropComponent,\n    SearchFileComponent,\n    SelectionComponent\n  ],\n  entryComponents: [\n    ImageCropperComponent\n  ],\n  exports: [FileManagerComponent],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class FileManagerModule {\n\n  public static forRoot(config: IFileManagerConfiguration, apiProvider: Provider = null): ModuleWithProviders {\n    return {\n      ngModule: FileManagerModule,\n      providers: [\n        CurrentDirectoryFilesService,\n        FileManagerActionsService,\n        FileManagerApiService,\n        FileManagerBackendApiService,\n        FileManagerConfiguration,\n        FileManagerDispatcherService,\n        FileManagerEffectsService,\n        FilemanagerNotifcations,\n        FileManagerUploader,\n        FileTypeFilterService,\n        ImageDataConverter,\n        NotificationsService,\n        SearchFilterService,\n        TreeService,\n        {provide: 'fileManagerConfiguration', useValue: config},\n        apiProvider ? apiProvider : FileManagerApiService\n      ]\n    };\n  }\n\n  public static forChild(config: IFileManagerConfiguration, apiProvider: Provider = null): ModuleWithProviders {\n    return {\n      ngModule: FileManagerModule,\n      providers: [\n        CurrentDirectoryFilesService,\n        FileManagerActionsService,\n        FileManagerApiService,\n        FileManagerBackendApiService,\n        FileManagerConfiguration,\n        FileManagerDispatcherService,\n        FileManagerEffectsService,\n        FilemanagerNotifcations,\n        FileManagerUploader,\n        FileTypeFilterService,\n        ImageDataConverter,\n        NotificationsService,\n        SearchFilterService,\n        TreeService,\n        {provide: 'fileManagerConfiguration', useValue: config},\n        apiProvider ? apiProvider : FileManagerApiService\n      ]\n    };\n  }\n}\n"]}