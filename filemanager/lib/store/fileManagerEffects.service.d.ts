import { Actions } from '@ngrx/effects';
import { IOuterNode } from '@rign/angular2-tree';
import { FileManagerActionsService } from './fileManagerActions.service';
import { IOuterFile } from '../filesList/interface/IOuterFile';
import { Observable } from 'rxjs';
import { IFileModel } from '../filesList/interface/IFileModel';
import { ICropBounds } from '../crop/ICropBounds';
import { FileManagerApiService } from './fileManagerApi.service';
import { FilemanagerNotifcations } from '../services/FilemanagerNotifcations';
import { CropFileAction, CropFileErrorAction, CropFileSuccessAction, DeleteFileSuccessAction, DeleteSelectedFilesSuccessAction, FileManagerAction, LoadFilesAction, LoadFilesSuccessAction, MoveFilesErrorAction, MoveFilesSuccessAction, UploadFilesErrorAction, UploadFilesSuccessAction } from './file-manager.action';
export declare class FileManagerEffectsService {
    private actions$;
    private fileManagerActions;
    private filemanagerNotfication;
    private fileManagerApiService;
    loadFiles$: Observable<void | import("./file-manager.action").ChooseFilesAction | CropFileAction | CropFileErrorAction | CropFileSuccessAction | import("./file-manager.action").DeleteFileAction | DeleteFileSuccessAction | import("./file-manager.action").DeleteSelectedFilesAction | DeleteSelectedFilesSuccessAction | import("./file-manager.action").InverseFilesSelectionAction | LoadFilesAction | LoadFilesSuccessAction | MoveFilesErrorAction | MoveFilesSuccessAction | import("./file-manager.action").SelectAllFilesAction | import("./file-manager.action").SelectFileAction | import("./file-manager.action").UnSelectAllFilesAction | import("./file-manager.action").UnSelectFileAction | import("./file-manager.action").UploadFilesAction | UploadFilesErrorAction | UploadFilesSuccessAction>;
    cropFile$: Observable<FileManagerAction>;
    deleteFile$: Observable<void | import("./file-manager.action").ChooseFilesAction | CropFileAction | CropFileErrorAction | CropFileSuccessAction | import("./file-manager.action").DeleteFileAction | DeleteFileSuccessAction | import("./file-manager.action").DeleteSelectedFilesAction | DeleteSelectedFilesSuccessAction | import("./file-manager.action").InverseFilesSelectionAction | LoadFilesAction | LoadFilesSuccessAction | MoveFilesErrorAction | MoveFilesSuccessAction | import("./file-manager.action").SelectAllFilesAction | import("./file-manager.action").SelectFileAction | import("./file-manager.action").UnSelectAllFilesAction | import("./file-manager.action").UnSelectFileAction | import("./file-manager.action").UploadFilesAction | UploadFilesErrorAction | UploadFilesSuccessAction>;
    deleteFilesSelection$: Observable<void | import("./file-manager.action").ChooseFilesAction | CropFileAction | CropFileErrorAction | CropFileSuccessAction | import("./file-manager.action").DeleteFileAction | DeleteFileSuccessAction | import("./file-manager.action").DeleteSelectedFilesAction | DeleteSelectedFilesSuccessAction | import("./file-manager.action").InverseFilesSelectionAction | LoadFilesAction | LoadFilesSuccessAction | MoveFilesErrorAction | MoveFilesSuccessAction | import("./file-manager.action").SelectAllFilesAction | import("./file-manager.action").SelectFileAction | import("./file-manager.action").UnSelectAllFilesAction | import("./file-manager.action").UnSelectFileAction | import("./file-manager.action").UploadFilesAction | UploadFilesErrorAction | UploadFilesSuccessAction>;
    uploadFile$: Observable<FileManagerAction>;
    moveFile$: Observable<FileManagerAction>;
    filesMoveSuccess$: Observable<LoadFilesAction>;
    uploadError$: Observable<void>;
    cropFileSuccess$: Observable<CropFileSuccessAction>;
    deleteFileSuccess$: Observable<DeleteFileSuccessAction>;
    constructor(actions$: Actions, fileManagerActions: FileManagerActionsService, filemanagerNotfication: FilemanagerNotifcations, fileManagerApiService: FileManagerApiService);
    protected cropFile(file: IFileModel, bounds: ICropBounds): Observable<IOuterFile>;
    protected deleteFile(file: IFileModel): Observable<boolean>;
    protected deleteFilesSelection(files: string[]): Observable<boolean>;
    protected loadFiles(folderId: string | null): Observable<IOuterFile[]>;
    protected uploadFile(file: IOuterFile): Observable<IOuterFile>;
    protected moveFiles(files: IOuterFile[], folder?: IOuterNode): Observable<IOuterFile[]>;
    protected onCropFileError(file: IFileModel): void;
    protected onDeleteFileError(file: IFileModel): void;
    protected onDeleteFilesSelectionError(files: IOuterFile[]): void;
    protected onLoadFilesError(folderId: string): void;
    protected onMoveFilesSuccess(): void;
    protected onMoveFilesError(): void;
}
