{"version":3,"file":"rign-angular2-filemanager.js.map","sources":["ng://@rign/angular2-filemanager/lib/configuration/fileManagerConfiguration.service.ts","ng://@rign/angular2-filemanager/lib/configuration/IUrlConfiguration.ts","ng://@rign/angular2-filemanager/lib/configuration/tree.service.ts","ng://@rign/angular2-filemanager/lib/filesList/file.model.ts","ng://@rign/angular2-filemanager/lib/store/file-manager.action.ts","ng://@rign/angular2-filemanager/lib/crop/crop.component.ts","ng://@rign/angular2-filemanager/lib/dropdown/dropdown.component.ts","ng://@rign/angular2-filemanager/lib/services/imageDataConverter.service.ts","ng://@rign/angular2-filemanager/lib/services/extendedFileUplaoder.service.ts","ng://@rign/angular2-filemanager/lib/services/FilemanagerNotifcations.ts","ng://@rign/angular2-filemanager/lib/filesList/fileManagerUploader.service.ts","ng://@rign/angular2-filemanager/lib/filesList/file/file.component.ts","ng://@rign/angular2-filemanager/lib/store/fileManagerActions.service.ts","ng://@rign/angular2-filemanager/lib/store/file-manager-dispatcher.service.ts","ng://@rign/angular2-filemanager/lib/store/fileManagerApiAbstract.class.ts","ng://@rign/angular2-filemanager/lib/store/fileManagerApi.service.ts","ng://@rign/angular2-filemanager/lib/store/fileManagerEffects.service.ts","ng://@rign/angular2-filemanager/lib/filesList/filesList.component.ts","ng://@rign/angular2-filemanager/lib/preview/preview.component.ts","ng://@rign/angular2-filemanager/lib/services/searchFilter.service.ts","ng://@rign/angular2-filemanager/lib/services/fileTypeFilter.service.ts","ng://@rign/angular2-filemanager/lib/store/file-manager.reducer.ts","ng://@rign/angular2-filemanager/lib/services/currentDirectoryFiles.service.ts","ng://@rign/angular2-filemanager/lib/store/fileManagerBackendApi.service.ts","ng://@rign/angular2-filemanager/lib/toolbar/fileTypeFilter/fileTypeFilter.component.ts","ng://@rign/angular2-filemanager/lib/toolbar/interface/IUploadItemEvent.ts","ng://@rign/angular2-filemanager/lib/toolbar/models/button.model.ts","ng://@rign/angular2-filemanager/lib/toolbar/models/toolbarEvent.model.ts","ng://@rign/angular2-filemanager/lib/toolbar/searchFile/searchFile.component.ts","ng://@rign/angular2-filemanager/lib/dropdown/AbstractButton.class.ts","ng://@rign/angular2-filemanager/lib/dropdown/Button.class.ts","ng://@rign/angular2-filemanager/lib/dropdown/ButtonDivider.class.ts","ng://@rign/angular2-filemanager/lib/toolbar/selectionDropDown/selection.component.ts","ng://@rign/angular2-filemanager/lib/toolbar/toolbar.component.ts","ng://@rign/angular2-filemanager/lib/filemanager.component.ts","ng://@rign/angular2-filemanager/lib/filemanager.module.ts"],"sourcesContent":["import {IContextMenu} from '@rign/angular2-tree';\nimport {Injectable, Inject} from '@angular/core';\nimport {IFileTypeFilter} from '../toolbar/interface/IFileTypeFilter';\nimport {ICropSize} from '../crop/ICropSize';\nimport {IFileManagerConfiguration} from './IFileManagerConfiguration';\n\n@Injectable()\nexport class FileManagerConfiguration {\n\n  public allowedCropSize: ICropSize[] = [\n    {\n      name: 'RI_FM_BTN_LANDSCAPE',\n      width: 300,\n      height: 100\n    },\n    {\n      name: 'RI_FM_BTN_PORTRAIT',\n      width: 200,\n      height: 300\n    }\n  ];\n\n  public contextMenuItems: IContextMenu[] = [];\n\n  public fileTypesFilter: IFileTypeFilter[] = [\n    {\n      name: 'ALL',\n      mimes: [],\n      iconCls: 'fa fa-file-o',\n      text: 'All files',\n      defaultSelected: true\n    },\n    {\n      name: 'IMAGES',\n      mimes: ['image/jpg', 'image/jpeg', 'image/png', 'image/gif', 'image/png'],\n      iconCls: 'fa fa-picture-o',\n      text: 'Images'\n    },\n    {\n      name: 'AUDIO',\n      mimes: ['audio/mpeg', 'audio/x-ms-wma', 'audio/vnd.rn-realaudio', 'audio/x-wav', 'audio/mp3'],\n      iconCls: 'fa fa-file-audio-o',\n      text: 'Audio'\n    },\n    {\n      name: 'VIDEO',\n      mimes: ['video/mpeg', 'video/mp4', 'video/quicktime', 'video/x-ms-wmv'],\n      iconCls: 'fa fa-file-video-o',\n      text: 'Video'\n    },\n    {\n      name: 'ARCHIVE',\n      mimes: ['application/zip'],\n      iconCls: 'fa fa-file-archive-o',\n      text: 'Archive'\n    }\n  ];\n\n  public folderUrls: {foldersUrl: string, folderMoveUrl: string};\n  public fileUrl = '/api/files';\n\n  public isMultiSelection: boolean;\n\n  public maxFileSize: number;\n\n  public mimeTypes: string[] | null;\n\n  public allowChooseMultipleFiles: boolean;\n\n  constructor(@Inject('fileManagerConfiguration') configuration: IFileManagerConfiguration) {\n    const {foldersUrl, folderMoveUrl} = configuration.urls;\n    this.folderUrls = {foldersUrl, folderMoveUrl};\n    this.fileUrl = configuration.urls.filesUrl;\n    this.isMultiSelection = configuration.isMultiSelection || false;\n    this.maxFileSize = configuration.maxFileSize || 0;\n    this.mimeTypes = configuration.mimeTypes || null;\n    this.allowChooseMultipleFiles = configuration.allowChooseMultipleFiles || false;\n  }\n}\n","export class IUrlConfiguration {\n  filesUrl: string | null;\n  foldersUrl: string;\n  folderMoveUrl: string;\n}\n","import {Injectable, Inject} from '@angular/core';\nimport {NodeService} from '@rign/angular2-tree';\nimport {IFileManagerConfiguration} from './IFileManagerConfiguration';\nimport {HttpClient} from '@angular/common/http';\n\n@Injectable()\nexport class TreeService extends NodeService {\n  public constructor(protected http: HttpClient, @Inject('fileManagerConfiguration') configuration: IFileManagerConfiguration) {\n    super(http);\n\n    this.apiConfig = {\n      addUrl: configuration.urls.foldersUrl,\n      getUrl: configuration.urls.foldersUrl,\n      updateUrl: configuration.urls.foldersUrl,\n      removeUrl: configuration.urls.foldersUrl,\n      moveUrl: configuration.urls.folderMoveUrl\n    };\n  }\n}\n","import {IOuterFile} from './interface/IOuterFile';\nimport {IFileModel} from './interface/IFileModel';\nimport {ISelectFile} from './interface/ISelectFile';\n\nexport class FileModel implements IFileModel {\n  static smallIconsFolder = '/icons/128px/';\n  static bigIconsFolder = '/icons/512px/';\n\n  private _orgData: IOuterFile;\n  private _name: string;\n\n  private _iconsFolder = FileModel.smallIconsFolder;\n\n  public selected = false;\n\n  set name(name: string) {\n    this._name = name;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get thumbnailUrl() {\n    return this.isImage() ? this._orgData.thumbnailUrl : `${FileModel.smallIconsFolder}${this.getFileExt()}.png`;\n  }\n\n  get url() {\n    return this.isImage() ? this._orgData.url : `${FileModel.bigIconsFolder}${this.getFileExt()}.png`;\n  }\n\n  public constructor(data: IOuterFile) {\n    this.fromJSON(data);\n  }\n\n  public fromJSON(data: IOuterFile) {\n    this._orgData = data;\n\n    this.name = data.name;\n    this.selected = data.selected || false;\n  }\n\n  public toJSON() {\n    return this._orgData;\n  }\n\n  public getId() {\n    return this._orgData.id;\n  }\n\n  public getHeight(): number {\n    return this._orgData.height || 0;\n  }\n\n  public getFileExt() {\n    return this.name.split('.').pop();\n  }\n\n  public getMime() {\n    return this._orgData.type;\n  }\n\n  public getWidth(): number {\n    return this._orgData.width || 0;\n  }\n\n  public isImage() {\n    return ['image/jpg', 'image/jpeg', 'image/png', 'image/gif', 'image/png'].indexOf(this.getMime()) > -1;\n  }\n\n  public getSelectData(): ISelectFile {\n    return {\n      id: this.getId(),\n      name: this.name,\n      url: this.url,\n      width: this.getWidth(),\n      height: this.getHeight(),\n      mime: this.getMime()\n    };\n  }\n}\n","import {Action} from '@ngrx/store';\nimport {IOuterFile} from '../filesList/interface/IOuterFile';\nimport {ICropBounds} from '../crop/ICropBounds';\nimport {IFileModel} from '../filesList/interface/IFileModel';\n\nexport enum FileManagerActionTypes {\n  CHOOSE_FILES = 'FILEMANAGER_CHOOSE_FILES',\n  CROP_FILE = 'FILEMANAGER_CROP_FILE',\n  CROP_FILE_SUCCESS = 'FILEMANAGER_CROP_FILE_SUCCESS',\n  CROP_FILE_ERROR = 'FILEMANAGER_CROP_FILE_ERROR',\n  DELETE_FILE = 'FILEMANAGER_DELETE_FILE',\n  DELETE_FILE_SUCCESS = 'FILEMANAGER_DELETE_FILE_SUCCESS',\n  DELETE_FILE_SELECTION = 'FILEMANAGER_DELETE_FILE_SELECTION',\n  DELETE_FILE_SELECTION_SUCCESS = 'FILEMANAGER_DELETE_FILE_SELECTION_SUCCESS',\n  INVERSE_FILE_SELECTION = 'FILEMANAGER_INVERSE_FILE_SELECTION',\n  LOAD_FILES = 'FILEMANAGER_LOAD_FILES',\n  LOAD_FILES_SUCCESS = 'FILEMANAGER_LOAD_FILES_SUCCESS',\n  MOVE_FILES_SUCCESS = 'FILEMANAGER_MOVE_FILES_SUCCESS',\n  MOVE_FILES_ERROR = 'FILEMANAGER_MOVE_FILES_ERROR',\n  SELECT_ALL = 'FILEMANAGER_SELECT_ALL',\n  SELECT_FILE = 'FILEMANAGER_SELECT_FILE',\n  UNSELECT_FILE = 'FILEMANAGER_UNSELECT_FILE',\n  UNSELECT_ALL = 'FILEMANAGER_UNSELECT_ALL',\n  UPLOAD_FILE = 'FILEMANAGER_UPLOAD_FILE',\n  UPLOAD_FILE_ERROR = 'FILEMANAGER_UPLOAD_FILE_ERROR',\n  UPLOAD_FILE_SUCCESS = 'FILEMANAGER_UPLOAD_FILE_SUCCESS',\n}\n\nexport class ChooseFilesAction implements Action {\n  readonly type = FileManagerActionTypes.CHOOSE_FILES;\n\n  public constructor(public payload: { files: IOuterFile[] }) {\n\n  }\n}\n\nexport class CropFileAction implements Action {\n  readonly type = FileManagerActionTypes.CROP_FILE;\n\n  public constructor(public payload: { file: IFileModel, bounds: ICropBounds }) {\n\n  }\n}\n\nexport class CropFileErrorAction implements Action {\n  readonly type = FileManagerActionTypes.CROP_FILE_ERROR;\n\n  public constructor(public payload: { file: IFileModel}) {\n\n  }\n}\n\nexport class CropFileSuccessAction implements Action {\n  readonly type = FileManagerActionTypes.CROP_FILE_SUCCESS;\n\n  public constructor(public payload: { file: IFileModel}) {\n\n  }\n}\n\nexport class DeleteFileAction implements Action {\n  readonly type = FileManagerActionTypes.DELETE_FILE;\n\n  public constructor(public payload: { file: IFileModel}) {\n\n  }\n}\n\nexport class DeleteFileSuccessAction implements Action {\n  readonly type = FileManagerActionTypes.DELETE_FILE_SUCCESS;\n\n  public constructor(public payload: { file: IFileModel}) {\n\n  }\n}\n\nexport class DeleteSelectedFilesAction implements Action {\n  readonly type = FileManagerActionTypes.DELETE_FILE_SELECTION;\n\n  public constructor(public payload: { files: string[]}) {\n\n  }\n}\n\nexport class DeleteSelectedFilesSuccessAction implements Action {\n  readonly type = FileManagerActionTypes.DELETE_FILE_SELECTION_SUCCESS;\n\n  public constructor(public payload: { files: string[]}) {\n\n  }\n}\n\nexport class InverseFilesSelectionAction implements Action {\n  readonly type = FileManagerActionTypes.INVERSE_FILE_SELECTION;\n\n}\n\nexport class LoadFilesAction implements Action {\n  readonly type = FileManagerActionTypes.LOAD_FILES;\n\n  public constructor(public payload: { folderId: string}) {\n\n  }\n}\n\nexport class LoadFilesSuccessAction implements Action {\n  readonly type = FileManagerActionTypes.LOAD_FILES_SUCCESS;\n\n  public constructor(public payload: { files: IOuterFile[]}) {\n\n  }\n}\n\nexport class MoveFilesErrorAction implements Action {\n  readonly type = FileManagerActionTypes.MOVE_FILES_ERROR;\n\n  public constructor(public payload: { files: IOuterFile[]}) {\n\n  }\n}\n\nexport class MoveFilesSuccessAction implements Action {\n  readonly type = FileManagerActionTypes.MOVE_FILES_SUCCESS;\n\n  public constructor(public payload: { folderId: string, files: IOuterFile[]}) {\n\n  }\n}\n\nexport class SelectAllFilesAction implements Action {\n  readonly type = FileManagerActionTypes.SELECT_ALL;\n}\n\nexport class SelectFileAction implements Action {\n  readonly type = FileManagerActionTypes.SELECT_FILE;\n\n  public constructor(public payload: { file: IFileModel}) {\n\n  }\n}\n\nexport class UnSelectAllFilesAction implements Action {\n  readonly type = FileManagerActionTypes.UNSELECT_ALL;\n}\n\nexport class UnSelectFileAction implements Action {\n  readonly type = FileManagerActionTypes.UNSELECT_FILE;\n\n  public constructor(public payload: { file: IFileModel}) {\n\n  }\n}\n\nexport class UploadFilesAction implements Action {\n  readonly type = FileManagerActionTypes.UPLOAD_FILE;\n\n  public constructor(public payload: { files: IOuterFile[]}) {\n\n  }\n}\n\nexport class UploadFilesErrorAction implements Action {\n  readonly type = FileManagerActionTypes.UPLOAD_FILE_ERROR;\n\n  public constructor(public payload: { files: IOuterFile[]}) {\n\n  }\n}\n\nexport class UploadFilesSuccessAction implements Action {\n  readonly type = FileManagerActionTypes.UPLOAD_FILE_SUCCESS;\n\n  public constructor(public payload: { files: IOuterFile[]}) {\n\n  }\n}\n\nexport type FileManagerAction =\n  ChooseFilesAction\n  | CropFileAction\n  | CropFileErrorAction\n  | CropFileSuccessAction\n  | DeleteFileAction\n  | DeleteFileSuccessAction\n  | DeleteSelectedFilesAction\n  | DeleteSelectedFilesSuccessAction\n  | InverseFilesSelectionAction\n  | LoadFilesAction\n  | LoadFilesSuccessAction\n  | MoveFilesErrorAction\n  | MoveFilesSuccessAction\n  | SelectAllFilesAction\n  | SelectFileAction\n  | UnSelectAllFilesAction\n  | UnSelectFileAction\n  | UploadFilesAction\n  | UploadFilesErrorAction\n  | UploadFilesSuccessAction\n;\n","import {\n  Component, Input, ViewChild, ViewContainerRef, ComponentFactoryResolver, Output,\n  EventEmitter, AfterContentInit\n} from '@angular/core';\nimport {FileModel} from '../filesList/file.model';\nimport {CropperSettings} from 'ng2-img-cropper/src/cropperSettings';\nimport {ICropSize} from './ICropSize';\nimport {FileManagerConfiguration} from '../configuration/fileManagerConfiguration.service';\nimport {Bounds} from 'ng2-img-cropper/src/model/bounds';\nimport {ICropBounds} from './ICropBounds';\nimport {ImageCropperComponent} from 'ng2-img-cropper';\nimport {IFileManagerState} from '../store/file-manager.reducer';\nimport {Store} from '@ngrx/store';\nimport {CropFileAction} from '../store/file-manager.action';\n\n@Component({\n  selector: 'crop-image',\n  styleUrls: ['./crop.scss'],\n  template: `\n    <div class=\"crop-image\">\n      <div class=\"crop-workbench\">\n        <div #container></div>\n      </div>\n      <div class=\"btn-toolbar\">\n        <div class=\"btn-group\">\n          <button class=\"btn btn-primary\" *ngFor=\"let cropSize of cropSizeList\" (click)=\"updateCropSize(cropSize)\"\n                  [ngClass]=\"{'active': cropSize == currentCropSize}\">{{cropSize.name | translate}}\n          </button>\n        </div>\n        <div class=\"btn-group pull-right\">\n          <button class=\"btn btn-success btn-icon\" (click)=\"cropImage()\">\n            <i class=\"fa fa-check\"></i>\n            <span>{{'RI_FM_BTN_SAVE' | translate}}</span>\n          </button>\n        </div>\n      </div>\n    </div>\n  `\n})\n\nexport class CropComponent implements AfterContentInit {\n  @Input()\n  public file: FileModel;\n\n  @Output()\n  public onCrop = new EventEmitter();\n\n  @ViewChild('container', {read: ViewContainerRef})\n  public container: ViewContainerRef;\n\n  @ViewChild('cropper')\n  public cropper: ImageCropperComponent;\n\n  private bounds: Bounds;\n\n  public cropSizeList: ICropSize[];\n  public currentCropSize: ICropSize;\n\n  constructor(private resolver: ComponentFactoryResolver,\n              private configuration: FileManagerConfiguration,\n              private store: Store<IFileManagerState>) {\n    this.cropSizeList = configuration.allowedCropSize;\n  }\n\n  updateCropSize(cropSize: ICropSize) {\n    const image = new Image();\n    const cropperComponent = this.resolver.resolveComponentFactory(ImageCropperComponent);\n    const cropperComponentRef = this.container.createComponent(cropperComponent);\n\n    if (this.container.length > 1) {\n      this.container.detach(0);\n    }\n\n    this.currentCropSize = cropSize;\n    cropperComponentRef.instance.settings = this.getCropperSettings();\n    cropperComponentRef.instance.image = {};\n    cropperComponentRef.instance.onCrop\n      .subscribe((bounds: Bounds) => this.bounds = bounds);\n\n    setTimeout(() => {\n      image.src = this.file.url;\n      cropperComponentRef.instance.setImage(image);\n    });\n  }\n\n  public ngAfterContentInit(): void {\n    this.updateCropSize(this.cropSizeList[0]);\n  }\n\n  public cropImage() {\n    const bounds: ICropBounds = {\n      x: this.bounds.left,\n      y: this.bounds.top,\n      width: this.bounds.width,\n      height: this.bounds.height\n    };\n\n    this.store.dispatch(new CropFileAction({file: this.file, bounds}));\n  }\n\n\n  private getCropperSettings(): CropperSettings {\n    const cropperSettings = new CropperSettings();\n    const scale = this.calculateScale();\n    const width = scale * this.file.getWidth();\n    const height = scale * this.file.getHeight();\n\n    cropperSettings.noFileInput = true;\n    cropperSettings.width = this.currentCropSize.width;\n    cropperSettings.height = this.currentCropSize.height;\n    cropperSettings.canvasWidth = width;\n    cropperSettings.canvasHeight = height;\n\n    return cropperSettings;\n  }\n\n  /**\n   * Calculates scale between current file dimensions and box 600x600\n   */\n  private calculateScale(): number {\n    const scale = this.file.getWidth() / this.file.getHeight();\n\n    if (scale > 1) {\n      if (this.file.getWidth() > 600) {\n        return 600 / this.file.getWidth();\n      }\n    } else {\n      if (this.file.getHeight() > 600) {\n        return 600 / this.file.getHeight();\n      }\n    }\n\n    return 1;\n  }\n}\n","import {Component, Input, Output, EventEmitter} from '@angular/core';\nimport {IButtonData} from './IButton';\n\n@Component({\n  selector: 'ri-dropdown',\n  styleUrls: ['./dropdown.scss'],\n  templateUrl: './dropdown.html'\n})\n\nexport class DropdownComponent {\n  @Input()\n  public mainButton: IButtonData;\n\n  @Input()\n  public buttons: IButtonData[];\n\n  @Input()\n  public displayMainButtonLabel: boolean;\n\n  @Output()\n  public onClick = new EventEmitter();\n\n  public isOpen = false;\n\n  public hide(): void {\n    this.isOpen = false;\n  }\n\n  public selectButton(button: IButtonData): void {\n    this.hide();\n    this.onClick.emit(button);\n  }\n\n  public toggleOpen() {\n    this.isOpen = !this.isOpen;\n  }\n}\n","import {UUID} from 'angular2-uuid';\nimport {Injectable} from '@angular/core';\nimport {concatMap, map} from 'rxjs/operators';\nimport {fromEvent, Observable, of} from 'rxjs';\n\nexport interface IFileDataProperties {\n  id: string | number;\n  folderId: string;\n  name: string;\n  size: number;\n  data: string;\n  type: string;\n  width?: number;\n  height?: number;\n  selected?: boolean;\n}\n\nexport interface IImageDimensions {\n  width: number;\n  height: number;\n}\n\n@Injectable()\nexport class ImageDataConverter {\n  public getProperties(file: File, folderId: string): Observable<IFileDataProperties> {\n    const properties: IFileDataProperties = {\n      id: UUID.UUID(),\n      folderId: folderId,\n      name: file.name,\n      size: file.size,\n      type: file.type,\n      data: ''\n    };\n\n    const reader = this.getBase64FromFile(file);\n\n    return reader\n      .pipe(\n        concatMap((data: string) => {\n          properties.data = data;\n\n          if (properties.type.indexOf('image') === 0) {\n            return this.getImageDimensions(data);\n          } else {\n            return of({width: 0, height: 0});\n          }\n        }),\n        map((dimensions: IImageDimensions) => {\n          properties.width = dimensions.width;\n          properties.height = dimensions.height;\n\n          return properties;\n        })\n      );\n  }\n\n  /**\n   * Create observable which return image as base64 data\n   */\n  private getBase64FromFile(file: File): Observable<string> {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n\n\n    return fromEvent(reader, 'load')\n      .pipe(\n        map(() => {\n          return reader.result.toString();\n        })\n      );\n  }\n\n  /**\n   * Create observable which return dimensions of the image\n   */\n  private getImageDimensions(data: string): Observable<IImageDimensions> {\n    const image = new Image();\n    image.src = data;\n    image.style.display = 'none';\n\n    const loadImage = fromEvent(image, 'load')\n      .pipe(\n        map(() => {\n          return {\n            width: image.naturalWidth,\n            height: image.naturalHeight\n          };\n        })\n      );\n\n    document.body.appendChild(image);\n\n    return loadImage;\n  }\n}\n","import {FileItem, FileUploader, FileUploaderOptions} from 'ng2-file-upload';\nimport {IFileDataProperties, ImageDataConverter} from './imageDataConverter.service';\nimport {FilemanagerNotifcations, INotification} from './FilemanagerNotifcations';\nimport {FileLikeObject} from 'ng2-file-upload/file-upload/file-like-object.class';\n\nexport class ExtendedFileUploader extends FileUploader {\n\n  public constructor(options: FileUploaderOptions, private filemanagerNotification: FilemanagerNotifcations) {\n    super(options);\n  }\n\n  public onWhenAddingFileFailed(item: FileLikeObject, filter: any, options: FileUploaderOptions) {\n    const notification: INotification = {\n      type: 'alert',\n      title: 'Add file to queue',\n      message: `File not add to queue`\n    };\n\n    if (filter.name === 'fileSize') {\n      notification.message = `File size is too large - max size  is ${options.maxFileSize / 1024} KB`;\n    } else {\n      notification.message = `File mime type \"${item.type}\" is not allowed`;\n    }\n    this.filemanagerNotification.sendNotification(notification);\n  }\n\n  public uploadItem(value: FileItem): void {\n    if (this.options.url) {\n      super.uploadItem(value);\n    } else {\n      const imageDataConverter = new ImageDataConverter();\n      this._onProgressItem(value, 0);\n\n      if (this.isUploading) {\n        return;\n      }\n\n      this.isUploading = true;\n\n      const header = this.options.headers.find((object: any) => object.name === 'folderId');\n\n      this._onProgressItem(value, 50);\n      imageDataConverter.getProperties(value._file, header.value)\n        .subscribe((file: IFileDataProperties) => {\n          this.isUploading = false;\n\n          this._onProgressItem(value, 100);\n          this._onCompleteItem(value, JSON.stringify(file), 200, {});\n        });\n    }\n  }\n}\n","import {Subject} from 'rxjs';\n\nexport interface INotification {\n  type: 'alert' | 'error' | 'success';\n  title: string;\n  message?: string;\n}\n\nexport class FilemanagerNotifcations {\n  private notification$ = new Subject<INotification>();\n\n  public sendNotification(notification: INotification): void {\n    this.notification$.next(notification);\n  }\n\n  public getNotificationStream(): Subject<INotification> {\n    return this.notification$;\n  }\n}\n","import {Injectable, Inject} from '@angular/core';\nimport {ExtendedFileUploader} from '../services/extendedFileUplaoder.service';\nimport {IFileManagerConfiguration} from '../configuration/IFileManagerConfiguration';\nimport {FilemanagerNotifcations} from '../services/FilemanagerNotifcations';\nimport {FileUploaderOptions} from 'ng2-file-upload';\n\n@Injectable()\nexport class FileManagerUploader {\n  public uploader: ExtendedFileUploader;\n\n  public constructor(@Inject('fileManagerConfiguration') configuration: IFileManagerConfiguration,\n                     filemanagerNotification: FilemanagerNotifcations) {\n    const options: FileUploaderOptions = {\n      allowedMimeType: configuration.mimeTypes,\n      url: configuration.urls.filesUrl,\n      maxFileSize: configuration.maxFileSize\n    };\n\n    this.uploader = new ExtendedFileUploader(options, filemanagerNotification);\n  }\n\n  public clear() {\n    this.uploader.authToken = null;\n    this.uploader.setOptions(this.getDefaultOptions());\n  }\n\n  public getDefaultOptions() {\n    const options = {};\n    options['removeAfterUpload'] = true;\n    options['autoUpload'] = true;\n    options['method'] = 'POST';\n\n    return options;\n  }\n\n  public setAuthorizationToken(token: string) {\n    this.uploader.authToken = token;\n  }\n\n  public setDirectoryId(directoryId: string | number): FileManagerUploader {\n    const options = this.getDefaultOptions();\n\n    options['headers'] = [{name: 'folderId', value: directoryId.toString()}];\n\n    this.uploader.setOptions(options);\n\n    return this;\n  }\n}\n","import {Component, EventEmitter, Input, Output, ViewEncapsulation} from '@angular/core';\nimport {IFileModel} from '../interface/IFileModel';\nimport {FileManagerConfiguration} from '../../configuration/fileManagerConfiguration.service';\nimport {IFileEvent} from '../interface/IFileEvent';\nimport {Store} from '@ngrx/store';\nimport {IFileManagerState} from '../../store/file-manager.reducer';\nimport {\n  ChooseFilesAction,\n  DeleteFileAction,\n  SelectFileAction,\n  UnSelectFileAction\n} from '../../store/file-manager.action';\n\n@Component({\n  selector: 'ri-file-component',\n  templateUrl: './file.component.html',\n  encapsulation: ViewEncapsulation.None\n})\nexport class FileComponent {\n  @Input()\n  public file: IFileModel;\n\n  @Output()\n  public onPreviewFile = new EventEmitter();\n\n  @Output()\n  public onCropFile = new EventEmitter();\n\n  @Output()\n  public onSelectFile = new EventEmitter();\n\n  public removeTitle = 'Remove file';\n\n  public constructor(public configuration: FileManagerConfiguration,\n                     private store: Store<IFileManagerState>) {\n  }\n\n  /**\n   * Fired when clicked on button \"delete file\"\n   *\n   * @param file\n   */\n  public deleteFile($event: MouseEvent, file: IFileModel) {\n    this.store.dispatch(new DeleteFileAction({file}));\n\n    $event.preventDefault();\n    $event.stopPropagation();\n  }\n\n  public getRemoveMessage(file: IFileModel) {\n    return 'You are try to delete <b>' + file.name + '</b>. Are you sure?';\n  }\n\n  public openPreview($event: MouseEvent): void {\n    let fileEvent: IFileEvent = {\n      eventName: 'onPreviewFile',\n      file: this.file\n    };\n    this.onPreviewFile.emit(fileEvent);\n\n    $event.preventDefault();\n    $event.stopPropagation();\n  }\n\n  public openCrop($event: MouseEvent): void {\n    let fileEvent: IFileEvent = {\n      eventName: 'onCropFile',\n      file: this.file\n    };\n    this.onCropFile.emit(fileEvent);\n\n    $event.preventDefault();\n    $event.stopPropagation();\n  }\n\n  public selectFile(): void {\n    this.store.dispatch(new SelectFileAction({file: this.file}));\n  }\n\n  public unSelectFile(): void {\n    this.store.dispatch(new UnSelectFileAction({file: this.file}));\n  }\n\n  public chooseFile($event: MouseEvent, file: IFileModel): void {\n    this.store.dispatch(new ChooseFilesAction({files: [file.toJSON()]}));\n\n    $event.preventDefault();\n    $event.stopPropagation();\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {Action} from '@ngrx/store';\nimport {IOuterFile} from '../filesList/interface/IOuterFile';\nimport {IFileModel} from '../filesList/interface/IFileModel';\nimport {ICropBounds} from '../crop/ICropBounds';\n\nexport interface IFileManagerPayloadData {\n  folderId?: string;\n  files?: IOuterFile[];\n  file?: IFileModel;\n  fileIds?: string[];\n  bounds?: ICropBounds;\n}\n\nexport interface IFileManagerAction extends Action {\n  payload: IFileManagerPayloadData;\n}\n\n/**\n * @Deprecated - Will be removed in 3.0.0\n */\n@Injectable()\nexport class FileManagerActionsService {\n  static FILEMANAGER_CHOOSE_FILES = 'FILEMANAGER_CHOOSE_FILES';\n  static FILEMANAGER_CROP_FILE = 'FILEMANAGER_CROP_FILE';\n  static FILEMANAGER_CROP_FILE_SUCCESS = 'FILEMANAGER_CROP_FILE_SUCCESS';\n  static FILEMANAGER_CROP_FILE_ERROR = 'FILEMANAGER_CROP_FILE_ERROR';\n  static FILEMANAGER_DELETE_FILE = 'FILEMANAGER_DELETE_FILE';\n  static FILEMANAGER_DELETE_FILE_SUCCESS = 'FILEMANAGER_DELETE_FILE_SUCCESS';\n  static FILEMANAGER_DELETE_FILE_SELECTION = 'FILEMANAGER_DELETE_FILE_SELECTION';\n  static FILEMANAGER_DELETE_FILE_SELECTION_SUCCESS = 'FILEMANAGER_DELETE_FILE_SELECTION_SUCCESS';\n  static FILEMANAGER_INVERSE_FILE_SELECTION = 'FILEMANAGER_INVERSE_FILE_SELECTION';\n  static FILEMANAGER_LOAD_FILES = 'FILEMANAGER_LOAD_FILES';\n  static FILEMANAGER_LOAD_FILES_SUCCESS = 'FILEMANAGER_LOAD_FILES_SUCCESS';\n  static FILEMANAGER_MOVE_FILES_SUCCESS = 'FILEMANAGER_MOVE_FILES_SUCCESS';\n  static FILEMANAGER_MOVE_FILES_ERROR = 'FILEMANAGER_MOVE_FILES_ERROR';\n  static FILEMANAGER_SELECT_ALL = 'FILEMANAGER_SELECT_ALL';\n  static FILEMANAGER_SELECT_FILE = 'FILEMANAGER_SELECT_FILE';\n  static FILEMANAGER_UNSELECT_FILE = 'FILEMANAGER_UNSELECT_FILE';\n  static FILEMANAGER_UNSELECT_ALL = 'FILEMANAGER_UNSELECT_ALL';\n  static FILEMANAGER_UPLOAD_FILE = 'FILEMANAGER_UPLOAD_FILE';\n  static FILEMANAGER_UPLOAD_FILE_ERROR = 'FILEMANAGER_UPLOAD_FILE_ERROR';\n  static FILEMANAGER_UPLOAD_FILE_SUCCESS = 'FILEMANAGER_UPLOAD_FILE_SUCCESS';\n\n\n  /**\n   * @Deprecated - Will be removed in 3.0.0, use new ChooseFilesAction() instead of it\n   */\n  public chooseFiles(files: IOuterFile[]): IFileManagerAction {\n    return {\n      type: FileManagerActionsService.FILEMANAGER_CHOOSE_FILES,\n      payload: {files}\n    };\n  }\n\n  /**\n   * @Deprecated - Will be removed in 3.0.0, use new CropFileAction() instead of it\n   */\n  public cropFile(file: IFileModel, bounds: ICropBounds): IFileManagerAction {\n    return {\n      type: FileManagerActionsService.FILEMANAGER_CROP_FILE,\n      payload: {\n        file: file,\n        bounds: bounds\n      }\n    };\n  }\n\n  /**\n   * @Deprecated - Will be removed in 3.0.0, use new CropFileSuccessAction() instead of it\n   */\n  public cropFileSuccess(file: IFileModel): IFileManagerAction {\n    return {\n      type: FileManagerActionsService.FILEMANAGER_CROP_FILE_SUCCESS,\n      payload: {\n        file: file\n      }\n    };\n  }\n\n  /**\n   * @Deprecated - Will be removed in 3.0.0, use new CropFileErrorAction() instead of it\n   */\n  public cropFileError(file: IFileModel): IFileManagerAction {\n    return {\n      type: FileManagerActionsService.FILEMANAGER_CROP_FILE_ERROR,\n      payload: {\n        file: file\n      }\n    };\n  }\n\n  /**\n   * @Deprecated - Will be removed in 3.0.0, use new DeleteFileAction() instead of it\n   */\n  public deleteFile(file: IFileModel): IFileManagerAction {\n    return {\n      type: FileManagerActionsService.FILEMANAGER_DELETE_FILE,\n      payload: {\n        file: file\n      }\n    };\n  }\n\n  /**\n   * @Deprecated - Will be removed in 3.0.0, use new DeleteFileSuccessAction() instead of it\n   */\n  public deleteFileSuccess(file: IFileModel): IFileManagerAction {\n    return {\n      type: FileManagerActionsService.FILEMANAGER_DELETE_FILE_SUCCESS,\n      payload: {\n        file: file\n      }\n    };\n  }\n\n  /**\n   * @Deprecated - Will be removed in 3.0.0, use new DeleteSelectedFilesAction() instead of it\n   */\n  public deleteSelectedFiles(fileIds: string[]): IFileManagerAction {\n    return {\n      type: FileManagerActionsService.FILEMANAGER_DELETE_FILE_SELECTION,\n      payload: {fileIds}\n    };\n  }\n\n  /**\n   * @Deprecated - Will be removed in 3.0.0, use new DeleteSelectedFilesSuccessAction() instead of it\n   */\n  public deleteSelectedFilesSuccess(files: IOuterFile[]): IFileManagerAction {\n    return {\n      type: FileManagerActionsService.FILEMANAGER_DELETE_FILE_SELECTION_SUCCESS,\n      payload: {files}\n    };\n  }\n\n  /**\n   * @Deprecated - Will be removed in 3.0.0, use new LoadFilesAction() instead of it\n   */\n  public loadFiles(folderId: string): IFileManagerAction {\n    return {\n      type: FileManagerActionsService.FILEMANAGER_LOAD_FILES,\n      payload: {\n        folderId: folderId\n      }\n    };\n  }\n\n  /**\n   * @Deprecated - Will be removed in 3.0.0, use new InverseFilesSelectionAction() instead of it\n   */\n  public inverseFileSelection(): IFileManagerAction {\n    return {\n      type: FileManagerActionsService.FILEMANAGER_INVERSE_FILE_SELECTION,\n      payload: {}\n    };\n  }\n\n  /**\n   * @Deprecated - Will be removed in 3.0.0, use new LoadFilesSuccessAction() instead of it\n   */\n  public loadFilesSuccess(folderId: string, files: IOuterFile[]): IFileManagerAction {\n    return {\n      type: FileManagerActionsService.FILEMANAGER_LOAD_FILES_SUCCESS,\n      payload: {\n        folderId: folderId,\n        files: files\n      }\n    };\n  }\n\n  /**\n   * @Deprecated - Will be removed in 3.0.0, use new MoveFilesSuccessAction() instead of it\n   */\n  public moveFileSuccess(files: IOuterFile[], folderId: string) {\n    return {\n      type: FileManagerActionsService.FILEMANAGER_MOVE_FILES_SUCCESS,\n      payload: {folderId, files}\n    };\n  }\n\n  /**\n   * @Deprecated - Will be removed in 3.0.0, use new MoveFilesErrorAction() instead of it\n   */\n  public moveFileError(files: IOuterFile[]): IFileManagerAction {\n    return {\n      type: FileManagerActionsService.FILEMANAGER_MOVE_FILES_ERROR,\n      payload: {files}\n    };\n  }\n\n  /**\n   * @Deprecated - Will be removed in 3.0.0, use new SelectAllFilesAction() instead of it\n   */\n  public selectAllFiles(): IFileManagerAction {\n    return {\n      type: FileManagerActionsService.FILEMANAGER_SELECT_ALL,\n      payload: {}\n    };\n  }\n\n  /**\n   * @Deprecated - Will be removed in 3.0.0, use new SelectFileAction() instead of it\n   */\n  public selectFile(file: IFileModel): IFileManagerAction {\n    return {\n      type: FileManagerActionsService.FILEMANAGER_SELECT_FILE,\n      payload: {\n        file: file\n      }\n    };\n  }\n\n  /**\n   * @Deprecated - Will be removed in 3.0.0, use new UnSelectAllFilesAction() instead of it\n   */\n  public unSelectAll(): IFileManagerAction {\n    return {\n      type: FileManagerActionsService.FILEMANAGER_UNSELECT_ALL,\n      payload: {}\n    };\n  }\n\n  /**\n   * @Deprecated - Will be removed in 3.0.0, use new UnSelectFileAction() instead of it\n   */\n  public unSelectFile(file: IFileModel): IFileManagerAction {\n    return {\n      type: FileManagerActionsService.FILEMANAGER_UNSELECT_FILE,\n      payload: {\n        file: file\n      }\n    };\n  }\n\n  /**\n   * @Deprecated - Will be removed in 3.0.0, use new UploadFilesAction() instead of it\n   */\n  public upload(file: IOuterFile): IFileManagerAction {\n    return {\n      type: FileManagerActionsService.FILEMANAGER_UPLOAD_FILE,\n      payload: {\n        files: [file]\n      }\n    };\n  }\n\n  /**\n   * @Deprecated - Will be removed in 3.0.0, use new UploadFilesSuccessAction() instead of it\n   */\n  public uploadSuccess(file: IOuterFile): IFileManagerAction {\n    return {\n      type: FileManagerActionsService.FILEMANAGER_UPLOAD_FILE_SUCCESS,\n      payload: {\n        files: [file]\n      }\n    };\n  }\n\n  /**\n   * @Deprecated - Will be removed in 3.0.0, use new UploadFilesErrorAction() instead of it\n   */\n  public uploadError(file: IOuterFile): IFileManagerAction {\n    return {\n      type: FileManagerActionsService.FILEMANAGER_UPLOAD_FILE_ERROR,\n      payload: {\n        files: [file]\n      }\n    };\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {Store} from '@ngrx/store';\nimport {IFileManagerState} from './file-manager.reducer';\nimport {FileManagerActionsService} from './fileManagerActions.service';\nimport {IFileModel} from '../filesList/interface/IFileModel';\nimport {IOuterFile} from '../filesList/interface/IOuterFile';\nimport {ICropBounds} from '../crop/ICropBounds';\nimport {\n  ChooseFilesAction,\n  CropFileAction,\n  DeleteFileAction,\n  DeleteSelectedFilesAction,\n  InverseFilesSelectionAction,\n  LoadFilesAction,\n  SelectAllFilesAction,\n  SelectFileAction,\n  UnSelectAllFilesAction,\n  UnSelectFileAction, UploadFilesAction, UploadFilesErrorAction, UploadFilesSuccessAction\n} from './file-manager.action';\n\n/**\n * @Deprecated - Will be removed in 3.0.0\n */\n@Injectable()\nexport class FileManagerDispatcherService {\n\n  constructor(private store: Store<IFileManagerState>, private fileManagerActions: FileManagerActionsService) {\n  }\n\n  /**\n   * @Deprecated - Will be removed in 3.0.0, dispatch ChooseFilesAction instead of it\n   */\n  public chooseFiles(files: IOuterFile[]): void {\n    this.store.dispatch(new ChooseFilesAction({files}));\n  }\n\n  /**\n   * @Deprecated - Will be removed in 3.0.0, dispatch CropFileAction instead of it\n   */\n  public cropFile(file: IFileModel, bounds: ICropBounds): void {\n    this.store.dispatch(new CropFileAction({bounds, file}));\n  }\n\n  /**\n   * @Deprecated - Will be removed in 3.0.0, dispatch DeleteFileAction instead of it\n   */\n  public deleteFile(file: IFileModel): void {\n    this.store.dispatch(new DeleteFileAction({file}));\n  }\n\n  /**\n   * @Deprecated - Will be removed in 3.0.0, dispatch DeleteSelectedFilesAction instead of it\n   */\n  public deleteSelectedFiles(files: string[]): void {\n    this.store.dispatch(new DeleteSelectedFilesAction({files}));\n  }\n\n  /**\n   * @Deprecated - Will be removed in 3.0.0, dispatch InverseFilesSelectionAction instead of it\n   */\n  public inverseSelection(): void {\n    this.store.dispatch(new InverseFilesSelectionAction());\n  }\n\n  /**\n   * @Deprecated - Will be removed in 3.0.0, dispatch LoadFilesAction instead of it\n   */\n  public loadFiles(folderId: string | null): void {\n    this.store.dispatch(new LoadFilesAction({folderId}));\n  }\n\n  /**\n   * @Deprecated - Will be removed in 3.0.0, dispatch SelectAllFilesAction instead of it\n   */\n  public selectAllFiles(): void {\n    this.store.dispatch(new SelectAllFilesAction());\n  }\n\n  /**\n   * @Deprecated - Will be removed in 3.0.0, dispatch SelectFileAction instead of it\n   */\n  public selectFile(file: IFileModel): void {\n    this.store.dispatch(new SelectFileAction({file}));\n  }\n\n  /**\n   * @Deprecated - Will be removed in 3.0.0, dispatch UnSelectAllFilesAction instead of it\n   */\n  public unSelectAllFiles(): void {\n    this.store.dispatch(new UnSelectAllFilesAction());\n  }\n\n  /**\n   * @Deprecated - Will be removed in 3.0.0, dispatch UnSelectFileAction instead of it\n   */\n  public unSelectFile(file: IFileModel): void {\n    this.store.dispatch(new UnSelectFileAction({file}));\n  }\n\n  /**\n   * @Deprecated - Will be removed in 3.0.0, dispatch UploadFilesErrorAction instead of it\n   */\n  public uploadError(file: IOuterFile) {\n    this.store.dispatch(new UploadFilesErrorAction({files: [file]}));\n  }\n\n  /**\n   * @Deprecated - Will be removed in 3.0.0, dispatch UploadFilesAction instead of it\n   */\n  public upload(file: IOuterFile) {\n    this.store.dispatch(new UploadFilesAction({files: [file]}));\n  }\n\n  /**\n   * @Deprecated - Will be removed in 3.0.0, dispatch UploadFilesSuccessAction instead of it\n   */\n  public uploadSuccess(file: IOuterFile) {\n    this.store.dispatch(new UploadFilesSuccessAction({files: [file]}));\n  }\n}\n","import {IOuterNode} from '@rign/angular2-tree';\nimport {IFileDataProperties} from '../services/imageDataConverter.service';\n\nexport const FILEMANAGER_TREE_NAME = 'fileManagerTree';\n\nexport abstract class AbstractFileManagerApiService {\n\n  protected treeName = FILEMANAGER_TREE_NAME;\n  protected fileManagerName = 'fileManagerFiles';\n\n\n  protected nodes: IOuterNode[];\n  protected files: IFileDataProperties[];\n\n  protected currentNodeId = '';\n}\n","import {Injectable} from '@angular/core';\nimport {IOuterNode, INodeService} from '@rign/angular2-tree';\nimport {UUID} from 'angular2-uuid';\nimport {IFileManagerApi} from './IFileManagerApi';\nimport {IOuterFile} from '../filesList/interface/IOuterFile';\nimport {IFileDataProperties} from '../services/imageDataConverter.service';\nimport {ICropBounds} from '../crop/ICropBounds';\nimport {FilemanagerNotifcations} from '../services/FilemanagerNotifcations';\nimport {AbstractFileManagerApiService, FILEMANAGER_TREE_NAME} from './fileManagerApiAbstract.class';\nimport {empty, Observable, of, throwError} from 'rxjs';\n\n@Injectable()\nexport class FileManagerApiService extends AbstractFileManagerApiService implements IFileManagerApi, INodeService {\n\n  public constructor(private filemanagerNotfication: FilemanagerNotifcations) {\n    super();\n  }\n\n  public get treeId(): string {\n    return FILEMANAGER_TREE_NAME;\n  }\n\n  public load(nodeId = ''): Observable<IOuterNode[]> {\n    if (!this.nodes) {\n      this.nodes = this.getAllDataFromLocalStorage();\n    }\n\n    const nodes = this.getChildren(nodeId);\n\n    return of(nodes);\n  }\n\n  public add(node: IOuterNode, parentNodeId: string = null): Observable<IOuterNode> {\n    node.parentId = parentNodeId;\n    node.id = UUID.UUID();\n\n    this.nodes.push(node);\n\n    if (this.saveNodes()) {\n      return of(node);\n    } else {\n      return empty();\n    }\n\n  }\n\n  public move(srcNode: IOuterNode, targetNode: IOuterNode | null): Observable<IOuterNode> {\n    const srcId = srcNode.id;\n    const targetId = targetNode ? targetNode.id : '';\n\n    const index = this.findIndexByNodeId(srcId);\n\n    this.nodes[index].parentId = targetId;\n\n    if (this.saveNodes()) {\n      return of(this.nodes[index]);\n    } else {\n      return empty();\n    }\n\n  }\n\n  public update(node: IOuterNode): Observable<IOuterNode> {\n    const index = this.findIndexByNodeId(node.id);\n\n    this.nodes[index] = node;\n\n    if (this.saveNodes()) {\n      return of(node);\n    } else {\n      return empty();\n    }\n  }\n\n  public remove(nodeId: string): Observable<IOuterNode> {\n    const index = this.findIndexByNodeId(nodeId);\n    const node = this.nodes[index];\n\n    const hasChildren = this.getChildren(nodeId).length > 0;\n\n    if (!hasChildren) {\n      this.nodes.splice(index, 1);\n\n      this.saveNodes();\n\n      return of(node);\n    } else {\n      return throwError('Node is not empty');\n    }\n  }\n\n  public setAllNodes(nodes: IOuterNode[]): void {\n    this.nodes = [...nodes];\n\n    this.saveNodes();\n  }\n\n  /**\n   * Crop file\n   */\n  public cropFile(file: IOuterFile, bounds: ICropBounds): Observable<IOuterFile> {\n    return throwError('This functionality is not available with LocalStorage');\n  }\n\n  /**\n   * Load files from directory\n   */\n  public loadFiles(nodeId = ''): Observable<IOuterFile[]> {\n    this.currentNodeId = nodeId;\n\n    if (!this.files) {\n      this.files = this.getAllFileDataFromLocalStorage();\n    }\n\n    const files = this.getFilesFromFolder(nodeId);\n\n    const newFiles: IOuterFile[] = files.map((file: IFileDataProperties) => {\n      return this.convertLocalData2IOuterFile(file);\n    });\n\n    return of(newFiles);\n  }\n\n  public removeFile(file: IOuterFile): Observable<boolean> {\n    const index = this.findIndexByFileId(file.id.toString());\n\n    if (index === -1) {\n      return of(false);\n    }\n\n    this.files.splice(index, 1);\n    this.saveFiles();\n\n    return of(true);\n  }\n\n  public removeSelectedFiles(selectedFiles: string[]) {\n    const numberOfFiles = this.files.length;\n\n    selectedFiles.forEach((fileId: string) => {\n      const index = this.findIndexByFileId(fileId);\n\n      if (index > -1) {\n        this.files.splice(index, 1);\n      }\n    });\n\n    this.saveFiles();\n\n    return of((this.files.length + selectedFiles.length === numberOfFiles));\n  }\n\n  public uploadFile(file: IOuterFile): Observable<IOuterFile> {\n    const fileData = this.convertIOuterFile2LocalData(file);\n    this.files.push(fileData);\n\n    if (this.saveFiles()) {\n      return of(this.convertLocalData2IOuterFile(fileData));\n    } else {\n      return Observable.throw('Upload error');\n    }\n  }\n\n  public moveFile(files: IOuterFile[], node: IOuterNode = null): Observable<IOuterFile[]> {\n    const ids: string[] = files.map(file => file.id.toString());\n    const folderId = node ? node.id.toString() : '';\n\n    const movedFiles = this.files.filter(file => ids.indexOf(file.id.toString()) > -1);\n    const errorMsg = 'Can not move file to the same folder';\n\n    const isMovedToSameFolder = false;\n\n    movedFiles.forEach((file) => {\n      if (node) {\n        if (node.id === file.folderId) {\n        }\n      } else {\n        if (file.folderId === '' || file.folderId === null) {\n          return Observable.throw(errorMsg);\n        }\n      }\n\n\n      file.folderId = folderId;\n    });\n\n    if (isMovedToSameFolder) {\n        return Observable.throw(errorMsg);\n    }\n\n    if (this.saveFiles()) {\n      return of(movedFiles.map(file => this.convertLocalData2IOuterFile(file)));\n    } else {\n      return Observable.throw('Move files error');\n    }\n  }\n\n  private findIndexByNodeId(nodeId: string): number {\n    return this.nodes.findIndex((node) => {\n      return node.id === nodeId;\n    });\n  }\n\n  private findIndexByFileId(fileId: string): number {\n    return this.files.findIndex((file) => file.id === fileId);\n  }\n\n  private getChildren(nodeId: string): IOuterNode[] {\n    return this.nodes.filter((node: IOuterNode) => node.parentId === nodeId);\n  }\n\n  private getFilesFromFolder(nodeId: string): IFileDataProperties[] {\n    return this.files.filter((file: IFileDataProperties) => file.folderId === nodeId);\n  }\n\n  protected getAllDataFromLocalStorage(): IOuterNode[] {\n    try {\n      const data = localStorage.getItem(this.treeName);\n\n      if (data) {\n        return JSON.parse(data);\n      }\n\n      return [];\n\n    } catch (e) {\n      return [];\n    }\n  }\n\n  protected getAllFileDataFromLocalStorage(): IFileDataProperties[] {\n    try {\n      const data = localStorage.getItem(this.fileManagerName);\n\n      if (data) {\n        return JSON.parse(data);\n      }\n\n      return [];\n\n    } catch (e) {\n      return [];\n    }\n  }\n\n  private saveNodes() {\n    try {\n      localStorage.setItem(this.treeName, JSON.stringify(this.nodes));\n\n      return true;\n    } catch (e) {\n      this.filemanagerNotfication.sendNotification({\n        type: 'error',\n        title: 'State is not saved.',\n        message: 'Reload previous state.'\n      });\n\n      this.files = null;\n      this.nodes = null;\n\n      this.load();\n\n      return false;\n    }\n  }\n\n  private saveFiles(): boolean {\n    try {\n      localStorage.setItem(this.fileManagerName, JSON.stringify(this.files));\n\n      return true;\n    } catch (e) {\n      this.filemanagerNotfication.sendNotification({\n        type: 'error',\n        title: 'State is not saved.',\n        message: 'Reload previous state.'\n      });\n\n      const nodeId = this.files[(this.files.length - 1)].folderId || null;\n\n      this.files = null;\n\n      this.load(nodeId);\n\n      return false;\n    }\n  }\n\n  private convertLocalData2IOuterFile(file: IFileDataProperties): IOuterFile {\n    return {\n      id: file.id,\n      folderId: file.folderId,\n      name: file.name,\n      thumbnailUrl: file.data,\n      url: file.data,\n      width: file.width,\n      height: file.height,\n      type: file.type,\n      size: file.size\n    };\n  }\n\n  private convertIOuterFile2LocalData(file: IOuterFile): IFileDataProperties {\n    return {\n      id: file.id.toString(),\n      folderId: file.folderId,\n      name: file.name,\n      type: file.type,\n      data: file.data,\n      size: file.size,\n      width: file.width,\n      height: file.height\n    };\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {TreeActionTypes} from '@rign/angular2-tree';\nimport {Actions, Effect, ofType} from '@ngrx/effects';\nimport {IOuterNode, TreeMoveNodeAction} from '@rign/angular2-tree';\nimport {FileManagerActionsService, IFileManagerAction} from './fileManagerActions.service';\nimport {IOuterFile} from '../filesList/interface/IOuterFile';\nimport {empty, Observable, of} from 'rxjs';\nimport {IFileModel} from '../filesList/interface/IFileModel';\nimport {ICropBounds} from '../crop/ICropBounds';\nimport {FileManagerApiService} from './fileManagerApi.service';\nimport {FilemanagerNotifcations} from '../services/FilemanagerNotifcations';\nimport {catchError, filter, map, switchMap} from 'rxjs/operators';\nimport {\n  CropFileAction,\n  CropFileErrorAction,\n  CropFileSuccessAction,\n  DeleteFileSuccessAction, DeleteSelectedFilesSuccessAction, FileManagerAction, LoadFilesAction,\n  LoadFilesSuccessAction, MoveFilesErrorAction, MoveFilesSuccessAction, UploadFilesErrorAction, UploadFilesSuccessAction\n} from './file-manager.action';\n\n@Injectable()\nexport class FileManagerEffectsService {\n\n  @Effect()\n  public loadFiles$ = this.actions$\n    .pipe(\n      ofType(FileManagerActionsService.FILEMANAGER_LOAD_FILES),\n      switchMap((action: IFileManagerAction) => this.loadFiles(action.payload.folderId)\n        .pipe(\n          map((files: IOuterFile[]): FileManagerAction => {\n            return new LoadFilesSuccessAction({files});\n          }),\n          catchError((e) => {\n            return of(this.onLoadFilesError(action.payload.folderId));\n          })\n        )\n      )\n    );\n\n  @Effect()\n  public cropFile$ = this.actions$\n    .pipe(\n      ofType(FileManagerActionsService.FILEMANAGER_CROP_FILE),\n      switchMap((action: IFileManagerAction) => this.cropFile(action.payload.file, action.payload.bounds)\n        .pipe(\n          map((result: IOuterFile): FileManagerAction => {\n            this.filemanagerNotfication.sendNotification({\n              type: 'success',\n              title: 'Crop Image.',\n              message: 'Image has been cropped.'\n            });\n            return new CropFileSuccessAction({file: action.payload.file});\n          }),\n          catchError(() => of(new CropFileErrorAction({file: action.payload.file})))\n        )\n      )\n    );\n\n  @Effect()\n  public deleteFile$ = this.actions$\n    .pipe(\n      ofType(FileManagerActionsService.FILEMANAGER_DELETE_FILE),\n      switchMap((action: IFileManagerAction) => this.deleteFile(action.payload.file)\n        .pipe(\n          map((result: boolean): FileManagerAction => {\n            return new DeleteFileSuccessAction({file: action.payload.file});\n          }),\n          catchError(() => of(this.onDeleteFileError(action.payload.file)))\n        )\n      )\n    );\n\n  @Effect()\n  public deleteFilesSelection$ = this.actions$\n    .pipe(\n      ofType(FileManagerActionsService.FILEMANAGER_DELETE_FILE_SELECTION),\n      switchMap((action: IFileManagerAction) => this.deleteFilesSelection(action.payload.fileIds)\n        .pipe(\n          map((result: boolean): FileManagerAction => {\n            return new DeleteSelectedFilesSuccessAction({files: action.payload.fileIds});\n          }),\n          catchError(() => of(this.onDeleteFilesSelectionError(action.payload.files)))\n        )\n      )\n    );\n\n\n  @Effect()\n  public uploadFile$ = this.actions$\n    .pipe(\n      ofType(FileManagerActionsService.FILEMANAGER_UPLOAD_FILE),\n      switchMap((action: IFileManagerAction) => this.uploadFile(action.payload.files[0])\n        .pipe(\n          map((result: IOuterFile): FileManagerAction => {\n            return new UploadFilesSuccessAction({files: [result]});\n          }),\n          catchError(() => {\n            return empty();\n          })\n        )\n      )\n    );\n\n  @Effect()\n  public moveFile$ = this.actions$\n    .pipe(\n      ofType(TreeActionTypes.TREE_MOVE_NODE),\n      filter((action: TreeMoveNodeAction) => {\n        return action.payload.sourceOfDroppedData === 'FILE';\n      }),\n      switchMap((action: TreeMoveNodeAction) => this.moveFiles([<IOuterFile>action.payload.oldNode], action.payload.node)\n        .pipe(\n          map((result: IOuterFile[]): FileManagerAction => {\n            const folderId = (<IOuterFile>action.payload.oldNode).folderId;\n\n            return new MoveFilesSuccessAction({files: result, folderId});\n          }),\n          catchError(() => {\n            return of(new MoveFilesErrorAction({files: [<IOuterFile>action.payload.oldNode]}));\n          })\n        )\n      )\n    );\n\n  @Effect()\n  public filesMoveSuccess$ = this.actions$\n    .pipe(\n      ofType(FileManagerActionsService.FILEMANAGER_MOVE_FILES_SUCCESS),\n      map((action: MoveFilesSuccessAction) => {\n        this.onMoveFilesSuccess();\n\n        return new LoadFilesAction({folderId: action.payload.folderId});\n      })\n    );\n\n  public uploadError$ = this.actions$\n    .pipe(\n      ofType(FileManagerActionsService.FILEMANAGER_UPLOAD_FILE_ERROR),\n      map((action: UploadFilesErrorAction) => {\n        this.filemanagerNotfication.sendNotification({\n          type: 'alert',\n          title: 'File upload',\n          message: `${action.payload.files[0].name} exists on the server in this directory`\n        });\n      })\n    );\n\n  public cropFileSuccess$: Observable<CropFileSuccessAction>;\n  public deleteFileSuccess$: Observable<DeleteFileSuccessAction>;\n\n  constructor(private actions$: Actions,\n              private fileManagerActions: FileManagerActionsService,\n              private filemanagerNotfication: FilemanagerNotifcations,\n              private fileManagerApiService: FileManagerApiService) {\n\n    this.cropFileSuccess$ = this.actions$\n      .pipe(\n        ofType(FileManagerActionsService.FILEMANAGER_CROP_FILE_SUCCESS)\n      );\n\n    this.deleteFileSuccess$ = this.actions$\n      .pipe(\n        ofType(FileManagerActionsService.FILEMANAGER_DELETE_FILE_SUCCESS)\n      );\n\n    this.actions$\n      .pipe(\n        ofType(FileManagerActionsService.FILEMANAGER_CROP_FILE_ERROR)\n      )\n      .subscribe((action: IFileManagerAction) => {\n        this.onCropFileError(action.payload.file);\n      });\n\n    this.actions$\n      .pipe(\n        ofType(FileManagerActionsService.FILEMANAGER_MOVE_FILES_ERROR)\n      )\n      .subscribe((action: IFileManagerAction) => {\n        this.onMoveFilesError();\n      });\n  }\n\n  protected cropFile(file: IFileModel, bounds: ICropBounds): Observable<IOuterFile> {\n    return this.fileManagerApiService.cropFile(file.toJSON(), bounds);\n  }\n\n  protected deleteFile(file: IFileModel): Observable<boolean> {\n    return this.fileManagerApiService.removeFile(file.toJSON());\n  }\n\n  protected deleteFilesSelection(files: string[]): Observable<boolean> {\n    return this.fileManagerApiService.removeSelectedFiles(files);\n  }\n\n  protected loadFiles(folderId: string | null): Observable<IOuterFile[]> {\n    return this.fileManagerApiService.loadFiles(folderId);\n  }\n\n  protected uploadFile(file: IOuterFile): Observable<IOuterFile> {\n    return this.fileManagerApiService.uploadFile(file);\n  }\n\n  protected moveFiles(files: IOuterFile[], folder: IOuterNode = null): Observable<IOuterFile[]> {\n    return this.fileManagerApiService.moveFile(files, folder);\n  }\n\n  protected onCropFileError(file: IFileModel): void {\n    this.filemanagerNotfication.sendNotification({\n      type: 'alert',\n      title: 'Crop Image',\n      message: '[FILEMANAGER] Can not crop file'\n    });\n  }\n\n  protected onDeleteFileError(file: IFileModel): void {\n    this.filemanagerNotfication.sendNotification({\n      type: 'error',\n      title: 'Delete file',\n      message: '[FILEMANAGER] Can not delete file' + file.name\n    });\n  }\n\n  protected onDeleteFilesSelectionError(files: IOuterFile[]): void {\n    this.filemanagerNotfication.sendNotification({\n      type: 'error',\n      title: 'Delete selected files',\n      message: '[FILEMANAGER] Not all files were deleted'\n    });\n  }\n\n  protected onLoadFilesError(folderId: string): void {\n    this.filemanagerNotfication.sendNotification({\n      type: 'error',\n      title: 'Load files',\n      message: '[FILEMANAGER] Can not load files for folder ' + folderId\n    });\n  }\n\n  protected onMoveFilesSuccess(): void {\n    this.filemanagerNotfication.sendNotification({\n      type: 'success',\n      title: 'Move files',\n      message: 'File was successfully moved to folder'\n    });\n  }\n\n  protected onMoveFilesError(): void {\n    this.filemanagerNotfication.sendNotification({\n      type: 'error',\n      title: 'Move files',\n      message: 'File was not successfully moved to new folder'\n    });\n  }\n}\n","import {Component, Input, Output, EventEmitter, ChangeDetectionStrategy, ViewEncapsulation} from '@angular/core';\nimport {FileModel} from './file.model';\nimport {IFileEvent} from './interface/IFileEvent';\nimport {IFileModel} from './interface/IFileModel';\nimport {FileManagerConfiguration} from '../configuration/fileManagerConfiguration.service';\nimport {IFileManagerAction} from '../store/fileManagerActions.service';\nimport {FileManagerDispatcherService} from '../store/file-manager-dispatcher.service';\nimport {NotificationsService} from 'angular2-notifications';\nimport {FileManagerEffectsService} from '../store/fileManagerEffects.service';\nimport {FILEMANAGER_TREE_NAME} from '../store/fileManagerApiAbstract.class';\nimport {Store} from '@ngrx/store';\nimport {IFileManagerState} from '../store/file-manager.reducer';\nimport {DeleteFileAction, SelectFileAction, UnSelectFileAction} from '../store/file-manager.action';\n\n@Component({\n  selector: 'ri-files-list',\n  templateUrl: './files.html',\n  styleUrls: ['./files-list.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\n\nexport class FilesListComponent {\n  @Input()\n  public files: FileModel[];\n\n  @Input()\n  public selectedFiles: string[];\n\n  @Output()\n  public onPreviewFile = new EventEmitter();\n\n  @Output()\n  public onCropFile = new EventEmitter();\n\n  @Output()\n  public onSelectFile = new EventEmitter();\n\n  public removeTitle = 'Remove file';\n\n  public dragZone = FILEMANAGER_TREE_NAME;\n\n  public constructor(public configuration: FileManagerConfiguration,\n                     private store: Store<IFileManagerState>,\n                     private fileManagerDispatcher: FileManagerDispatcherService,\n                     notifications: NotificationsService,\n                     fileManagerEffects: FileManagerEffectsService) {\n\n    fileManagerEffects.deleteFileSuccess$\n      .subscribe((action: IFileManagerAction) => {\n        notifications.success('File delete', `${action.payload.file.name} has been deleted`);\n      });\n  }\n\n  /**\n   * Fired when clicked on button \"delete file\"\n   *\n   * @param file\n   */\n  public deleteFile(file: IFileModel) {\n    this.store.dispatch(new DeleteFileAction({file}));\n  }\n\n  public getRemoveMessage(file: IFileModel) {\n    return 'You are try to delete <b>' + file.name + '</b>. Are you sure?';\n  }\n\n  public openPreview(fileEvent: IFileEvent): void {\n    this.onPreviewFile.emit(fileEvent);\n  }\n\n  public openCrop(fileEvent: IFileEvent): void {\n    this.onCropFile.emit(fileEvent);\n  }\n\n  public toggleSelection(file: IFileModel): void {\n    if (file.selected) {\n      this.store.dispatch(new UnSelectFileAction({file}));\n    } else {\n      this.store.dispatch(new SelectFileAction({file}));\n    }\n  }\n\n  public isSelected(file: FileModel): boolean {\n    return this.selectedFiles.indexOf(file.getId().toString()) > -1;\n  }\n}\n","import {Component, Input, OnChanges, HostListener} from '@angular/core';\nimport {IFileModel} from '../filesList/interface/IFileModel';\nimport {FileModel} from '../filesList/file.model';\n\n@Component({\n  selector: 'ri-file-preview',\n  templateUrl: './preview.html'\n})\n\nexport class PreviewComponent implements OnChanges {\n  /**\n   * Collection of files\n   */\n  @Input() files: IFileModel[];\n\n  /**\n   * Current viewed file\n   */\n  @Input() file: IFileModel;\n\n  /**\n   * Current index\n   */\n  public currentIndex = 0;\n\n  public length = 0;\n\n  ngOnChanges() {\n    this.length = this.files.length;\n\n    const selectedFiles = this.files\n      .filter((file: FileModel) => file.getId() === this.file.getId());\n\n    this.currentIndex = selectedFiles.length === 1 ? this.files.indexOf(selectedFiles[0]) : -1;\n  }\n\n  public next() {\n    if (this.currentIndex < this.length - 1) {\n      this.currentIndex++;\n    }\n  }\n\n  public prev() {\n    if (this.currentIndex > 0) {\n      this.currentIndex--;\n    }\n  }\n\n  @HostListener('window:keydown', ['$event'])\n  public keyEvent(event: KeyboardEvent) {\n    if (event.keyCode === 37 || event.keyCode === 74) {\n      this.prev();\n    }\n\n    if (event.keyCode === 39 || event.keyCode === 75) {\n      this.next();\n    }\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {BehaviorSubject} from 'rxjs';\n\n@Injectable()\nexport class SearchFilterService {\n  /**\n   * File type filter\n   */\n  public filter$: BehaviorSubject<string> = new BehaviorSubject('');\n\n  public getValue(): string {\n    return this.filter$.getValue();\n  }\n\n  public setValue(value: string) {\n    this.filter$.next(value);\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {BehaviorSubject} from 'rxjs';\nimport {IFileTypeFilter} from '../toolbar/interface/IFileTypeFilter';\n\n@Injectable()\nexport class FileTypeFilterService {\n\n  /**\n   * File type filter\n   */\n  public filter$: BehaviorSubject<IFileTypeFilter | null> = new BehaviorSubject(null);\n\n  public getValue(): IFileTypeFilter | null {\n    return this.filter$.getValue();\n  }\n\n  public setValue(value: IFileTypeFilter | null) {\n    this.filter$.next(value);\n  }\n}\n","import {IOuterFile} from '../filesList/interface/IOuterFile';\nimport {createFeatureSelector, MemoizedSelector} from '@ngrx/store';\nimport {\n  CropFileSuccessAction, DeleteFileSuccessAction,\n  FileManagerAction,\n  FileManagerActionTypes,\n  LoadFilesSuccessAction,\n  MoveFilesSuccessAction, SelectFileAction, UnSelectFileAction, UploadFilesSuccessAction\n} from './file-manager.action';\n\nexport interface StoreEntities {\n  [key: string]: IOuterFile;\n}\n\nexport interface IFileManagerState {\n  entities: StoreEntities;\n  files: string[];\n  selectedFiles: string[];\n}\n\n\nfunction cropFile(state: IFileManagerState, action: CropFileSuccessAction): IFileManagerState {\n  const file = action.payload.file;\n  const id = file.getId().toString();\n\n  state.entities[id] = <IOuterFile>{...file.toJSON()};\n\n  return {\n    entities: state.entities,\n    files: state.files,\n    selectedFiles: state.selectedFiles\n  };\n}\n\nfunction inverseFilesSelection(state: IFileManagerState): IFileManagerState {\n  return {\n    entities: state.entities,\n    files: state.files,\n    selectedFiles: state.files.filter((i: string) => state.selectedFiles.indexOf(i) === -1)\n  };\n}\n\nfunction loadFiles(state: IFileManagerState, action: LoadFilesSuccessAction): IFileManagerState {\n  const entities: StoreEntities = {};\n  const files: string[] = [];\n\n  action.payload.files.map((file: IOuterFile) => {\n    const id = file.id.toString();\n\n    entities[id] = file;\n    files.push(id);\n  });\n\n\n  return {\n    entities: entities,\n    files: files,\n    selectedFiles: []\n  };\n}\n\n\nfunction moveFiles(state: IFileManagerState, action: MoveFilesSuccessAction): IFileManagerState {\n  const files = action.payload.files;\n  const ids: string[] = files.map(file => file.id.toString());\n  const folderId = action.payload.folderId ? action.payload.folderId.toString() : '';\n\n  const entities = {...state.entities};\n\n  ids.forEach((id: string) => {\n    const oldEntity = {...entities[id]};\n    oldEntity.folderId = folderId;\n\n    entities[id] = oldEntity;\n  });\n\n  return {\n    entities: entities,\n    files: state.files.filter((i: string) => ids.indexOf(i) === -1),\n    selectedFiles: state.selectedFiles.filter((i: string) => ids.indexOf(i) === -1)\n  };\n}\n\nfunction removeFile(state: IFileManagerState, action: DeleteFileSuccessAction): IFileManagerState {\n  const id = action.payload.file.getId();\n\n  delete state.entities[id];\n\n  return {\n    entities: state.entities,\n    files: state.files.filter((i: string) => i !== id),\n    selectedFiles: state.selectedFiles\n  };\n}\n\nfunction removeSelectedFiles(state: IFileManagerState): IFileManagerState {\n  const files: string[] = state.files.filter((i: string) => state.selectedFiles.indexOf(i) === -1);\n  const entities: StoreEntities = {};\n\n  files.forEach((fileId: string) => {\n    entities[fileId] = state.entities[fileId];\n  });\n\n  return {\n    entities: entities,\n    files: files,\n    selectedFiles: []\n  };\n}\n\nfunction selectFile(state: IFileManagerState, action: SelectFileAction): IFileManagerState {\n  return {\n    entities: state.entities,\n    files: state.files,\n    selectedFiles: [...state.selectedFiles, action.payload.file.getId().toString()]\n  };\n}\n\nfunction selectAllFiles(state: IFileManagerState): IFileManagerState {\n  return {\n    entities: state.entities,\n    files: state.files,\n    selectedFiles: [...state.files]\n  };\n}\n\nfunction uploadFiles(state: IFileManagerState, action: UploadFilesSuccessAction): IFileManagerState {\n  const newState = {\n    entities: {...state.entities},\n    files: [...state.files],\n    selectedFiles: []\n  };\n\n  action.payload.files.forEach((file: IOuterFile) => {\n    const id = file.id.toString();\n\n    newState.entities[id] = file;\n    newState.files.push(id);\n  });\n\n\n  return newState;\n}\n\n\nfunction unSelectAllFiles(state: IFileManagerState): IFileManagerState {\n  return {\n    entities: state.entities,\n    files: state.files,\n    selectedFiles: []\n  };\n}\n\nfunction unSelectFile(state: IFileManagerState, action: UnSelectFileAction): IFileManagerState {\n  const fileId = action.payload.file.getId().toString();\n\n  return {\n    entities: state.entities,\n    files: state.files,\n    selectedFiles: state.selectedFiles.filter((id: string) => id !== fileId)\n  };\n}\n\nexport function fileManagerReducer(state: IFileManagerState = {\n  entities: {},\n  files: [],\n  selectedFiles: []\n}, action: FileManagerAction): IFileManagerState {\n  switch (action.type) {\n    case FileManagerActionTypes.CROP_FILE_SUCCESS:\n      return cropFile(state, action);\n    case FileManagerActionTypes.INVERSE_FILE_SELECTION:\n      return inverseFilesSelection(state);\n    case FileManagerActionTypes.DELETE_FILE_SELECTION_SUCCESS:\n      return removeSelectedFiles(state);\n    case FileManagerActionTypes.DELETE_FILE_SUCCESS:\n      return removeFile(state, action);\n    case FileManagerActionTypes.MOVE_FILES_SUCCESS:\n      return moveFiles(state, action);\n    case FileManagerActionTypes.LOAD_FILES_SUCCESS:\n      return loadFiles(state, action);\n    case FileManagerActionTypes.SELECT_ALL:\n      return selectAllFiles(state);\n    case FileManagerActionTypes.SELECT_FILE:\n      return selectFile(state, action);\n    case FileManagerActionTypes.UNSELECT_ALL:\n      return unSelectAllFiles(state);\n    case FileManagerActionTypes.UNSELECT_FILE:\n      return unSelectFile(state, action);\n    case FileManagerActionTypes.UPLOAD_FILE_SUCCESS:\n      return uploadFiles(state, action);\n    case FileManagerActionTypes.DELETE_FILE_SELECTION:\n    case FileManagerActionTypes.CROP_FILE:\n    case FileManagerActionTypes.DELETE_FILE:\n    case FileManagerActionTypes.LOAD_FILES:\n    case FileManagerActionTypes.MOVE_FILES_ERROR:\n      return state;\n    default:\n      return state;\n  }\n}\n\nexport const filemanagerStateSelector: MemoizedSelector<object, IFileManagerState> = createFeatureSelector<IFileManagerState>('files');\n\nexport const getAll = (state: IFileManagerState): IOuterFile[] => {\n  return state.files.map((id: string) => state.entities[id]);\n};\n\nexport const isChangeStateFiles = (newState: IFileManagerState, prevState: IFileManagerState): boolean => {\n  return prevState.files.length !== newState.files.length || prevState.files.filter((i: string) => newState.files.indexOf(i) === -1).length > 0;\n};\n\nexport const isChangeStateSelectedFiles = (newState: IFileManagerState, prevState: IFileManagerState): boolean => {\n  return prevState.selectedFiles.length !== newState.selectedFiles.length || prevState.selectedFiles.filter((i: string) => newState.selectedFiles.indexOf(i) === -1).length > 0;\n};\n","import {ITreeState} from '@rign/angular2-tree';\nimport {SearchFilterService} from './searchFilter.service';\nimport {FileTypeFilterService} from './fileTypeFilter.service';\nimport {Store} from '@ngrx/store';\nimport {FileModel} from '../filesList/file.model';\nimport {filemanagerStateSelector, getAll, IFileManagerState, StoreEntities} from '../store/file-manager.reducer';\nimport {IOuterFile} from '../filesList/interface/IOuterFile';\nimport {IFileTypeFilter} from '../toolbar/interface/IFileTypeFilter';\nimport {Injectable} from '@angular/core';\nimport {distinctUntilChanged, map, withLatestFrom} from 'rxjs/operators';\nimport {combineLatest, Observable} from 'rxjs';\n\n@Injectable()\nexport class CurrentDirectoryFilesService {\n\n  /**\n   * List of all files\n   */\n  public files$: Observable<FileModel[]>;\n\n  /**\n   * List of files for current selected directory\n   */\n  public filteredFiles$: Observable<FileModel[]>;\n\n  /**\n   * List of all files as JSON data\n   */\n  public entities$: Observable<StoreEntities>;\n\n  /**\n   * List of selected file ids\n   */\n  public selectedFiles$: Observable<string[]>;\n\n  /**\n   * List of all files in current directory\n   */\n  public currentDirectoryFileIds$: Observable<string[]>;\n\n  public constructor(private store: Store<IFileManagerState>,\n                     private fileTypeFilter: FileTypeFilterService,\n                     private searchFilterService: SearchFilterService) {\n\n    const store$ = this.store.select(filemanagerStateSelector);\n    const observable$ = store$;\n    this.entities$ = observable$\n      .pipe(\n        map((state: IFileManagerState) => state.entities),\n        distinctUntilChanged()\n      );\n\n    this.currentDirectoryFileIds$ = observable$\n      .pipe(\n        map((state: IFileManagerState) => state.files),\n        distinctUntilChanged()\n      );\n\n    this.selectedFiles$ = store$\n      .pipe(\n        map((state: IFileManagerState) => state.selectedFiles)\n      );\n\n    this.files$ = this.getFilesStream();\n    this.filteredFiles$ = this.getCurrentDirectoryFilesStream();\n  }\n\n  /**\n   * Return stream of files\n   */\n  private getFilesStream(): Observable<FileModel[]> {\n    return this.currentDirectoryFileIds$\n      .pipe(\n        withLatestFrom(this.entities$),\n        map((ar: any) => {\n          return {\n            entities: ar[1],\n            files: ar[0]\n          };\n        }),\n        map((state: any) => {\n          return getAll(state)\n            .map((file: IOuterFile) => {\n              return new FileModel(file);\n            });\n        })\n      );\n  }\n\n  /**\n   * Return stream of current directory filtered files\n   */\n  private getCurrentDirectoryFilesStream(): Observable<FileModel[]> {\n    return combineLatest(\n      this.files$,\n      this.fileTypeFilter.filter$,\n      this.searchFilterService.filter$\n    )\n      .pipe(\n        map((data: [FileModel[], IFileTypeFilter, string]): FileModel[] => {\n          let files = data[0];\n          const fileTypeFilter = data[1];\n          const search = data[2].toLocaleLowerCase();\n\n          if (search !== '') {\n            files = files.filter((file: FileModel) => {\n              return file.name.toLocaleLowerCase().indexOf(search) > -1;\n            });\n          }\n\n\n          if (fileTypeFilter && fileTypeFilter.mimes.length > 0) {\n            files = files.filter((file: FileModel) => {\n              return fileTypeFilter.mimes.indexOf(file.getMime()) > -1;\n            });\n          }\n\n          return files;\n        })\n      );\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {INodeService, IOuterNode} from '@rign/angular2-tree';\nimport {Observable, of} from 'rxjs';\nimport {FileManagerConfiguration} from '../configuration/fileManagerConfiguration.service';\nimport {AbstractFileManagerApiService, FILEMANAGER_TREE_NAME} from './fileManagerApiAbstract.class';\nimport {HttpClient, HttpParams} from '@angular/common/http';\nimport {IFileManagerApi} from './IFileManagerApi';\nimport {map} from 'rxjs/operators';\nimport {IOuterFile} from '../filesList/interface/IOuterFile';\nimport {ICropBounds} from '../crop/ICropBounds';\nimport {IFileDataProperties} from '../services/imageDataConverter.service';\n\n@Injectable()\nexport class FileManagerBackendApiService extends AbstractFileManagerApiService implements IFileManagerApi, INodeService {\n\n  public constructor(private $http: HttpClient,\n                     private configuration: FileManagerConfiguration) {\n    super();\n    this.nodes = [];\n    this.files = [];\n  }\n\n  public get treeId(): string {\n    return FILEMANAGER_TREE_NAME;\n  }\n\n  /**\n   * Load folder chidls for given folder id\n   */\n  public load(nodeId = ''): Observable<IOuterNode[]> {\n    const nodeIds = this.nodes.map((node: IOuterNode) => node.id);\n\n    const params = new HttpParams().set('nodeId', nodeId || '');\n\n    return this.$http.get<IOuterNode[]>(this.configuration.folderUrls.foldersUrl, {params})\n      .pipe(\n        map((nodes: IOuterNode[]) => {\n          nodes.forEach((node: IOuterNode) => {\n            if (nodeIds.indexOf(node.id) === -1) {\n              this.nodes.push(node);\n            } else {\n              const index = this.nodes.findIndex((item: IOuterNode) => node.id === item.id);\n              this.nodes[index] = node;\n            }\n          });\n\n          return nodes;\n        })\n      );\n  }\n\n  /**\n   * Create new folder\n   */\n  public add(node: IOuterNode, parentNodeId: string = null): Observable<IOuterNode> {\n    const data = {\n      node: node,\n      parentNodeId: parentNodeId\n    };\n\n    return this.$http.post<IOuterNode>(this.configuration.folderUrls.foldersUrl, data)\n      .pipe(\n        map((newNode: IOuterNode) => {\n          this.nodes.push(newNode);\n\n          return newNode;\n        })\n      );\n  }\n\n  /**\n   * Move folder from source parent to target parent\n   */\n  public move(srcNode: IOuterNode, targetNode: IOuterNode | null): Observable<IOuterNode> {\n    const srcId = srcNode.id;\n    const targetId = targetNode ? targetNode.id : null;\n\n\n    return this.$http.put<IOuterNode>(this.configuration.folderUrls.folderMoveUrl, {source: srcId, target: targetId})\n      .pipe(\n        map((movedNode: IOuterNode) => {\n          const index = this.findIndexByNodeId(srcId);\n          this.nodes[index].parentId = targetId;\n\n          return movedNode;\n        })\n      );\n  }\n\n  /**\n   * Update folder name\n   */\n  public update(node: IOuterNode): Observable<IOuterNode> {\n    return this.$http.put<IOuterNode>(this.configuration.folderUrls.foldersUrl, node)\n      .pipe(\n        map((newNode: IOuterNode) => {\n          const index = this.findIndexByNodeId(node.id);\n\n          this.nodes[index] = newNode;\n\n          return newNode;\n        })\n      );\n  }\n\n  /**\n   * Remove node by given id\n   */\n  public remove(nodeId: string): Observable<IOuterNode> {\n    const index = this.findIndexByNodeId(nodeId);\n\n    const hasChildren = this.getChildren(nodeId).length > 0;\n\n    if (!hasChildren) {\n      const params = new HttpParams().set('nodeId', nodeId);\n\n      return this.$http.delete<IOuterNode>(this.configuration.folderUrls.foldersUrl, {params})\n        .pipe(\n          map((removedNode: IOuterNode) => {\n            this.nodes.splice(index, 1);\n\n            return removedNode;\n          })\n        );\n    } else {\n      return Observable.throw('Node is not empty');\n    }\n  }\n\n  public setAllNodes(nodes: IOuterNode[]): void {\n    this.nodes = [...nodes];\n  }\n\n  /**\n   * Crop file\n   */\n  public cropFile(file: IOuterFile, bounds: ICropBounds): Observable<IOuterFile> {\n    return this.$http.put<IOuterFile>(this.configuration.fileUrl, {id: file.id, bounds: bounds});\n  }\n\n  /**\n   * Load files from directory\n   */\n  public loadFiles(nodeId = ''): Observable<IOuterFile[]> {\n    this.currentNodeId = nodeId;\n    const params = new HttpParams().set('dirId', nodeId);\n\n    return this.$http.get<IOuterFile[]>(this.configuration.fileUrl, {params})\n      .pipe(\n        map((files: IOuterFile[]) => {\n          this.files = files.map((file: IOuterFile) => <IFileDataProperties>file);\n\n          return files;\n        })\n      );\n  }\n\n  /**\n   * Remove file from folder\n   */\n  public removeFile(file: IOuterFile): Observable<boolean> {\n    const index = this.findIndexByFileId(file.id.toString());\n\n    if (index === -1) {\n      return of(false);\n    }\n\n    const params = new HttpParams().set('id', file.id.toString());\n\n    return this.$http.delete<any>(this.configuration.fileUrl, {params})\n      .pipe(\n        map(() => {\n          this.files.splice(index, 1);\n\n          return true;\n        })\n      );\n  }\n\n  public removeSelectedFiles(selectedFiles: string[]) {\n    const params = new HttpParams().set('id', selectedFiles.join('|'));\n\n    return this.$http.delete<any>(this.configuration.fileUrl, {params})\n      .pipe(\n        map(() => {\n          selectedFiles.forEach((fileId: string) => {\n            const index = this.findIndexByFileId(fileId);\n\n            if (index > -1) {\n              this.files.splice(index, 1);\n            }\n          });\n\n          return true;\n        })\n      );\n  }\n\n  /**\n   * This method is success method, real upload is done in ExtendedFileUploader\n   */\n  public uploadFile(file: IOuterFile): Observable<IOuterFile> {\n    const fileData = <IFileDataProperties>file;\n    this.files.push(fileData);\n\n    return of(file);\n  }\n\n  public moveFile(files: IOuterFile[], node: IOuterNode): Observable<IOuterFile[]> {\n    const ids: string[] = files.map(file => file.id.toString());\n\n    return this.$http.put<IOuterFile[]>(this.configuration.fileUrl, {files: ids, folderId: node ? node.id : ''});\n  }\n\n  private findIndexByNodeId(nodeId: string): number {\n    return this.nodes.findIndex((node) => {\n      return node.id === nodeId;\n    });\n  }\n\n  private findIndexByFileId(fileId: string): number {\n    return this.files.findIndex((file) => file.id === fileId);\n  }\n\n  private getChildren(nodeId: string): IOuterNode[] {\n    return this.nodes.filter((node: IOuterNode) => node.parentId === nodeId);\n  }\n\n  private convertLocalData2IOuterFile(file: IFileDataProperties): IOuterFile {\n    return {\n      id: file.id,\n      folderId: file.folderId,\n      name: file.name,\n      thumbnailUrl: file.data,\n      url: file.data,\n      width: file.width,\n      height: file.height,\n      type: file.type,\n      size: file.size\n    };\n  }\n\n  private convertIOuterFile2LocalData(file: IOuterFile): IFileDataProperties {\n    return {\n      id: file.id.toString(),\n      folderId: file.folderId,\n      name: file.name,\n      type: file.type,\n      data: file.data,\n      size: file.size,\n      width: file.width,\n      height: file.height\n    };\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core';\nimport {IFileTypeFilter} from '../interface/IFileTypeFilter';\nimport {FileTypeFilterService} from '../../services/fileTypeFilter.service';\n\n@Component({\n  selector: 'ri-file-type-filter',\n  templateUrl: './fileTypeFilter.component.html'\n})\n\nexport class FileTypeFilterComponent implements OnInit {\n  @Input() typeFilterList: IFileTypeFilter[] = [];\n\n  public selectedType: IFileTypeFilter = null;\n\n  constructor(private fileTypeFilter: FileTypeFilterService) {\n    this.fileTypeFilter.filter$\n      .subscribe((type: IFileTypeFilter | null) => {\n        this.selectedType = type;\n      })\n  }\n\n  ngOnInit() {\n    /** init file type filter **/\n    this.typeFilterList\n      .filter((type: IFileTypeFilter) => {\n        return type.defaultSelected;\n      })\n      .forEach((type: IFileTypeFilter) => {\n        this.fileTypeFilter.setValue(type);\n      });\n  }\n\n  /**\n   * Set current filter and fire event\n   * @param type\n   */\n  public setFilterType(type: IFileTypeFilter) {\n    this.fileTypeFilter.setValue(type);\n  }\n}\n","export class IUploadItemEvent {\n  name: string;\n  response: any;\n  status: number;\n}\n","export enum Button {\n  ADD_FOLDER = 'ADD_FOLDER',\n  CHOOSE_SELECTION = 'CHOOSE_SELECTION',\n  DELETE_SELECTION = 'DELETE_SELECTION',\n  INVERSE_SELECTION = 'INVERSE_SELECTION',\n  REFRESH_FILES_LIST = 'REFRESH_FILES_LIST',\n  SELECT_ALL = 'SELECT_ALL',\n  UNSELECT_ALL = 'UNSELECT_ALL',\n}\n","import {IToolbarEvent} from '../interface/IToolbarEvent';\n\nexport class ToolbarEventModel implements IToolbarEvent {\n  constructor(public name: string, public value: string = null) {\n  }\n}\n","import {Component, OnInit} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {SearchFilterService} from '../../services/searchFilter.service';\nimport {debounceTime} from 'rxjs/operators';\n\n@Component({\n  selector: 'ri-search-file',\n  templateUrl: './searchFile.component.html'\n})\n\nexport class SearchFileComponent implements OnInit {\n\n  public searchField = new FormControl();\n\n  constructor(private searchFilterService: SearchFilterService) {\n  }\n\n  ngOnInit() {\n    this.searchField.valueChanges\n      .pipe(\n        debounceTime(250)\n      )\n      .subscribe((value: string) => this.searchFilterService.setValue(value));\n  }\n}\n","import {IButton, IButtonData} from './IButton';\n\nexport abstract class AbstractButtonClass implements IButton {\n  public symbol: string;\n  public name: string;\n  public label: boolean;\n  public icon: boolean;\n  public iconCssClass: string;\n  public disabled?: boolean;\n\n  public constructor(data: IButtonData) {\n    this.symbol = data.symbol;\n    this.name = data.name;\n    this.label = data.label;\n    this.icon = data.icon;\n    this.iconCssClass = data.iconCssClass;\n    this.disabled = data.disabled;\n  }\n\n  abstract isDivider(): boolean;\n}\n","import {AbstractButtonClass} from './AbstractButton.class';\n\nexport class ButtonClass extends AbstractButtonClass {\n  public isDivider(): boolean {\n    return false;\n  }\n}\n","import {AbstractButtonClass} from './AbstractButton.class';\n\nexport class ButtonDividerClass extends AbstractButtonClass {\n  public constructor() {\n    super({\n      symbol: '',\n      name: '',\n      label: false,\n      icon: false,\n      iconCssClass: ''\n    });\n  }\n\n  public isDivider(): boolean {\n    return true;\n  }\n}\n","import {Component, EventEmitter, OnDestroy, Output} from '@angular/core';\nimport {IButton, IButtonData} from '../../dropdown/IButton';\nimport {ButtonClass} from '../../dropdown/Button.class';\nimport {Button} from '../models/button.model';\nimport {ButtonDividerClass} from '../../dropdown/ButtonDivider.class';\nimport {CurrentDirectoryFilesService} from '../../services/currentDirectoryFiles.service';\nimport {combineLatest, Subscription} from 'rxjs';\nimport {FileManagerConfiguration} from '../../configuration/fileManagerConfiguration.service';\nimport {IToolbarEvent} from '../interface/IToolbarEvent';\nimport {ToolbarEventModel} from '../models/toolbarEvent.model';\nimport {distinctUntilChanged} from 'rxjs/operators';\n\n@Component({\n  selector: 'ri-selection-dropdown',\n  templateUrl: './selection.dropdown.html'\n})\nexport class SelectionComponent implements OnDestroy {\n  @Output()\n  public onMenuButtonClick = new EventEmitter();\n\n  public selectButtonsList: IButton[];\n\n  public selectAllButton = new ButtonClass({\n    symbol: Button.SELECT_ALL,\n    name: 'RI_FM_LBL_SELECT_ALL',\n    label: true,\n    icon: true,\n    iconCssClass: 'fa fa-check-square-o'\n  });\n\n  private unselectAllButton = new ButtonClass({\n    symbol: Button.UNSELECT_ALL,\n    name: 'RI_FM_LBL_UNSELECT_ALL',\n    label: true,\n    icon: true,\n    iconCssClass: 'fa fa-square-o'\n  });\n\n  private inverseSelectionButton = new ButtonClass({\n    symbol: Button.INVERSE_SELECTION,\n    name: 'RI_FM_LBL_INVERSE_SELECTION',\n    label: true,\n    icon: true,\n    iconCssClass: 'fa fa-check-square'\n  });\n\n  private deleteSelectionButton = new ButtonClass({\n    symbol: Button.DELETE_SELECTION,\n    name: 'RI_FM_LBL_DELETE_SELECTION',\n    label: true,\n    icon: true,\n    iconCssClass: 'fa fa-trash'\n  });\n\n  private chooseSelectionButton = new ButtonClass({\n    symbol: Button.CHOOSE_SELECTION,\n    name: 'RI_FM_LBL_CHOOSE_SELECTION',\n    label: true,\n    icon: true,\n    iconCssClass: 'fa fa-image'\n  });\n\n  private onLoadFilesSubscriber: Subscription;\n\n  public constructor(public configuration: FileManagerConfiguration,\n                     private currentDirectoryFilesService: CurrentDirectoryFilesService) {\n\n    this.selectButtonsList = this.createBasicButtons();\n\n    this.initListenOnLoadFiles();\n  }\n\n  public ngOnDestroy() {\n    this.onLoadFilesSubscriber.unsubscribe();\n  }\n\n  /**\n   * Initialize listener on load files\n   */\n  public initListenOnLoadFiles() {\n    this.onLoadFilesSubscriber = combineLatest(\n      this.currentDirectoryFilesService.currentDirectoryFileIds$,\n      this.currentDirectoryFilesService.selectedFiles$\n    )\n      .pipe(\n        distinctUntilChanged()\n      )\n      .subscribe((data: string[][]) => {\n        const numberOfFiles = data[0].length;\n        const numberOfSelectedFiles = data[1].length;\n\n        this.disableAllButtons();\n\n        if (numberOfFiles > 0) {\n          if (numberOfSelectedFiles > 0) {\n            this.enableAllButtons();\n          } else {\n            this.enableSelectAllButton();\n          }\n        }\n      });\n  }\n\n\n  public onSelectDropdownClick(button: IButtonData) {\n    const event: IToolbarEvent = new ToolbarEventModel(button.symbol);\n    this.onMenuButtonClick.emit(event);\n  }\n\n  /**\n   * Disable all dropdown buttons and main button\n   */\n  private disableAllButtons(): void {\n    this.selectAllButton.disabled = true;\n\n    this.selectButtonsList\n      .filter((button: IButton) => {\n        return !button.isDivider();\n      })\n      .forEach((button: IButtonData) => {\n        button.disabled = true;\n      });\n  }\n\n  /**\n   * Enable all dropdown buttons and main button\n   */\n  private enableAllButtons(): void {\n    this.selectAllButton.disabled = false;\n\n    this.selectButtonsList\n      .forEach((button: IButtonData) => {\n        button.disabled = false;\n      });\n  }\n\n  /**\n   * Create list of buttons\n   */\n  private createBasicButtons(): IButton[] {\n    const buttons = [\n      this.selectAllButton,\n      this.unselectAllButton,\n      this.inverseSelectionButton,\n      new ButtonDividerClass(),\n      this.deleteSelectionButton,\n    ];\n\n    if (this.configuration.allowChooseMultipleFiles) {\n      buttons.push(new ButtonDividerClass());\n      buttons.push(this.chooseSelectionButton);\n    }\n\n    return buttons;\n  }\n\n  /**\n   * Enable only select button\n   */\n  private enableSelectAllButton(): void {\n    this.selectAllButton.disabled = false;\n    this.inverseSelectionButton.disabled = false;\n  }\n}\n","import {Component, EventEmitter, Output, Input, OnChanges} from '@angular/core';\nimport {Button} from './models/button.model';\nimport {ToolbarEventModel} from './models/toolbarEvent.model';\nimport {IToolbarEvent} from './interface/IToolbarEvent';\nimport {FileManagerConfiguration} from '../configuration/fileManagerConfiguration.service';\nimport {FileManagerUploader} from '../filesList/fileManagerUploader.service';\nimport {Store} from '@ngrx/store';\nimport {IFileManagerState} from '../store/file-manager.reducer';\nimport {UploadFilesAction, UploadFilesErrorAction} from '../store/file-manager.action';\n\n@Component({\n  selector: 'ri-toolbar',\n  styleUrls: ['./toolbar.scss'],\n  templateUrl: './toolbar.html'\n})\n\nexport class ToolbarComponent implements OnChanges {\n  @Input() currentFolderId: string;\n\n  @Output() onAddFolderClick = new EventEmitter();\n  @Output() onUpload = new EventEmitter();\n  @Output() onMenuButtonClick = new EventEmitter();\n\n\n  public constructor(public configuration: FileManagerConfiguration,\n                     public fileManagerUploader: FileManagerUploader,\n                     private store: Store<IFileManagerState>) {\n\n    this.fileManagerUploader.clear();\n\n    this.fileManagerUploader.uploader.onCompleteAll = () => {\n      this.onUpload.emit(this.currentFolderId || '');\n    };\n\n    this.fileManagerUploader.uploader.onCompleteItem = (item: any, response: any, status: number, headers: any) => {\n      if (status === 200) {\n        this.store.dispatch(new UploadFilesAction({files: JSON.parse(response)}));\n      } else {\n        this.store.dispatch(new UploadFilesErrorAction({files: JSON.parse(response)}));\n      }\n    };\n  }\n\n  public ngOnChanges() {\n    this.fileManagerUploader.setDirectoryId(this.currentFolderId || '');\n  }\n\n  public addFolder() {\n    let event: IToolbarEvent = new ToolbarEventModel(Button.ADD_FOLDER, 'Nowy folder');\n    this.onAddFolderClick.emit(event);\n  }\n\n  public onRefreshFilesList() {\n    let event: IToolbarEvent = new ToolbarEventModel(Button.REFRESH_FILES_LIST);\n    this.onMenuButtonClick.emit(event);\n  }\n}\n","import {\n  Component, OnInit, ViewChild, HostListener, EventEmitter, Output, OnDestroy\n} from '@angular/core';\nimport {\n  TreeComponent,\n  NodeService,\n  IContextMenu,\n  IOuterNode,\n  ITreeData,\n  ITreeState,\n  IConfiguration,\n  TreeModel,\n  NodeDispatcherService, TreeInitializerService,\n} from '@rign/angular2-tree';\nimport {FileModel} from './filesList/file.model';\nimport {NotificationsService} from 'angular2-notifications';\nimport {IFileEvent} from './filesList/interface/IFileEvent';\nimport {Button} from './toolbar/models/button.model';\nimport {FilesListComponent} from './filesList/filesList.component';\nimport {IToolbarEvent} from './toolbar/interface/IToolbarEvent';\nimport {IFileModel} from './filesList/interface/IFileModel';\nimport {FileManagerConfiguration} from './configuration/fileManagerConfiguration.service';\nimport {Store} from '@ngrx/store';\nimport {FileManagerEffectsService} from './store/fileManagerEffects.service';\nimport {FileManagerApiService} from './store/fileManagerApi.service';\nimport {FilemanagerNotifcations, INotification} from './services/FilemanagerNotifcations';\nimport {CurrentDirectoryFilesService} from './services/currentDirectoryFiles.service';\nimport {IOuterFile} from './filesList/interface/IOuterFile';\nimport {FILEMANAGER_TREE_NAME} from './store/fileManagerApiAbstract.class';\nimport {\n  ChooseFilesAction,\n  DeleteSelectedFilesAction, InverseFilesSelectionAction, LoadFilesAction,\n  SelectAllFilesAction,\n  UnSelectAllFilesAction\n} from './store/file-manager.action';\nimport {combineLatest, Observable, Subscription} from 'rxjs';\n\n@Component({\n  selector: 'ri-filemanager',\n  providers: [NodeService, NotificationsService],\n  styleUrls: ['./main.scss'],\n  templateUrl: './filemanager.html'\n})\nexport class FileManagerComponent implements OnInit, OnDestroy {\n  @Output()\n  public onSingleFileSelect = new EventEmitter();\n\n  @ViewChild(TreeComponent)\n  public treeComponent: TreeComponent;\n\n  @ViewChild(FilesListComponent)\n  public filesList: FilesListComponent;\n\n  /**\n   * List of files for current selected directory\n   */\n  private files$: Observable<FileModel[]>;\n\n  public filteredFiles$: Observable<FileModel[]>;\n  public selectedFiles$: Observable<string[]>;\n\n  public folders: Observable<ITreeData>;\n\n  public treeConfiguration: IConfiguration = {\n    showAddButton: false,\n    disableMoveNodes: false,\n    treeId: FILEMANAGER_TREE_NAME,\n    dragZone: FILEMANAGER_TREE_NAME,\n    dropZone: [FILEMANAGER_TREE_NAME]\n  };\n\n  public treeModel: TreeModel;\n\n  /** UNSED **/\n  public contextMenu: IContextMenu[] = [];\n\n  public currentSelectedFile: IFileModel;\n  public currentSelectedFilesIds: string[] = [];\n  public currentSelectedFiles: IOuterFile[] = [];\n\n  public isPreviewMode = false;\n  public isCropMode = false;\n\n  public notificationOptions = {\n    position: ['bottom', 'right'],\n    timeOut: 3000,\n    lastOnBottom: false,\n    preventDuplicates: true,\n    rtl: false,\n    showProgressBar: true,\n    pauseOnHover: true\n  };\n\n  /**\n   * List of context menu\n   */\n  public menu: IContextMenu[];\n\n  protected currentSelectedFolder: IOuterNode;\n\n  private subscription = new Subscription();\n\n  public constructor(private store: Store<ITreeState>,\n                     private nodeDispatcherService: NodeDispatcherService,\n                     private treeService: FileManagerApiService,\n                     private notifications: NotificationsService,\n                     private configuration: FileManagerConfiguration,\n                     private fileManagerEffects: FileManagerEffectsService,\n                     private filemanagerNotifcations: FilemanagerNotifcations,\n                     private currentDirectoryFilesService: CurrentDirectoryFilesService,\n                     private treeInitializerService: TreeInitializerService) {\n\n    this.menu = configuration.contextMenuItems;\n\n    this.filemanagerNotifcations.getNotificationStream()\n      .subscribe((notification: INotification) => {\n        const {type, title, message} = notification;\n\n        this.notifications[type](title, message);\n      });\n\n    this.subscription.add(\n      this.currentDirectoryFilesService.selectedFiles$\n        .subscribe((data: string[]) => {\n          this.currentSelectedFilesIds = data;\n        })\n    );\n\n    this.subscription.add(\n      combineLatest(\n        this.currentDirectoryFilesService.selectedFiles$,\n        this.currentDirectoryFilesService.entities$,\n      )\n        .subscribe(([ids, entities]: [string[], { [key: string]: IOuterFile }]) => {\n          this.currentSelectedFiles = ids.map((id) => entities[id]);\n        })\n    );\n  }\n\n  public ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n\n  public ngOnInit(): void {\n    this.treeModel = this.treeInitializerService.init(this.treeConfiguration, this.treeService);\n\n    this.subscription.add(\n      this.treeModel.currentSelectedNode$\n        .subscribe((node: IOuterNode) => this.currentSelectedFolder = node)\n    );\n\n    /*** START - init files ***/\n    this.files$ = this.currentDirectoryFilesService.files$;\n    this.filteredFiles$ = this.currentDirectoryFilesService.filteredFiles$;\n    this.selectedFiles$ = this.currentDirectoryFilesService.selectedFiles$;\n\n\n    this.subscription.add(\n      this.treeModel.currentSelectedNode$\n        .subscribe((node: IOuterNode | null) => {\n          this.loadFiles(node ? node.id : '');\n        })\n    );\n\n    /*** END - init files ***/\n    this.subscription.add(\n      this.fileManagerEffects.cropFileSuccess$\n        .subscribe(() => {\n          this.closeModal();\n        })\n    );\n  }\n\n  get currentSelectedFolderId(): string | null {\n    return this.currentSelectedFolder ? this.currentSelectedFolder.id : null;\n  }\n\n\n  public onAddFolder() {\n    this.treeComponent.onAdd();\n  }\n\n  /***********************************************************************\n   * FILE EVENTS\n   **********************************************************************/\n  /**\n   * Run when all files are uploaded\n   */\n  public onUpload(folderId: string) {\n    this.notifications.success('File upload', 'Upload complete');\n  }\n\n\n  public onPreviewFile(fileEventData: IFileEvent) {\n    this.isPreviewMode = true;\n    this.currentSelectedFile = fileEventData.file;\n  }\n\n\n  public onOpenCropFileEditor(fileEventData: IFileEvent) {\n    this.isCropMode = true;\n    this.currentSelectedFile = fileEventData.file;\n  }\n\n\n  public onSelectFile(event: FileModel) {\n    this.onSingleFileSelect.next(event.getSelectData());\n  }\n\n  /***********************************************************************\n   * TOOLBAR EVENTS\n   **********************************************************************/\n\n\n  public onMenuButtonClick(event: IToolbarEvent) {\n    switch (event.name) {\n      case Button.CHOOSE_SELECTION:\n        this.store.dispatch(new ChooseFilesAction({files: this.currentSelectedFiles}));\n        break;\n      case Button.DELETE_SELECTION:\n        this.store.dispatch(new DeleteSelectedFilesAction({files: this.currentSelectedFilesIds}));\n        break;\n      case Button.SELECT_ALL:\n        this.store.dispatch(new SelectAllFilesAction());\n        break;\n      case Button.UNSELECT_ALL:\n        this.store.dispatch(new UnSelectAllFilesAction());\n        break;\n      case Button.INVERSE_SELECTION:\n        this.store.dispatch(new InverseFilesSelectionAction());\n        break;\n      case Button.REFRESH_FILES_LIST:\n        this.reloadFiles();\n        break;\n    }\n  }\n\n  /***********************************************************************\n   * OTHER FUNCTIONS\n   **********************************************************************/\n  @HostListener('window:keydown', ['$event'])\n  public keyEvents(event: KeyboardEvent) {\n    if (this.isPreviewMode || this.isCropMode) {\n      if (event.keyCode === 27) {\n        this.closeModal();\n      }\n    }\n  }\n\n  public closeModal() {\n    this.isPreviewMode = false;\n    this.isCropMode = false;\n  }\n\n\n  private loadFiles(folderId: string) {\n    this.store.dispatch(new LoadFilesAction({folderId: folderId || ''}));\n  }\n\n  private reloadFiles() {\n    const id = this.currentSelectedFolder ? this.currentSelectedFolder.id : '';\n\n    this.loadFiles(id);\n  }\n}\n","import {NgModule, CUSTOM_ELEMENTS_SCHEMA, Provider, ModuleWithProviders} from '@angular/core';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {TreeModule} from '@rign/angular2-tree';\nimport {NotificationsService, SimpleNotificationsModule} from 'angular2-notifications';\nimport {FileManagerComponent} from './filemanager.component';\nimport {ToolbarComponent} from './toolbar/toolbar.component';\nimport {FilesListComponent} from './filesList/filesList.component';\nimport {ImageCropperComponent, ImageCropperModule} from 'ng2-img-cropper';\nimport {CropComponent} from './crop/crop.component';\nimport {PreviewComponent} from './preview/preview.component';\nimport {DropdownComponent} from './dropdown/dropdown.component';\nimport {FileUploadModule} from 'ng2-file-upload';\nimport {FileManagerConfiguration} from './configuration/fileManagerConfiguration.service';\nimport {FileManagerUploader} from './filesList/fileManagerUploader.service';\nimport {TreeService} from './configuration/tree.service';\nimport {EffectsModule} from '@ngrx/effects';\nimport {FileManagerEffectsService} from './store/fileManagerEffects.service';\nimport {StoreModule} from '@ngrx/store';\nimport {fileManagerReducer} from './store/file-manager.reducer';\nimport {FileManagerActionsService} from './store/fileManagerActions.service';\nimport {StoreDevtoolsModule} from '@ngrx/store-devtools';\nimport {FileTypeFilterService} from './services/fileTypeFilter.service';\nimport {SearchFilterService} from './services/searchFilter.service';\nimport {FileManagerDispatcherService} from './store/file-manager-dispatcher.service';\nimport {FileTypeFilterComponent} from './toolbar/fileTypeFilter/fileTypeFilter.component';\nimport {SearchFileComponent} from './toolbar/searchFile/searchFile.component';\nimport {FileManagerApiService} from './store/fileManagerApi.service';\nimport {ImageDataConverter} from './services/imageDataConverter.service';\nimport {FilemanagerNotifcations} from './services/FilemanagerNotifcations';\nimport {ConfirmationPopoverModule} from 'angular-confirmation-popover';\nimport {FileManagerBackendApiService} from './store/fileManagerBackendApi.service';\nimport {CurrentDirectoryFilesService} from './services/currentDirectoryFiles.service';\nimport {SelectionComponent} from './toolbar/selectionDropDown/selection.component';\nimport {FileComponent} from './filesList/file/file.component';\nimport {TranslateModule} from '@ngx-translate/core';\nimport {IFileManagerConfiguration} from './configuration/IFileManagerConfiguration';\nimport {HttpClientModule} from '@angular/common/http';\nimport {CommonModule} from '@angular/common';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfirmationPopoverModule,\n    EffectsModule.forFeature([FileManagerEffectsService]),\n    FormsModule,\n    FileUploadModule,\n    HttpClientModule,\n    ImageCropperModule,\n    ReactiveFormsModule,\n    SimpleNotificationsModule,\n    StoreModule.forFeature('files', fileManagerReducer),\n    TranslateModule,\n    TreeModule\n  ],\n  declarations: [\n    FileManagerComponent,\n    FileComponent,\n    FileTypeFilterComponent,\n    ToolbarComponent,\n    FilesListComponent,\n    DropdownComponent,\n    PreviewComponent,\n    CropComponent,\n    SearchFileComponent,\n    SelectionComponent\n  ],\n  entryComponents: [\n    ImageCropperComponent\n  ],\n  exports: [FileManagerComponent],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class FileManagerModule {\n\n  public static forRoot(config: IFileManagerConfiguration, apiProvider: Provider = null): ModuleWithProviders {\n    return {\n      ngModule: FileManagerModule,\n      providers: [\n        CurrentDirectoryFilesService,\n        FileManagerActionsService,\n        FileManagerApiService,\n        FileManagerBackendApiService,\n        FileManagerConfiguration,\n        FileManagerDispatcherService,\n        FileManagerEffectsService,\n        FilemanagerNotifcations,\n        FileManagerUploader,\n        FileTypeFilterService,\n        ImageDataConverter,\n        NotificationsService,\n        SearchFilterService,\n        TreeService,\n        {provide: 'fileManagerConfiguration', useValue: config},\n        apiProvider ? apiProvider : FileManagerApiService\n      ]\n    };\n  }\n\n  public static forChild(config: IFileManagerConfiguration, apiProvider: Provider = null): ModuleWithProviders {\n    return {\n      ngModule: FileManagerModule,\n      providers: [\n        CurrentDirectoryFilesService,\n        FileManagerActionsService,\n        FileManagerApiService,\n        FileManagerBackendApiService,\n        FileManagerConfiguration,\n        FileManagerDispatcherService,\n        FileManagerEffectsService,\n        FilemanagerNotifcations,\n        FileManagerUploader,\n        FileTypeFilterService,\n        ImageDataConverter,\n        NotificationsService,\n        SearchFilterService,\n        TreeService,\n        {provide: 'fileManagerConfiguration', useValue: config},\n        apiProvider ? apiProvider : FileManagerApiService\n      ]\n    };\n  }\n}\n"],"names":["tslib_1.__extends","filter","tslib_1.__decorate"],"mappings":"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"}
