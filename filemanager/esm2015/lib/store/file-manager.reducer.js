/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { createFeatureSelector } from '@ngrx/store';
import { FileManagerActionTypes } from './file-manager.action';
/**
 * @record
 */
export function StoreEntities() { }
/**
 * @record
 */
export function IFileManagerState() { }
if (false) {
    /** @type {?} */
    IFileManagerState.prototype.entities;
    /** @type {?} */
    IFileManagerState.prototype.files;
    /** @type {?} */
    IFileManagerState.prototype.selectedFiles;
}
/**
 * @param {?} state
 * @param {?} action
 * @return {?}
 */
function cropFile(state, action) {
    /** @type {?} */
    const file = action.payload.file;
    /** @type {?} */
    const id = file.getId().toString();
    state.entities[id] = (/** @type {?} */ (Object.assign({}, file.toJSON())));
    return {
        entities: state.entities,
        files: state.files,
        selectedFiles: state.selectedFiles
    };
}
/**
 * @param {?} state
 * @return {?}
 */
function inverseFilesSelection(state) {
    return {
        entities: state.entities,
        files: state.files,
        selectedFiles: state.files.filter((i) => state.selectedFiles.indexOf(i) === -1)
    };
}
/**
 * @param {?} state
 * @param {?} action
 * @return {?}
 */
function loadFiles(state, action) {
    /** @type {?} */
    const entities = {};
    /** @type {?} */
    const files = [];
    action.payload.files.map((file) => {
        /** @type {?} */
        const id = file.id.toString();
        entities[id] = file;
        files.push(id);
    });
    return {
        entities: entities,
        files: files,
        selectedFiles: []
    };
}
/**
 * @param {?} state
 * @param {?} action
 * @return {?}
 */
function moveFiles(state, action) {
    /** @type {?} */
    const files = action.payload.files;
    /** @type {?} */
    const ids = files.map(file => file.id.toString());
    /** @type {?} */
    const folderId = action.payload.folderId ? action.payload.folderId.toString() : '';
    /** @type {?} */
    const entities = Object.assign({}, state.entities);
    ids.forEach((id) => {
        /** @type {?} */
        const oldEntity = Object.assign({}, entities[id]);
        oldEntity.folderId = folderId;
        entities[id] = oldEntity;
    });
    return {
        entities: entities,
        files: state.files.filter((i) => ids.indexOf(i) === -1),
        selectedFiles: state.selectedFiles.filter((i) => ids.indexOf(i) === -1)
    };
}
/**
 * @param {?} state
 * @param {?} action
 * @return {?}
 */
function removeFile(state, action) {
    /** @type {?} */
    const id = action.payload.file.getId();
    delete state.entities[id];
    return {
        entities: state.entities,
        files: state.files.filter((i) => i !== id),
        selectedFiles: state.selectedFiles
    };
}
/**
 * @param {?} state
 * @return {?}
 */
function removeSelectedFiles(state) {
    /** @type {?} */
    const files = state.files.filter((i) => state.selectedFiles.indexOf(i) === -1);
    /** @type {?} */
    const entities = {};
    files.forEach((fileId) => {
        entities[fileId] = state.entities[fileId];
    });
    return {
        entities: entities,
        files: files,
        selectedFiles: []
    };
}
/**
 * @param {?} state
 * @param {?} action
 * @return {?}
 */
function selectFile(state, action) {
    return {
        entities: state.entities,
        files: state.files,
        selectedFiles: [...state.selectedFiles, action.payload.file.getId().toString()]
    };
}
/**
 * @param {?} state
 * @return {?}
 */
function selectAllFiles(state) {
    return {
        entities: state.entities,
        files: state.files,
        selectedFiles: [...state.files]
    };
}
/**
 * @param {?} state
 * @param {?} action
 * @return {?}
 */
function uploadFiles(state, action) {
    /** @type {?} */
    const newState = {
        entities: Object.assign({}, state.entities),
        files: [...state.files],
        selectedFiles: []
    };
    action.payload.files.forEach((file) => {
        /** @type {?} */
        const id = file.id.toString();
        newState.entities[id] = file;
        newState.files.push(id);
    });
    return newState;
}
/**
 * @param {?} state
 * @return {?}
 */
function unSelectAllFiles(state) {
    return {
        entities: state.entities,
        files: state.files,
        selectedFiles: []
    };
}
/**
 * @param {?} state
 * @param {?} action
 * @return {?}
 */
function unSelectFile(state, action) {
    /** @type {?} */
    const fileId = action.payload.file.getId().toString();
    return {
        entities: state.entities,
        files: state.files,
        selectedFiles: state.selectedFiles.filter((id) => id !== fileId)
    };
}
/**
 * @param {?=} state
 * @param {?=} action
 * @return {?}
 */
export function fileManagerReducer(state = {
    entities: {},
    files: [],
    selectedFiles: []
}, action) {
    switch (action.type) {
        case FileManagerActionTypes.CROP_FILE_SUCCESS:
            return cropFile(state, action);
        case FileManagerActionTypes.INVERSE_FILE_SELECTION:
            return inverseFilesSelection(state);
        case FileManagerActionTypes.DELETE_FILE_SELECTION_SUCCESS:
            return removeSelectedFiles(state);
        case FileManagerActionTypes.DELETE_FILE_SUCCESS:
            return removeFile(state, action);
        case FileManagerActionTypes.MOVE_FILES_SUCCESS:
            return moveFiles(state, action);
        case FileManagerActionTypes.LOAD_FILES_SUCCESS:
            return loadFiles(state, action);
        case FileManagerActionTypes.SELECT_ALL:
            return selectAllFiles(state);
        case FileManagerActionTypes.SELECT_FILE:
            return selectFile(state, action);
        case FileManagerActionTypes.UNSELECT_ALL:
            return unSelectAllFiles(state);
        case FileManagerActionTypes.UNSELECT_FILE:
            return unSelectFile(state, action);
        case FileManagerActionTypes.UPLOAD_FILE_SUCCESS:
            return uploadFiles(state, action);
        case FileManagerActionTypes.DELETE_FILE_SELECTION:
        case FileManagerActionTypes.CROP_FILE:
        case FileManagerActionTypes.DELETE_FILE:
        case FileManagerActionTypes.LOAD_FILES:
        case FileManagerActionTypes.MOVE_FILES_ERROR:
            return state;
        default:
            return state;
    }
}
/** @type {?} */
export const filemanagerStateSelector = createFeatureSelector('files');
/** @type {?} */
export const getAll = (state) => {
    return state.files.map((id) => state.entities[id]);
};
/** @type {?} */
export const isChangeStateFiles = (newState, prevState) => {
    return prevState.files.length !== newState.files.length || prevState.files.filter((i) => newState.files.indexOf(i) === -1).length > 0;
};
/** @type {?} */
export const isChangeStateSelectedFiles = (newState, prevState) => {
    return prevState.selectedFiles.length !== newState.selectedFiles.length || prevState.selectedFiles.filter((i) => newState.selectedFiles.indexOf(i) === -1).length > 0;
};
//# sourceMappingURL=data:application/json;base64,