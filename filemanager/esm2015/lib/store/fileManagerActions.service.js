/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
/**
 * @record
 */
export function IFileManagerPayloadData() { }
if (false) {
    /** @type {?|undefined} */
    IFileManagerPayloadData.prototype.folderId;
    /** @type {?|undefined} */
    IFileManagerPayloadData.prototype.files;
    /** @type {?|undefined} */
    IFileManagerPayloadData.prototype.file;
    /** @type {?|undefined} */
    IFileManagerPayloadData.prototype.fileIds;
    /** @type {?|undefined} */
    IFileManagerPayloadData.prototype.bounds;
}
/**
 * @record
 */
export function IFileManagerAction() { }
if (false) {
    /** @type {?} */
    IFileManagerAction.prototype.payload;
}
/**
 * \@Deprecated - Will be removed in 3.0.0
 */
export class FileManagerActionsService {
    /**
     * \@Deprecated - Will be removed in 3.0.0, use new ChooseFilesAction() instead of it
     * @param {?} files
     * @return {?}
     */
    chooseFiles(files) {
        return {
            type: FileManagerActionsService.FILEMANAGER_CHOOSE_FILES,
            payload: { files }
        };
    }
    /**
     * \@Deprecated - Will be removed in 3.0.0, use new CropFileAction() instead of it
     * @param {?} file
     * @param {?} bounds
     * @return {?}
     */
    cropFile(file, bounds) {
        return {
            type: FileManagerActionsService.FILEMANAGER_CROP_FILE,
            payload: {
                file: file,
                bounds: bounds
            }
        };
    }
    /**
     * \@Deprecated - Will be removed in 3.0.0, use new CropFileSuccessAction() instead of it
     * @param {?} file
     * @return {?}
     */
    cropFileSuccess(file) {
        return {
            type: FileManagerActionsService.FILEMANAGER_CROP_FILE_SUCCESS,
            payload: {
                file: file
            }
        };
    }
    /**
     * \@Deprecated - Will be removed in 3.0.0, use new CropFileErrorAction() instead of it
     * @param {?} file
     * @return {?}
     */
    cropFileError(file) {
        return {
            type: FileManagerActionsService.FILEMANAGER_CROP_FILE_ERROR,
            payload: {
                file: file
            }
        };
    }
    /**
     * \@Deprecated - Will be removed in 3.0.0, use new DeleteFileAction() instead of it
     * @param {?} file
     * @return {?}
     */
    deleteFile(file) {
        return {
            type: FileManagerActionsService.FILEMANAGER_DELETE_FILE,
            payload: {
                file: file
            }
        };
    }
    /**
     * \@Deprecated - Will be removed in 3.0.0, use new DeleteFileSuccessAction() instead of it
     * @param {?} file
     * @return {?}
     */
    deleteFileSuccess(file) {
        return {
            type: FileManagerActionsService.FILEMANAGER_DELETE_FILE_SUCCESS,
            payload: {
                file: file
            }
        };
    }
    /**
     * \@Deprecated - Will be removed in 3.0.0, use new DeleteSelectedFilesAction() instead of it
     * @param {?} fileIds
     * @return {?}
     */
    deleteSelectedFiles(fileIds) {
        return {
            type: FileManagerActionsService.FILEMANAGER_DELETE_FILE_SELECTION,
            payload: { fileIds }
        };
    }
    /**
     * \@Deprecated - Will be removed in 3.0.0, use new DeleteSelectedFilesSuccessAction() instead of it
     * @param {?} files
     * @return {?}
     */
    deleteSelectedFilesSuccess(files) {
        return {
            type: FileManagerActionsService.FILEMANAGER_DELETE_FILE_SELECTION_SUCCESS,
            payload: { files }
        };
    }
    /**
     * \@Deprecated - Will be removed in 3.0.0, use new LoadFilesAction() instead of it
     * @param {?} folderId
     * @return {?}
     */
    loadFiles(folderId) {
        return {
            type: FileManagerActionsService.FILEMANAGER_LOAD_FILES,
            payload: {
                folderId: folderId
            }
        };
    }
    /**
     * \@Deprecated - Will be removed in 3.0.0, use new InverseFilesSelectionAction() instead of it
     * @return {?}
     */
    inverseFileSelection() {
        return {
            type: FileManagerActionsService.FILEMANAGER_INVERSE_FILE_SELECTION,
            payload: {}
        };
    }
    /**
     * \@Deprecated - Will be removed in 3.0.0, use new LoadFilesSuccessAction() instead of it
     * @param {?} folderId
     * @param {?} files
     * @return {?}
     */
    loadFilesSuccess(folderId, files) {
        return {
            type: FileManagerActionsService.FILEMANAGER_LOAD_FILES_SUCCESS,
            payload: {
                folderId: folderId,
                files: files
            }
        };
    }
    /**
     * \@Deprecated - Will be removed in 3.0.0, use new MoveFilesSuccessAction() instead of it
     * @param {?} files
     * @param {?} folderId
     * @return {?}
     */
    moveFileSuccess(files, folderId) {
        return {
            type: FileManagerActionsService.FILEMANAGER_MOVE_FILES_SUCCESS,
            payload: { folderId, files }
        };
    }
    /**
     * \@Deprecated - Will be removed in 3.0.0, use new MoveFilesErrorAction() instead of it
     * @param {?} files
     * @return {?}
     */
    moveFileError(files) {
        return {
            type: FileManagerActionsService.FILEMANAGER_MOVE_FILES_ERROR,
            payload: { files }
        };
    }
    /**
     * \@Deprecated - Will be removed in 3.0.0, use new SelectAllFilesAction() instead of it
     * @return {?}
     */
    selectAllFiles() {
        return {
            type: FileManagerActionsService.FILEMANAGER_SELECT_ALL,
            payload: {}
        };
    }
    /**
     * \@Deprecated - Will be removed in 3.0.0, use new SelectFileAction() instead of it
     * @param {?} file
     * @return {?}
     */
    selectFile(file) {
        return {
            type: FileManagerActionsService.FILEMANAGER_SELECT_FILE,
            payload: {
                file: file
            }
        };
    }
    /**
     * \@Deprecated - Will be removed in 3.0.0, use new UnSelectAllFilesAction() instead of it
     * @return {?}
     */
    unSelectAll() {
        return {
            type: FileManagerActionsService.FILEMANAGER_UNSELECT_ALL,
            payload: {}
        };
    }
    /**
     * \@Deprecated - Will be removed in 3.0.0, use new UnSelectFileAction() instead of it
     * @param {?} file
     * @return {?}
     */
    unSelectFile(file) {
        return {
            type: FileManagerActionsService.FILEMANAGER_UNSELECT_FILE,
            payload: {
                file: file
            }
        };
    }
    /**
     * \@Deprecated - Will be removed in 3.0.0, use new UploadFilesAction() instead of it
     * @param {?} file
     * @return {?}
     */
    upload(file) {
        return {
            type: FileManagerActionsService.FILEMANAGER_UPLOAD_FILE,
            payload: {
                files: [file]
            }
        };
    }
    /**
     * \@Deprecated - Will be removed in 3.0.0, use new UploadFilesSuccessAction() instead of it
     * @param {?} file
     * @return {?}
     */
    uploadSuccess(file) {
        return {
            type: FileManagerActionsService.FILEMANAGER_UPLOAD_FILE_SUCCESS,
            payload: {
                files: [file]
            }
        };
    }
    /**
     * \@Deprecated - Will be removed in 3.0.0, use new UploadFilesErrorAction() instead of it
     * @param {?} file
     * @return {?}
     */
    uploadError(file) {
        return {
            type: FileManagerActionsService.FILEMANAGER_UPLOAD_FILE_ERROR,
            payload: {
                files: [file]
            }
        };
    }
}
FileManagerActionsService.FILEMANAGER_CHOOSE_FILES = 'FILEMANAGER_CHOOSE_FILES';
FileManagerActionsService.FILEMANAGER_CROP_FILE = 'FILEMANAGER_CROP_FILE';
FileManagerActionsService.FILEMANAGER_CROP_FILE_SUCCESS = 'FILEMANAGER_CROP_FILE_SUCCESS';
FileManagerActionsService.FILEMANAGER_CROP_FILE_ERROR = 'FILEMANAGER_CROP_FILE_ERROR';
FileManagerActionsService.FILEMANAGER_DELETE_FILE = 'FILEMANAGER_DELETE_FILE';
FileManagerActionsService.FILEMANAGER_DELETE_FILE_SUCCESS = 'FILEMANAGER_DELETE_FILE_SUCCESS';
FileManagerActionsService.FILEMANAGER_DELETE_FILE_SELECTION = 'FILEMANAGER_DELETE_FILE_SELECTION';
FileManagerActionsService.FILEMANAGER_DELETE_FILE_SELECTION_SUCCESS = 'FILEMANAGER_DELETE_FILE_SELECTION_SUCCESS';
FileManagerActionsService.FILEMANAGER_INVERSE_FILE_SELECTION = 'FILEMANAGER_INVERSE_FILE_SELECTION';
FileManagerActionsService.FILEMANAGER_LOAD_FILES = 'FILEMANAGER_LOAD_FILES';
FileManagerActionsService.FILEMANAGER_LOAD_FILES_SUCCESS = 'FILEMANAGER_LOAD_FILES_SUCCESS';
FileManagerActionsService.FILEMANAGER_MOVE_FILES_SUCCESS = 'FILEMANAGER_MOVE_FILES_SUCCESS';
FileManagerActionsService.FILEMANAGER_MOVE_FILES_ERROR = 'FILEMANAGER_MOVE_FILES_ERROR';
FileManagerActionsService.FILEMANAGER_SELECT_ALL = 'FILEMANAGER_SELECT_ALL';
FileManagerActionsService.FILEMANAGER_SELECT_FILE = 'FILEMANAGER_SELECT_FILE';
FileManagerActionsService.FILEMANAGER_UNSELECT_FILE = 'FILEMANAGER_UNSELECT_FILE';
FileManagerActionsService.FILEMANAGER_UNSELECT_ALL = 'FILEMANAGER_UNSELECT_ALL';
FileManagerActionsService.FILEMANAGER_UPLOAD_FILE = 'FILEMANAGER_UPLOAD_FILE';
FileManagerActionsService.FILEMANAGER_UPLOAD_FILE_ERROR = 'FILEMANAGER_UPLOAD_FILE_ERROR';
FileManagerActionsService.FILEMANAGER_UPLOAD_FILE_SUCCESS = 'FILEMANAGER_UPLOAD_FILE_SUCCESS';
FileManagerActionsService.decorators = [
    { type: Injectable }
];
if (false) {
    /** @type {?} */
    FileManagerActionsService.FILEMANAGER_CHOOSE_FILES;
    /** @type {?} */
    FileManagerActionsService.FILEMANAGER_CROP_FILE;
    /** @type {?} */
    FileManagerActionsService.FILEMANAGER_CROP_FILE_SUCCESS;
    /** @type {?} */
    FileManagerActionsService.FILEMANAGER_CROP_FILE_ERROR;
    /** @type {?} */
    FileManagerActionsService.FILEMANAGER_DELETE_FILE;
    /** @type {?} */
    FileManagerActionsService.FILEMANAGER_DELETE_FILE_SUCCESS;
    /** @type {?} */
    FileManagerActionsService.FILEMANAGER_DELETE_FILE_SELECTION;
    /** @type {?} */
    FileManagerActionsService.FILEMANAGER_DELETE_FILE_SELECTION_SUCCESS;
    /** @type {?} */
    FileManagerActionsService.FILEMANAGER_INVERSE_FILE_SELECTION;
    /** @type {?} */
    FileManagerActionsService.FILEMANAGER_LOAD_FILES;
    /** @type {?} */
    FileManagerActionsService.FILEMANAGER_LOAD_FILES_SUCCESS;
    /** @type {?} */
    FileManagerActionsService.FILEMANAGER_MOVE_FILES_SUCCESS;
    /** @type {?} */
    FileManagerActionsService.FILEMANAGER_MOVE_FILES_ERROR;
    /** @type {?} */
    FileManagerActionsService.FILEMANAGER_SELECT_ALL;
    /** @type {?} */
    FileManagerActionsService.FILEMANAGER_SELECT_FILE;
    /** @type {?} */
    FileManagerActionsService.FILEMANAGER_UNSELECT_FILE;
    /** @type {?} */
    FileManagerActionsService.FILEMANAGER_UNSELECT_ALL;
    /** @type {?} */
    FileManagerActionsService.FILEMANAGER_UPLOAD_FILE;
    /** @type {?} */
    FileManagerActionsService.FILEMANAGER_UPLOAD_FILE_ERROR;
    /** @type {?} */
    FileManagerActionsService.FILEMANAGER_UPLOAD_FILE_SUCCESS;
}
//# sourceMappingURL=data:application/json;base64,