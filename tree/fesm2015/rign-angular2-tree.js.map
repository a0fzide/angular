{"version":3,"file":"rign-angular2-tree.js.map","sources":["ng://@rign/angular2-tree/lib/store/treeActions.service.ts","ng://@rign/angular2-tree/lib/store/treeReducer.ts","ng://@rign/angular2-tree/lib/models/TreeModel.ts","ng://@rign/angular2-tree/lib/item/item.component.ts","ng://@rign/angular2-tree/lib/dragAndDrop/dragAndDrop.service.ts","ng://@rign/angular2-tree/lib/tree.component.ts","ng://@rign/angular2-tree/lib/dragAndDrop/draggable.directive.ts","ng://@rign/angular2-tree/lib/dragAndDrop/droppable.directive.ts","ng://@rign/angular2-tree/lib/dragAndDrop/dropzone/dropzone.component.ts","ng://@rign/angular2-tree/lib/service/nodesDispatcher.service.ts","ng://@rign/angular2-tree/lib/store/treeEffects.service.ts","ng://@rign/angular2-tree/lib/service/treeModelGenerator.service.ts","ng://@rign/angular2-tree/lib/parents-list/parents-list.component.ts","ng://@rign/angular2-tree/lib/service/node.service.ts","ng://@rign/angular2-tree/lib/service/initializer.service.ts","ng://@rign/angular2-tree/lib/tree.module.ts"],"sourcesContent":["import {IOuterNode} from '../interfaces/IOuterNode';\nimport {Action} from '@ngrx/store';\nimport {IConfiguration} from '../interfaces/IConfiguration';\n\nexport enum TreeActionTypes {\n  TREE_SAVE_NODE = 'TREE_SAVE_NODE',\n  TREE_SAVE_NODE_SUCCESS = 'TREE_SAVE_NODE_SUCCESS',\n  TREE_SAVE_NODE_ERROR = 'TREE_SAVE_NODE_ERROR',\n  TREE_DELETE_NODE = 'TREE_DELETE_NODE',\n  TREE_DELETE_NODE_SUCCESS = 'TREE_DELETE_NODE_SUCCESS',\n  TREE_DELETE_NODE_ERROR = 'TREE_DELETE_NODE_ERROR',\n  TREE_EDIT_NODE_START = 'TREE_EDIT_NODE_START',\n  TREE_COLLAPSE_NODE = 'TREE_COLLAPSE_NODE',\n  TREE_EXPAND_NODE = 'TREE_EXPAND_NODE',\n  TREE_INSERT_NODE = 'TREE_INSERT_NODE',\n  TREE_LOAD = 'TREE_LOAD',\n  TREE_LOAD_PATH = 'TREE_LOAD_PATH',\n  TREE_LOAD_SUCCESS = 'TREE_LOAD_SUCCESS',\n  TREE_LOAD_ERROR = 'TREE_LOAD_ERROR',\n  TREE_MARK_AS_FULLY_LOADED = 'TREE_MARK_AS_FULLY_LOADED',\n  TREE_MOVE_NODE = 'TREE_MOVE_NODE',\n  TREE_MOVE_NODE_SUCCESS = 'TREE_MOVE_NODE_SUCCESS',\n  TREE_MOVE_NODE_ERROR = 'TREE_MOVE_NODE_ERROR',\n  TREE_REGISTER = 'TREE_REGISTER',\n  TREE_SELECT_NODE = 'TREE_SELECT_NODE',\n  TREE_SET_ALL_NODES = 'TREE_SET_ALL_NODES',\n  TREE_SET_CONFIGURATION = 'TREE_SET_CONFIGURATION'\n}\n\nexport class TreeCollapseNodeAction implements Action {\n  readonly type = TreeActionTypes.TREE_COLLAPSE_NODE;\n\n  public constructor(public payload: { treeId: string, id: string }) {\n\n  }\n}\n\nexport class TreeDeleteNodeAction implements Action {\n  readonly type = TreeActionTypes.TREE_DELETE_NODE;\n\n  public constructor(public payload: { treeId: string, node: IOuterNode }) {\n\n  }\n}\n\nexport class TreeDeleteNodeErrorAction implements Action {\n  readonly type = TreeActionTypes.TREE_DELETE_NODE_ERROR;\n\n  public constructor(public payload: { treeId: string, node: IOuterNode }) {\n\n  }\n}\n\nexport class TreeDeleteNodeSuccessAction implements Action {\n  readonly type = TreeActionTypes.TREE_DELETE_NODE_SUCCESS;\n\n  public constructor(public payload: { treeId: string, node: IOuterNode }) {\n\n  }\n}\n\nexport class TreeEditNodeStartAction implements Action {\n  readonly type = TreeActionTypes.TREE_EDIT_NODE_START;\n\n  public constructor(public payload: { node: IOuterNode }) {\n\n  }\n}\n\nexport class TreeExpandNodeAction implements Action {\n  readonly type = TreeActionTypes.TREE_EXPAND_NODE;\n\n  public constructor(public payload: { treeId: string, id: string }) {\n\n  }\n}\n\nexport class TreeInsertNodeAction implements Action {\n  readonly type = TreeActionTypes.TREE_INSERT_NODE;\n\n  public constructor(public payload: { treeId: string, parentId: string }) {\n\n  }\n}\n\nexport class TreeLoadNodesAction implements Action {\n  readonly type = TreeActionTypes.TREE_LOAD;\n\n  public constructor(public payload: { treeId: string, id: string }) {\n\n  }\n}\n\nexport class TreeLoadNodesErrorAction implements Action {\n  readonly type = TreeActionTypes.TREE_LOAD_ERROR;\n\n  public constructor(public payload: { treeId: string, id: string }) {\n\n  }\n}\n\nexport class TreeLoadNodesSuccessAction implements Action {\n  readonly type = TreeActionTypes.TREE_LOAD_SUCCESS;\n\n  public constructor(public payload: { treeId: string, id: string, nodes: IOuterNode[] }) {\n\n  }\n}\n\nexport class TreeLoadPathAction implements Action {\n  readonly type = TreeActionTypes.TREE_LOAD_PATH;\n\n  public constructor(public payload: { treeId: string, ids: string[] }) {\n\n  }\n}\n\nexport class TreeMarkAsFullyLoadedAction implements Action {\n  readonly type = TreeActionTypes.TREE_MARK_AS_FULLY_LOADED;\n\n  public constructor(public payload: { treeId: string }) {\n\n  }\n}\n\nexport class TreeMoveNodeAction implements Action {\n  readonly type = TreeActionTypes.TREE_MOVE_NODE;\n\n  public constructor(public payload: { treeId: string, sourceOfDroppedData: string, oldNode: any, node: IOuterNode }) {\n\n  }\n}\n\nexport class TreeMoveNodeErrorAction implements Action {\n  readonly type = TreeActionTypes.TREE_MOVE_NODE_ERROR;\n\n  public constructor(public payload: { treeId: string, source: IOuterNode, target: IOuterNode }) {\n\n  }\n}\n\nexport class TreeMoveNodeSuccessAction implements Action {\n  readonly type = TreeActionTypes.TREE_MOVE_NODE_SUCCESS;\n\n  public constructor(public payload: { treeId: string, source: IOuterNode, target: IOuterNode }) {\n\n  }\n}\n\nexport class TreeRegisterAction implements Action {\n  readonly type = TreeActionTypes.TREE_REGISTER;\n\n  public constructor(public payload: { treeId: string, silent: boolean, nodes: IOuterNode[] }) {\n\n  }\n}\n\nexport class TreeSaveNodeAction implements Action {\n  readonly type = TreeActionTypes.TREE_SAVE_NODE;\n\n  public constructor(public payload: { treeId: string, node: IOuterNode }) {\n\n  }\n}\n\nexport class TreeSaveNodeErrorAction implements Action {\n  readonly type = TreeActionTypes.TREE_SAVE_NODE_ERROR;\n\n  public constructor(public payload: { treeId: string, node: IOuterNode }) {\n\n  }\n}\n\nexport class TreeSaveNodeSuccessAction implements Action {\n  readonly type = TreeActionTypes.TREE_SAVE_NODE_SUCCESS;\n\n  public constructor(public payload: { treeId: string, node: IOuterNode, oldNode: IOuterNode }) {\n\n  }\n}\n\nexport class TreeSelectNodeAction implements Action {\n  readonly type = TreeActionTypes.TREE_SELECT_NODE;\n\n  public constructor(public payload: { treeId: string, node: IOuterNode }) {\n\n  }\n}\n\nexport class TreeSetAllNodesAction implements Action {\n  readonly type = TreeActionTypes.TREE_SET_ALL_NODES;\n\n  public constructor(public payload: { treeId: string, nodes: IOuterNode[] }) {\n\n  }\n}\n\nexport class TreeSetConfigurationAction implements Action {\n  readonly type = TreeActionTypes.TREE_SET_CONFIGURATION;\n\n  public constructor(public payload: { treeId: string, configuration: IConfiguration }) {\n\n  }\n}\n\nexport type TreeAction =\n  TreeCollapseNodeAction\n  | TreeDeleteNodeAction\n  | TreeDeleteNodeErrorAction\n  | TreeDeleteNodeSuccessAction\n  | TreeEditNodeStartAction\n  | TreeExpandNodeAction\n  | TreeInsertNodeAction\n  | TreeLoadNodesAction\n  | TreeLoadNodesErrorAction\n  | TreeLoadNodesSuccessAction\n  | TreeLoadNodesSuccessAction\n  | TreeLoadPathAction\n  | TreeMarkAsFullyLoadedAction\n  | TreeMoveNodeAction\n  | TreeMoveNodeErrorAction\n  | TreeMoveNodeSuccessAction\n  | TreeRegisterAction\n  | TreeSaveNodeAction\n  | TreeSaveNodeErrorAction\n  | TreeSaveNodeSuccessAction\n  | TreeSelectNodeAction\n  | TreeSetAllNodesAction\n  | TreeSetConfigurationAction\n  ;\n","import {ITreeConfiguration, ITreeData, ITreeNodes, ITreeState} from './ITreeState';\nimport {\n  TreeAction,\n  TreeActionTypes,\n  TreeCollapseNodeAction,\n  TreeDeleteNodeSuccessAction,\n  TreeExpandNodeAction,\n  TreeInsertNodeAction,\n  TreeLoadNodesSuccessAction,\n  TreeMarkAsFullyLoadedAction,\n  TreeMoveNodeSuccessAction,\n  TreeRegisterAction,\n  TreeSaveNodeSuccessAction,\n  TreeSelectNodeAction,\n  TreeSetAllNodesAction,\n  TreeSetConfigurationAction\n} from './treeActions.service';\nimport {IOuterNode} from '../interfaces/IOuterNode';\nimport {createFeatureSelector, createSelector} from '@ngrx/store';\nimport {MemoizedSelector} from '@ngrx/store/src/selector';\n\nexport const NEW_NODE_ID = 'ri-new-node-id';\n\nexport const emptyTreeData: ITreeData = {\n  nodes: {\n    entities: {},\n    previouslySelected: null,\n    selected: null,\n    rootNodes: [],\n    expanded: [],\n  },\n  configuration: {\n    isFullyLoaded: false\n  }\n};\n\nfunction copyState(state: ITreeState, treeId: string = null) {\n  const newState = {...state};\n\n  // todo: find better way to clone object\n  if (treeId) {\n    newState[treeId] = {\n      nodes: {\n        entities: {...state[treeId].nodes.entities},\n        previouslySelected: state[treeId].nodes.previouslySelected,\n        selected: state[treeId].nodes.selected,\n        rootNodes: [...state[treeId].nodes.rootNodes],\n        expanded: [...state[treeId].nodes.expanded],\n      },\n      configuration: {...state[treeId].configuration}\n    };\n  }\n\n  return newState;\n}\n\nfunction removeNode(state: ITreeState, action: TreeDeleteNodeSuccessAction): ITreeState {\n  const newState = copyState(state, action.payload.treeId);\n  const treeId = action.payload.treeId;\n  const treeState = newState[treeId];\n  const node = action.payload.node;\n  const parentId = node.parentId;\n\n  delete treeState.nodes.entities[node.id];\n\n  if (parentId) {\n    const parent = {...treeState.nodes.entities[parentId]};\n\n    if (parent.children) {\n      parent.children = parent.children.filter((id) => id !== node.id);\n    }\n    treeState.nodes.entities[parentId] = parent;\n  } else {\n    treeState.nodes.rootNodes = treeState.nodes.rootNodes.filter((id) => id !== node.id);\n  }\n\n  return newState;\n}\n\n\nfunction loadNodes(state: ITreeState, action: TreeLoadNodesSuccessAction) {\n  const newState = copyState(state, action.payload.treeId);\n  let parent: IOuterNode | null = null;\n  const treeId = action.payload.treeId;\n  const parentId = action.payload.id;\n\n  if (parentId) {\n    parent = newState[treeId].nodes.entities[parentId];\n    parent.children = [];\n  } else {\n    newState[treeId].nodes.entities = {};\n  }\n\n  action.payload.nodes.forEach((nodeData: IOuterNode) => {\n    nodeData.treeId = treeId;\n    if (parent) {\n      parent.children.push(nodeData.id);\n      nodeData.parents = [...parent.parents, ...[parent.id]];\n    } else {\n      nodeData.parents = [];\n    }\n\n    newState[treeId].nodes.entities[nodeData.id] = nodeData;\n\n    if (!parentId) {\n      newState[treeId].nodes.rootNodes.push(nodeData.id);\n    }\n  });\n\n  return newState;\n}\n\n\nfunction expandNode(state: ITreeState, action: TreeExpandNodeAction): ITreeState {\n  const treeId = action.payload.treeId;\n  const newState = copyState(state, treeId);\n  const nodeId = action.payload.id;\n\n  // newState[treeId].nodes.entities[nodeId] = Object.assign({}, newState[treeId].nodes.entities[nodeId], {isExpanded: true});\n  newState[treeId].nodes.expanded = [...newState[treeId].nodes.expanded, nodeId];\n\n  return newState;\n}\n\n\nfunction collapseNode(state: ITreeState, action: TreeCollapseNodeAction): ITreeState {\n  const treeId = action.payload.treeId;\n  const newState = copyState(state, treeId);\n  const nodeId = action.payload.id;\n\n  // newState[treeId].nodes.entities[nodeId] = {...newState[treeId].nodes.entities[nodeId], ...{isExpanded: false}};\n  newState[treeId].nodes.expanded = newState[treeId].nodes.expanded.filter((id) => id !== nodeId);\n\n\n  return newState;\n}\n\n\nfunction insertNode(state: ITreeState, action: TreeInsertNodeAction): ITreeState {\n  const treeId = action.payload.treeId;\n  const newState = copyState(state, treeId);\n  const parentId = action.payload.parentId;\n  const newNode: IOuterNode = {\n    id: NEW_NODE_ID,\n    treeId: treeId,\n    name: 'New data',\n    parentId: parentId,\n    children: [],\n    parents: [],\n    isExpanded: false\n  };\n\n  newState[treeId].nodes.entities[NEW_NODE_ID] = newNode;\n\n  if (!parentId) {\n    newState[treeId].nodes.rootNodes = [...newState[treeId].nodes.rootNodes, NEW_NODE_ID];\n  }\n\n  return newState;\n}\n\nfunction saveNode(state: ITreeState, action: TreeSaveNodeSuccessAction): ITreeState {\n  const newState = copyState(state, action.payload.treeId);\n  const old = action.payload.oldNode;\n  const newNode = action.payload.node;\n  const treeId = action.payload.treeId;\n  const treeState = newState[treeId].nodes.entities;\n\n  if (treeState[NEW_NODE_ID]) {\n    delete treeState[NEW_NODE_ID];\n  } else {\n    delete treeState[old.id];\n  }\n\n  const nodeId = newNode.id;\n  treeState[nodeId] = newNode;\n\n  const parentId = newNode.parentId;\n  const parent = treeState[parentId] || null;\n\n  newNode.parents = [];\n\n  if (parentId) {\n    if (parent) {\n      if (!parent.children) {\n        parent.children = [];\n      }\n\n      parent.children.push(nodeId);\n\n      newNode.parents = [...parent.parents, parent.id];\n    }\n  } else if (old.id === NEW_NODE_ID) {\n    newState[treeId].nodes.rootNodes = newState[treeId].nodes.rootNodes.filter((id) => id !== NEW_NODE_ID);\n    newState[treeId].nodes.rootNodes.push(nodeId);\n  }\n\n  return newState;\n}\n\nfunction moveNode(state: ITreeState, action: TreeMoveNodeSuccessAction) {\n  const newState = copyState(state, action.payload.treeId);\n  const oldNode = action.payload.source;\n  const newNode = action.payload.target;\n  const treeId = action.payload.treeId;\n  const treeData = newState[treeId];\n  const treeState = newState[treeId].nodes.entities;\n\n  // remove info about removed child\n  if (oldNode.parentId) {\n    treeState[oldNode.parentId].children = treeState[oldNode.parentId].children.filter((id) => id !== oldNode.id);\n  } else {\n    treeData.nodes.rootNodes = treeData.nodes.rootNodes.filter((id) => id !== oldNode.id);\n  }\n\n  // add info about moved node\n  if (newNode.parentId) {\n    const newParent = treeState[newNode.parentId];\n\n    if (newParent.children) {\n      newParent.children.push(newNode.id);\n    }\n\n    newNode.parents = [...newParent.parents, newParent.id];\n  } else {\n    treeData.nodes.rootNodes.push(newNode.id);\n    newNode.parents = [];\n  }\n\n  // replace node data\n  treeState[newNode.id] = {...newNode};\n\n  return newState;\n}\n\nfunction registerTree(state: ITreeState, action: TreeRegisterAction) {\n  const newState = copyState(state);\n\n  newState[action.payload.treeId] = {\n    nodes: {\n      entities: {...emptyTreeData.nodes.entities},\n      previouslySelected: emptyTreeData.nodes.previouslySelected,\n      selected: emptyTreeData.nodes.selected,\n      rootNodes: [...emptyTreeData.nodes.rootNodes],\n      expanded: [...emptyTreeData.nodes.expanded]\n    },\n    configuration: {...emptyTreeData.configuration}\n  };\n\n  return newState;\n}\n\n\nfunction setAllNodes(state: ITreeState, action: TreeSetAllNodesAction): ITreeState {\n  const newState = copyState(state, action.payload.treeId);\n  const treeId = action.payload.treeId;\n  const nodes = action.payload.nodes;\n  const newNodes: ITreeNodes = {};\n  const ids: string[] = nodes.map((nodeData: IOuterNode) => nodeData.id);\n\n  nodes.forEach((nodeData: IOuterNode) => {\n    nodeData.treeId = treeId;\n    newNodes[nodeData.id] = nodeData;\n\n    if (nodeData.parentId === null) {\n      newState[treeId].nodes.rootNodes.push(nodeData.id);\n    }\n  });\n\n  newState[treeId].nodes.rootNodes.forEach((id) => updateParents(newNodes, id));\n\n  newState[treeId].nodes.entities = newNodes;\n\n  return newState;\n}\n\nfunction updateParents(nodes: ITreeNodes, nodeId: string, parents: string[] = []): void {\n  const node: IOuterNode = nodes[nodeId];\n\n  if (node) {\n    node.parents = [...parents];\n\n    if (node.children.length > 0) {\n      const newParents = [...parents, ...[node.id]];\n\n      node.children.forEach(childId => updateParents(nodes, childId, newParents));\n    }\n  }\n}\n\nfunction markTreeAsFullyLoaded(state: ITreeState, action: TreeMarkAsFullyLoadedAction): ITreeState {\n  const treeId = action.payload.treeId;\n  const newState = copyState(state, treeId);\n\n  newState[treeId].configuration = {...newState[treeId].configuration, ...{isFullyLoaded: true}};\n\n  return newState;\n}\n\nfunction setConfiguration(state: ITreeState, action: TreeSetConfigurationAction): ITreeState {\n  const treeId = action.payload.treeId;\n  const newState = copyState(state, treeId);\n\n  newState[treeId].configuration = {...newState[treeId].configuration, ...action.payload.configuration};\n\n  return newState;\n}\n\nfunction selectNode(state: ITreeState, action: TreeSelectNodeAction) {\n  const treeId = action.payload.treeId;\n  const node = action.payload.node;\n  const newState = copyState(state, treeId);\n\n  newState[treeId].nodes.previouslySelected = newState[treeId].nodes.selected;\n  newState[treeId].nodes.selected = node ? node.id : null;\n\n  return newState;\n}\n\nexport function treeReducer(state: ITreeState = {}, action: TreeAction): ITreeState {\n  switch (action.type) {\n    case TreeActionTypes.TREE_REGISTER:\n      return registerTree(state, action);\n    case TreeActionTypes.TREE_SAVE_NODE_SUCCESS:\n      return saveNode(state, action);\n    case TreeActionTypes.TREE_DELETE_NODE_SUCCESS:\n      return removeNode(state, action);\n    case TreeActionTypes.TREE_INSERT_NODE:\n      return insertNode(state, action);\n    case TreeActionTypes.TREE_LOAD_SUCCESS:\n      return loadNodes(state, action);\n    case TreeActionTypes.TREE_MOVE_NODE_SUCCESS:\n      return moveNode(state, action);\n    case TreeActionTypes.TREE_SET_ALL_NODES:\n      return setAllNodes(state, action);\n    case TreeActionTypes.TREE_MARK_AS_FULLY_LOADED:\n      return markTreeAsFullyLoaded(state, action);\n    case TreeActionTypes.TREE_SET_CONFIGURATION:\n      return setConfiguration(state, action);\n    case TreeActionTypes.TREE_EXPAND_NODE:\n      return expandNode(state, action);\n    case TreeActionTypes.TREE_COLLAPSE_NODE:\n      return collapseNode(state, action);\n    case TreeActionTypes.TREE_SELECT_NODE:\n      return selectNode(state, action);\n    case TreeActionTypes.TREE_DELETE_NODE:\n    case TreeActionTypes.TREE_EDIT_NODE_START:\n    case TreeActionTypes.TREE_LOAD:\n    case TreeActionTypes.TREE_MOVE_NODE:\n    case TreeActionTypes.TREE_SAVE_NODE:\n      return state;\n    default:\n      return state;\n  }\n\n}\n\nexport const treeStateSelector: MemoizedSelector<object, ITreeState> = createFeatureSelector<ITreeState>('trees');\n\nexport function treeSelector(treeId: string): MemoizedSelector<object, ITreeData> {\n  return createSelector(treeStateSelector, (state: ITreeState) => state[treeId] || null);\n}\n\nexport function treeConfigurationSelector(treeId: string): MemoizedSelector<object, ITreeConfiguration> {\n  return createSelector(treeStateSelector, (state: ITreeState) => state[treeId].configuration || null);\n}\n\nexport function expandedNodesSelector(treeId: string): MemoizedSelector<object, string[]> {\n  return createSelector(treeStateSelector, (state: ITreeState) => state[treeId].nodes.expanded || []);\n}\n\nexport function selectedNodeSelector(treeId: string): MemoizedSelector<object, string> {\n  return createSelector(treeStateSelector, (state: ITreeState) => state[treeId].nodes.selected || null);\n}\n\nexport function previouslySelectedNodeSelector(treeId: string): MemoizedSelector<object, string> {\n  return createSelector(treeStateSelector, (state: ITreeState) => state[treeId].nodes.previouslySelected || null);\n}\n","import {IOuterNode} from '../interfaces/IOuterNode';\nimport {IConfiguration} from '../interfaces/IConfiguration';\nimport {ITreeData, ITreeNodes, ITreeState} from '../store/ITreeState';\nimport {distinctUntilChanged, map} from 'rxjs/operators';\nimport * as _isEqual from 'lodash.isequal';\nimport {\n  expandedNodesSelector,\n  NEW_NODE_ID,\n  previouslySelectedNodeSelector,\n  selectedNodeSelector\n} from '../store/treeReducer';\nimport {select, Store} from '@ngrx/store';\nimport {TreeLoadPathAction} from '../store/treeActions.service';\nimport {combineLatest, Observable, Subscription} from 'rxjs';\n\nconst isEqual = _isEqual;\n\nexport class TreeModel {\n\n  public get treeId(): string {\n    return this.configuration.treeId;\n  }\n\n  public get isFullyLoaded(): boolean {\n    return this._fullyLoaded;\n  }\n\n  public nodes$: Observable<ITreeNodes>;\n  public rootNodes$: Observable<IOuterNode[]>;\n  public currentSelectedNode$: Observable<IOuterNode>;\n  private expanded: Set<string>;\n  private selected: string = null;\n  private previouslySelected: string = null;\n\n  private subscription = new Subscription();\n\n  public constructor(protected store: Store<ITreeState>,\n                     protected treeData$: Observable<ITreeData>,\n                     public configuration: IConfiguration,\n                     protected _fullyLoaded = false) {\n    this.nodes$ = this.treeData$\n      .pipe(\n        distinctUntilChanged((prev: ITreeData, next: ITreeData) => {\n          return isEqual(prev.nodes.entities, next.nodes.entities);\n        }),\n        map((treeData: ITreeData): ITreeNodes => treeData.nodes.entities)\n      );\n\n    this.rootNodes$ = this.treeData$\n      .pipe(\n        map((treeData: ITreeData): IOuterNode[] => treeData.nodes.rootNodes.map((id) => treeData.nodes.entities[id]).sort(this.sortNodes)),\n        distinctUntilChanged(),\n      );\n\n    this.currentSelectedNode$ = this.treeData$\n      .pipe(\n        map((treeData: ITreeData): IOuterNode => {\n          const nodesData = treeData.nodes;\n          const selectedId = nodesData.selected;\n\n          return selectedId ? nodesData.entities[selectedId] : null;\n        }),\n        // distinctUntilChanged((prev: IOuterNode, next: IOuterNode) => {\n        //   return isEqual(prev ? prev.id : null, next ? next.id : null)\n        // })\n      );\n\n    this.initConfiguration();\n    this.subscribeExpanded();\n    this.subscribeSelected();\n    this.subscribePreviouslySelected();\n  }\n\n  public destroy(): void {\n    this.subscription.unsubscribe();\n  }\n\n  public getParentsList(): Observable<IOuterNode[]> {\n    return combineLatest(\n      this.currentSelectedNode$,\n      this.nodes$\n    )\n      .pipe(\n        map(([currentNode, nodes]: [IOuterNode, ITreeNodes]): IOuterNode[] => {\n          if (!Boolean(currentNode)) {\n            return [];\n          }\n\n          const parents: IOuterNode[] = currentNode.parents.map(id => nodes[id]);\n\n          parents.push(currentNode);\n\n          return parents;\n        })\n      );\n  }\n\n  public getChildren(nodeId: string | null): Observable<IOuterNode[]> {\n    return this.nodes$\n      .pipe(\n        map((state: ITreeNodes): IOuterNode[] => this.getNodesByParentId(state, nodeId)),\n        map((nodes: IOuterNode[]) => {\n          return [...nodes].sort(this.sortNodes);\n        })\n      );\n  }\n\n  public initPath(path: string[]): void {\n    this.store.dispatch(new TreeLoadPathAction({treeId: this.configuration.treeId, ids: path}));\n  }\n\n  public isExpanded(node: IOuterNode): boolean {\n    if (!node) {\n      return false;\n    }\n\n    return this.expanded.has(node.id);\n  }\n\n  public isSelected(node: IOuterNode): boolean {\n    if (!node) {\n      return false;\n    }\n\n    return this.selected === node.id;\n  }\n\n  public wasPreviouslySelected(nodeId: string): boolean {\n    return this.previouslySelected === nodeId;\n  }\n\n  private initConfiguration(): void {\n    const defaultConfiguration: IConfiguration = {\n      disableMoveNodes: false,\n      dragZone: null,\n      dropZone: null,\n      treeId: 'tree',\n      showAddButton: true,\n      isAnimation: false,\n    };\n\n    for (const key in defaultConfiguration) {\n      if (this.configuration[key] === undefined) {\n        this.configuration[key] = defaultConfiguration[key];\n      }\n    }\n  }\n\n  private getNodesByParentId(state: ITreeNodes, id: string | null): IOuterNode[] {\n    return Object.keys(state)\n      .filter((key: string) => state[key].parentId === id)\n      .map((key: string) => state[key]);\n  }\n\n  private sortNodes(first: IOuterNode, second: IOuterNode): number {\n    if (second.id === NEW_NODE_ID) {\n      return -1;\n    }\n\n    return first.name > second.name ? 1 : -1;\n  }\n\n  private subscribeExpanded(): void {\n    this.subscription.add(\n      this.store\n        .pipe(\n          select(expandedNodesSelector(this.treeId))\n        )\n        .subscribe((expanded: string[]) => this.expanded = new Set(expanded))\n    );\n  }\n\n  private subscribeSelected(): void {\n    this.subscription.add(\n      this.store\n        .pipe(\n          select(selectedNodeSelector(this.treeId))\n        )\n        .subscribe((selected: string) => this.selected = selected)\n    );\n  }\n\n  private subscribePreviouslySelected(): void {\n    this.subscription.add(\n      this.store\n        .pipe(\n          select(previouslySelectedNodeSelector(this.treeId))\n        )\n        .subscribe((selected: string) => this.previouslySelected = selected)\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {ContextMenuComponent, ContextMenuService} from 'ngx-contextmenu';\nimport {IOuterNode} from '../interfaces/IOuterNode';\nimport {\n  TreeActionTypes,\n  TreeCollapseNodeAction,\n  TreeDeleteNodeAction,\n  TreeEditNodeStartAction,\n  TreeExpandNodeAction,\n  TreeSaveNodeAction,\n  TreeSelectNodeAction\n} from '../store/treeActions.service';\nimport {TreeModel} from '../models/TreeModel';\nimport {Actions} from '@ngrx/effects';\nimport {animate, state, style, transition, trigger} from '@angular/animations';\nimport {AnimationTriggerMetadata} from '@angular/animations/src/animation_metadata';\nimport {select, Store} from '@ngrx/store';\nimport {ITreeState} from '../store/ITreeState';\nimport {NEW_NODE_ID, previouslySelectedNodeSelector} from '../store/treeReducer';\nimport {filter} from 'rxjs/operators';\nimport {empty, Observable, Subscription} from 'rxjs';\n\n\nexport function expand(): AnimationTriggerMetadata {\n  return trigger('expand', [\n    state('*', style({'overflow-y': 'hidden'})),\n    state('void', style({'overflow-y': 'hidden'})),\n    transition('* => void', [\n      style({height: '*'}),\n      animate(300, style({height: 0}))\n    ]),\n    transition('void => *', [\n      style({height: '0'}),\n      animate(300, style({height: '*'}))\n    ])\n  ]);\n}\n\n@Component({\n  encapsulation: ViewEncapsulation.None,\n  selector: 'ri-tree-item',\n  templateUrl: './item.component.html',\n  styleUrls: ['./item.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [expand()]\n})\nexport class ItemComponent implements OnInit, OnDestroy, OnChanges {\n  /**\n   * Input field where we can change data name\n   */\n  @ViewChild('inputElement') input: any;\n\n  /**\n   * Node instance\n   */\n  @Input()\n  public set node(node: IOuterNode) {\n    this._node = node;\n\n    this.initEditModeIfNeeded(node);\n  }\n\n  public get node(): IOuterNode {\n    return this._node;\n  }\n\n  @Input()\n  public treeModel: TreeModel;\n\n  @Input()\n  public contextMenu: ContextMenuComponent;\n\n  @Input()\n  public isExpanded = false;\n\n  @Input()\n  public isSelected = false;\n\n  /**\n   * Form field to change data name\n   */\n  public nameField = new FormControl();\n\n  public isEditMode = false;\n\n  public children$: Observable<IOuterNode[]> = empty();\n\n  protected isStartSave = false;\n\n  protected subscription = new Subscription();\n\n  protected _node: IOuterNode;\n\n  public constructor(protected contextMenuService: ContextMenuService,\n                     protected actions$: Actions,\n                     protected store: Store<ITreeState>,\n                     protected cdr: ChangeDetectorRef) {\n  }\n\n  public ngOnChanges(values): void {\n    // if node is added to the tree then some part of nodes is moving down\n    // and the new one is inserted, then all sub nodes should be rewritten\n    const node = values.node;\n\n    if (node && !node.firstChange && node.previousValue.id !== node.currentValue.id) {\n      this.children$ = this.getChildren();\n    }\n  }\n\n  public ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n\n  public ngOnInit() {\n    this.children$ = this.getChildren();\n\n    this.subscribeForOnEdit();\n\n    this.subscription.add(\n      this.store\n        .pipe(\n          select(previouslySelectedNodeSelector(this.node.treeId)),\n          filter((previouslySelected: string) => previouslySelected === this.node.id)\n        )\n        .subscribe(() => this.cdr.markForCheck())\n    );\n  }\n\n  /**\n   * Collapse node\n   */\n  public collapse(): void {\n    this.store.dispatch(new TreeCollapseNodeAction({\n      treeId: this.treeModel.treeId,\n      id: this.node.id,\n    }));\n  }\n\n  /**\n   * Expand node\n   */\n  public expand(): void {\n    this.store.dispatch(new TreeExpandNodeAction({treeId: this.treeModel.treeId, id: this.node.id}));\n  }\n\n  public onBlur() {\n    if (this.isStartSave) {\n      this.isStartSave = false;\n    } else {\n      this.undoChanges();\n    }\n  }\n\n  public onChange(event: KeyboardEvent) {\n    event.stopPropagation();\n\n    if (event.keyCode === 27) {\n      this.undoChanges();\n    } else if (event.keyCode === 13) {\n      this.isStartSave = true;\n      const node: IOuterNode = {\n        id: this.node.id,\n        treeId: this.node.treeId,\n        name: this.nameField.value,\n        parentId: this.node.parentId,\n        children: this.node.children,\n        parents: this.node.parents,\n        isExpanded: false\n      };\n\n      this.store.dispatch(new TreeSaveNodeAction({\n        treeId: this.treeModel.treeId,\n        node,\n      }));\n      this.isEditMode = false;\n    }\n  }\n\n  public onContextMenu($event: MouseEvent) {\n    if (!this.treeModel.configuration.disableContextMenu) {\n      this.contextMenuService.show.next({\n        contextMenu: this.contextMenu,\n        event: $event,\n        item: this.node\n      });\n    }\n\n    $event.preventDefault();\n    $event.stopPropagation();\n  }\n\n  public onSelect() {\n    if (this.isSelected) {\n      this.store.dispatch(new TreeSelectNodeAction({\n        treeId: this.treeModel.treeId,\n        node: null,\n      }));\n    } else {\n      this.store.dispatch(new TreeSelectNodeAction({\n        treeId: this.treeModel.treeId,\n        node: this.node,\n      }));\n    }\n  }\n\n  public trackByFn(item: IOuterNode): string {\n    return item.id;\n  }\n\n  protected getChildren(): Observable<IOuterNode[]> {\n    return this.treeModel.getChildren(this.node.id);\n  }\n\n  protected initEditModeIfNeeded(node: IOuterNode) {\n    if (!node) {\n      return;\n    }\n\n    this.isEditMode = node.id === NEW_NODE_ID;\n\n    if (this.isEditMode) {\n      this.nameField.setValue('');\n      this.setFocus();\n    }\n  }\n\n  protected isNewNode() {\n    return this.node.id === NEW_NODE_ID;\n  }\n\n  protected setFocus() {\n    setTimeout(() => this.input.nativeElement.focus(), 0);\n  }\n\n  protected subscribeForOnEdit(): void {\n    this.subscription.add(\n      this.actions$\n        .ofType(TreeActionTypes.TREE_EDIT_NODE_START)\n        .pipe(\n          filter((action: TreeEditNodeStartAction) => action.payload.node === this.node)\n        )\n        .subscribe((action: TreeEditNodeStartAction) => {\n          this.nameField.setValue(this.node.name);\n          this.isEditMode = true;\n          this.cdr.markForCheck();\n          this.setFocus();\n        })\n    );\n  }\n\n  protected undoChanges() {\n    this.isEditMode = false;\n\n    if (this.isNewNode()) {\n      this.store.dispatch(new TreeDeleteNodeAction({\n        treeId: this.treeModel.treeId,\n        node: this.node,\n      }));\n    }\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {IDragAndDrop, IDragElement, IDropElement} from '../interfaces/IDragAndDrop';\nimport {BehaviorSubject, Observable, Subject} from 'rxjs';\nimport {map, withLatestFrom} from 'rxjs/operators';\n\n@Injectable()\nexport class DragAndDrop {\n  public static DROP_DATA_TYPE = 'TREE_NODE';\n\n  protected dropStream$: Subject<IDropElement | null> = new Subject();\n  protected dragStream$: BehaviorSubject<IDragElement | null> = new BehaviorSubject(null);\n\n  public drop$: Observable<any>;\n\n  public constructor() {\n    this.drop$ = this.dropStream$\n      .pipe(\n        withLatestFrom(this.dragStream$),\n        map(([dropNode, dragNode]: [IDropElement, IDragElement]): IDragAndDrop => {\n          return {dragNode: dragNode, dropNode: dropNode, type: dragNode.type};\n        })\n      );\n  }\n\n  public dragStart(dragElement: IDragElement) {\n    this.dragStream$.next(dragElement);\n  }\n\n  public dragEnd(dropElement: IDropElement | null) {\n    this.dropStream$.next(dropElement);\n  }\n\n  public getDragStream(): BehaviorSubject<IDragElement | null> {\n    return this.dragStream$;\n  }\n\n  public getLastDragElement(): IDragElement {\n    return this.dragStream$.getValue();\n  }\n}\n","import {Component, Input, OnChanges, OnDestroy, OnInit, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {IOuterNode} from './interfaces/IOuterNode';\nimport {IContextMenu} from './interfaces/IContextMenu';\nimport {TreeModel} from './models/TreeModel';\nimport {ContextMenuComponent} from 'ngx-contextmenu';\nimport {DragAndDrop} from './dragAndDrop/dragAndDrop.service';\nimport {IDragAndDrop} from './interfaces/IDragAndDrop';\nimport {Store} from '@ngrx/store';\nimport {ITreeState} from './store/ITreeState';\nimport {filter} from 'rxjs/operators';\nimport {\n  TreeDeleteNodeAction,\n  TreeEditNodeStartAction,\n  TreeInsertNodeAction,\n  TreeMoveNodeAction\n} from './store/treeActions.service';\nimport {Observable, Subscription} from 'rxjs';\n\n@Component({\n  encapsulation: ViewEncapsulation.None,\n  selector: 'ri-tree',\n  templateUrl: './tree.component.html',\n  styleUrls: ['./tree.component.scss']\n})\nexport class TreeComponent implements OnInit, OnChanges, OnDestroy {\n  @Input() treeModel: TreeModel;\n\n  @ViewChild('contextMenu') contextMenu: ContextMenuComponent;\n\n  /**\n   * List of default options for context menu\n   */\n  private defaultOptions: IContextMenu[] = [\n    {\n      name: 'onEdit',\n      text: 'RI_TREE_LBL_EDIT_NODE',\n      iconCls: 'fa fa-edit'\n    },\n    {\n      name: 'onDelete',\n      text: 'RI_TREE_LBL_REMOVE_NODE',\n      iconCls: 'fa fa-trash'\n    }\n  ];\n\n  /**\n   * List of context menu items\n   */\n  public menuList: IContextMenu[] = [];\n\n  public rootNodes$: Observable<IOuterNode[]>;\n\n  protected currentSelectedNode: IOuterNode;\n\n  protected subscription = new Subscription();\n\n  public constructor(protected store: Store<ITreeState>,\n                     protected dragAndDrop: DragAndDrop) {\n\n  }\n\n  public ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n\n  public ngOnInit() {\n    this.registerMove();\n\n    this.rootNodes$ = this.treeModel.rootNodes$;\n\n    this.subscription.add(\n      this.treeModel.currentSelectedNode$\n        .subscribe((node: IOuterNode) => this.currentSelectedNode = node)\n    );\n  }\n\n  public ngOnChanges(data: any) {\n    this.menuList = [];\n    this.defaultOptions.forEach((item) => this.menuList.push(item));\n  }\n\n  public onAdd() {\n    const parentId = this.currentSelectedNode ? this.currentSelectedNode.id : null;\n\n    this.store.dispatch(new TreeInsertNodeAction({treeId: this.treeModel.treeId, parentId}));\n  }\n\n  /**\n   * On select item from context menu\n   *\n   * @param name - name of the event\n   * @param node - data item\n   */\n  public onContextMenuClick(name: string, node: IOuterNode) {\n\n    switch (name) {\n      case 'onEdit':\n        event.stopPropagation();\n        this.store.dispatch(new TreeEditNodeStartAction({node}));\n        break;\n      case 'onDelete':\n        this.store.dispatch(new TreeDeleteNodeAction({treeId: this.treeModel.treeId, node}));\n        break;\n      default:\n        console.warn('Unknown context menu action: ' + name);\n    }\n  }\n\n  public trackByFn(item: IOuterNode): string {\n    return item.id;\n  }\n\n  /**\n   * Register data \"move event\"\n   */\n  protected registerMove(): void {\n    if (this.treeModel.configuration.disableMoveNodes) {\n      return;\n    }\n\n    this.dragAndDrop.drop$\n      .pipe(\n        filter((data: IDragAndDrop) => {\n          if (data.type === DragAndDrop.DROP_DATA_TYPE) {\n            if (data.dropNode) {\n              return data.dropNode.data.treeId === this.treeModel.treeId;\n            } else {\n              return data.dragNode.data.treeId === this.treeModel.treeId;\n            }\n          } else {\n            if (data.dropNode && data.dropNode.zones && data.dropNode.zones.indexOf(data.dragNode.zoneId) === -1) {\n              return false;\n            }\n\n            return true;\n          }\n        })\n      )\n      .subscribe((data: IDragAndDrop) => {\n        const dropNode = data.dropNode ? data.dropNode.data : null;\n        this.store.dispatch(new TreeMoveNodeAction({\n            sourceOfDroppedData: data.type,\n            treeId: this.treeModel.treeId,\n            oldNode: data.dragNode.data,\n            node: dropNode\n          }\n        ));\n      });\n  }\n}\n","import {Directive, ElementRef, Input, OnInit, Renderer} from '@angular/core';\nimport {DragAndDrop} from './dragAndDrop.service';\n\n@Directive({\n  selector: '[riDraggable]'\n})\nexport class DraggableDirective implements OnInit {\n  @Input() data: any;\n  @Input() dragZone: string | null = null;\n  @Input() sourceType: string = DragAndDrop.DROP_DATA_TYPE;\n\n  public dragEnabled = true;\n\n  public constructor(protected el: ElementRef,\n                     private renderer: Renderer,\n                     protected dragAndDrop: DragAndDrop) {\n    renderer.listen(el.nativeElement, 'dragstart', ($event) => {\n      if (this.dragEnabled) {\n        this.onDragStart($event);\n      }\n    });\n\n    renderer.listen(el.nativeElement, 'dragend', () => {\n      // on drag end we reset last drag element (this event is fired after drop)\n      this.dragAndDrop.dragStart(null);\n    });\n  }\n\n  private onDragStart($event: DragEvent) {\n    this.dragAndDrop.dragStart({zoneId: this.dragZone, data: this.data, type: this.sourceType});\n\n    $event.dataTransfer.effectAllowed = 'copy';\n    $event.dataTransfer.dropEffect = 'copy';\n  }\n\n  public ngOnInit() {\n    this.el.nativeElement.draggable = this.dragEnabled;\n\n    if (!this.data) {\n      throw new Error('DraggableDirective needs data');\n    }\n  }\n}\n","import {Directive, ElementRef, Input, OnInit, Renderer} from '@angular/core';\nimport {DragAndDrop} from './dragAndDrop.service';\nimport {IOuterNode} from '../interfaces/IOuterNode';\n\nexport interface DropConfig {\n  dropAllowedCssClass?: string;\n  dropZone?: string[] | null;\n}\n\n\n@Directive({\n  selector: '[riDroppable]'\n})\nexport class DroppableDirective implements OnInit {\n  @Input() data: IOuterNode;\n  @Input() dropConfig: DropConfig = {};\n\n  public constructor(protected el: ElementRef, private renderer: Renderer, protected dragAndDrop: DragAndDrop) {\n    renderer.listen(el.nativeElement, 'dragover', ($event) => {\n      $event.preventDefault();\n      const dropAllowed = this.isDropAllowed();\n\n      this.changeTargetCursor($event, dropAllowed);\n      this.toggleDropClass(dropAllowed);\n    });\n\n    renderer.listen(el.nativeElement, 'dragleave', ($event) => {\n      $event.preventDefault();\n      this.toggleDropClass(false);\n    });\n\n    renderer.listen(el.nativeElement, 'drop', () => {\n      this.toggleDropClass(false);\n\n      if (this.isDropAllowed()) {\n        this.dragAndDrop.dragEnd({zones: this.dropConfig.dropZone, data: this.data});\n      }\n    });\n  }\n\n  public ngOnInit() {\n    this.initConfig();\n\n    if (!this.data) {\n      throw new Error('DroppableDirective needs data');\n    }\n  }\n\n  /**\n   * Add or remove additional class when drop allowed\n   * @param dropAllowed\n   */\n  private toggleDropClass(dropAllowed = false) {\n    this.renderer.setElementClass(this.el.nativeElement, this.dropConfig.dropAllowedCssClass, dropAllowed);\n  }\n\n  private isDropAllowed = function () {\n    const lastDragElement = this.dragAndDrop.getLastDragElement();\n    const source = lastDragElement.data;\n    const target = this.data;\n    const dropZone = this.dropConfig.dropZone;\n\n    if (dropZone && dropZone.length > 0 && dropZone.indexOf(lastDragElement.zoneId) === -1) {\n      return false;\n    }\n\n    // todo: check drag and drop zones\n    return !(source === target || target.id === source.parentId || target.parents.indexOf(source.id) > -1);\n  };\n\n  /**\n   * Change drag event cursor\n   * @param $event\n   * @param add\n   */\n  private changeTargetCursor($event: DragEvent, add = false) {\n    const cursorType = add ? 'copy' : 'none';\n\n    $event.dataTransfer.effectAllowed = cursorType;\n    $event.dataTransfer.dropEffect = cursorType;\n  }\n\n  /**\n   * initialize configuration options, use default or passed\n   */\n  private initConfig(): void {\n    const defaultConfig: DropConfig = {\n      dropAllowedCssClass: 'drop-allowed'\n    };\n\n    for (const key in defaultConfig) {\n      if (defaultConfig.hasOwnProperty(key)) {\n        this.dropConfig[key] = this.dropConfig[key] || defaultConfig[key];\n      }\n    }\n  }\n}\n","import {Component, Input} from '@angular/core';\nimport {TreeModel} from '../../models/TreeModel';\nimport {DragAndDrop} from '../dragAndDrop.service';\nimport {IDragAndDrop, IDragElement} from '../../interfaces/IDragAndDrop';\nimport {map} from 'rxjs/operators';\nimport {merge, Observable} from 'rxjs';\n\n@Component({\n  selector: 'ri-dropzone',\n  templateUrl: './dropzone.component.html',\n  styleUrls: ['./dropzone.component.scss']\n})\nexport class DropzoneComponent {\n  @Input() treeModel: TreeModel;\n  @Input() dropZone: string[] = [];\n\n  public isOpen$: Observable<boolean>;\n\n  constructor(public dragAndDrop: DragAndDrop) {\n\n    const isDragStart$ = this.dragAndDrop.getDragStream()\n      .pipe(\n        map((dragElement: IDragElement): boolean => {\n          const isDragElement = !!dragElement && !!dragElement.data;\n\n          if (isDragElement) {\n            if (dragElement.type === DragAndDrop.DROP_DATA_TYPE) {\n              const isNotRootElement = dragElement.data.parentId;\n              const isFromCurrentTree = dragElement.data.treeId === this.treeModel.treeId;\n\n              return (isNotRootElement && isFromCurrentTree) ? true : false;\n            } else {\n              return true;\n            }\n          }\n\n          return false;\n        })\n      );\n\n    const isDragEnd$ = this.dragAndDrop.drop$\n      .pipe(\n        map((data: IDragAndDrop): boolean => {\n          return false;\n        })\n      );\n\n    this.isOpen$ = merge(isDragStart$, isDragEnd$);\n  }\n\n  public onDrop() {\n    this.dragAndDrop.dragEnd(null);\n  }\n\n  public onDragOver($event) {\n    $event.preventDefault();\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {INodeService} from './node.service';\n\n@Injectable()\nexport class NodeDispatcherService {\n  private nodeServices: { [key: string]: INodeService } = {};\n\n  public registerService(name: string, nodeService: INodeService): void {\n    this.nodeServices[name] = nodeService;\n  }\n\n  public get(name: string): INodeService {\n    if (Boolean(this.nodeServices[name])) {\n      return this.nodeServices[name];\n    } else {\n      // default node service provider\n      throw Error(`No tree service with name ${name}`);\n    }\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {Actions, Effect, ofType} from '@ngrx/effects';\nimport {\n  TreeAction,\n  TreeActionTypes,\n  TreeDeleteNodeAction,\n  TreeDeleteNodeErrorAction,\n  TreeDeleteNodeSuccessAction,\n  TreeExpandNodeAction,\n  TreeInsertNodeAction,\n  TreeLoadNodesAction,\n  TreeLoadNodesErrorAction,\n  TreeLoadNodesSuccessAction,\n  TreeLoadPathAction,\n  TreeMoveNodeAction,\n  TreeMoveNodeErrorAction,\n  TreeMoveNodeSuccessAction,\n  TreeRegisterAction,\n  TreeSaveNodeAction,\n  TreeSaveNodeErrorAction,\n  TreeSaveNodeSuccessAction,\n  TreeSetAllNodesAction\n} from './treeActions.service';\nimport {IOuterNode} from '../interfaces/IOuterNode';\nimport {combineLatest, Observable, of} from 'rxjs';\nimport {ITreeActionPayload, ITreeConfiguration, ITreeData, ITreeState} from './ITreeState';\nimport {NodeDispatcherService} from '../service/nodesDispatcher.service';\nimport {DragAndDrop} from '../dragAndDrop/dragAndDrop.service';\nimport {catchError, filter, map, mergeMap, switchMap, take} from 'rxjs/operators';\nimport {select, Store} from '@ngrx/store';\nimport {NEW_NODE_ID, treeConfigurationSelector, treeSelector} from './treeReducer';\n\n@Injectable()\nexport class TreeEffectsService {\n  @Effect()\n  public register$ = this.actions$\n    .pipe(\n      ofType(TreeActionTypes.TREE_REGISTER),\n      map((action: TreeRegisterAction): TreeAction => {\n        if (action.payload.silent) {\n          return new TreeSetAllNodesAction({treeId: action.payload.treeId, nodes: action.payload.nodes});\n        } else {\n          return new TreeLoadNodesAction({treeId: action.payload.treeId, id: null});\n        }\n      })\n    );\n\n  @Effect()\n  public load$ = this.actions$\n    .pipe(\n      ofType(TreeActionTypes.TREE_LOAD),\n      mergeMap((action: TreeLoadNodesAction) => this.loadNodes(action.payload.treeId, action.payload.id)\n        .pipe(\n          map((nodesData: IOuterNode[]): TreeLoadNodesSuccessAction => new TreeLoadNodesSuccessAction({\n            treeId: action.payload.treeId,\n            id: action.payload.id,\n            nodes: nodesData\n          })),\n          catchError(() => of(new TreeLoadNodesErrorAction({\n            treeId: action.payload.treeId,\n            id: action.payload.id\n          })))\n        )\n      )\n    );\n\n\n  @Effect()\n  public delete$ = this.actions$\n    .pipe(\n      ofType(TreeActionTypes.TREE_DELETE_NODE),\n      switchMap((action: TreeDeleteNodeAction) => this.deleteNode(action.payload.treeId, action.payload.node)\n        .pipe(\n          map((): TreeDeleteNodeSuccessAction => new TreeDeleteNodeSuccessAction({...action.payload})),\n          catchError((): Observable<TreeDeleteNodeErrorAction> => of(new TreeDeleteNodeErrorAction({...action.payload})))\n        )\n      )\n    );\n\n\n  @Effect()\n  public save$ = this.actions$\n    .pipe(\n      ofType(TreeActionTypes.TREE_SAVE_NODE),\n      switchMap((action: TreeSaveNodeAction) => this.saveNode(action.payload.treeId, {...action.payload.node})\n        .pipe(\n          map((node: IOuterNode): TreeSaveNodeSuccessAction => new TreeSaveNodeSuccessAction({\n            treeId: action.payload.treeId,\n            oldNode: action.payload.node,\n            node\n          })),\n          catchError(() => of(new TreeSaveNodeErrorAction({...action.payload})))\n        )\n      )\n    );\n\n  @Effect()\n  public move$ = this.actions$\n    .pipe(\n      ofType(TreeActionTypes.TREE_MOVE_NODE),\n      filter((action: TreeMoveNodeAction) => {\n        return action.payload.sourceOfDroppedData === DragAndDrop.DROP_DATA_TYPE;\n      }),\n      switchMap((action: TreeMoveNodeAction) => {\n          const source = <IOuterNode>{...action.payload.oldNode};\n          const target = Boolean(action.payload.node) ? {...action.payload.node} : null;\n\n          return this.moveNode(action.payload.treeId, source, target)\n            .pipe(\n              map((node: IOuterNode): ITreeActionPayload => {\n                return {\n                  treeId: action.payload.treeId,\n                  oldNode: action.payload.oldNode,\n                  node: node\n                };\n              }),\n              switchMap((data: ITreeActionPayload) => {\n                return this.store.select(treeConfigurationSelector(action.payload.treeId))\n                  .pipe(\n                    take(1),\n                    map((configuration: ITreeConfiguration) => {\n                      return {\n                        configuration,\n                        data\n                      };\n                    })\n                  );\n              }),\n              catchError(() => {\n                const newAction = new TreeMoveNodeErrorAction({\n                  treeId: action.payload.treeId,\n                  source: action.payload.oldNode,\n                  target: action.payload.node\n                });\n\n                return of(newAction);\n              })\n            );\n        }\n      ),\n      mergeMap((value: { data: ITreeActionPayload, configuration: ITreeConfiguration }) => {\n        const data = value.data;\n        const actions: TreeAction[] = [\n          new TreeMoveNodeSuccessAction({treeId: data.treeId, source: data.oldNode, target: data.node}),\n        ];\n\n        if (!value.configuration.isFullyLoaded) {\n          actions.push(new TreeLoadNodesAction({treeId: data.treeId, id: data.node.parentId}));\n        }\n\n        return actions;\n      })\n    );\n\n  @Effect()\n  public expand$ = this.actions$\n    .pipe(\n      ofType(TreeActionTypes.TREE_EXPAND_NODE),\n      switchMap((action: TreeExpandNodeAction) =>\n        this.store\n          .pipe(\n            select(treeSelector(action.payload.treeId)),\n            take(1),\n            filter((treeState: ITreeData) => !treeState.configuration.isFullyLoaded),\n            map(() => {\n              return new TreeLoadNodesAction({\n                  treeId: action.payload.treeId,\n                  id: action.payload.id\n                }\n              );\n            })\n          )\n      )\n    );\n\n  @Effect()\n  public insert$ = this.actions$\n    .pipe(\n      ofType(TreeActionTypes.TREE_INSERT_NODE),\n      filter((action: TreeInsertNodeAction) => !!action.payload.parentId),\n      map((action: TreeInsertNodeAction) => {\n        return new TreeExpandNodeAction({treeId: action.payload.treeId, id: action.payload.parentId});\n      })\n    );\n\n  @Effect()\n  public initPathForFullyLoadedTreeEffect$ = this.actions$\n    .pipe(\n      ofType(TreeActionTypes.TREE_LOAD_PATH),\n      switchMap((action: TreeLoadPathAction) => {\n        return this.store.select(treeConfigurationSelector(action.payload.treeId))\n          .pipe(\n            take(1),\n            map((configuration: ITreeConfiguration) => {\n              return {action, configuration};\n            })\n          );\n      }),\n      map((value: { action: TreeLoadPathAction, configuration: ITreeConfiguration }) => {\n          const {action, configuration} = value;\n\n          if (configuration.isFullyLoaded) {\n            return action.payload.ids.map((id: string) => new TreeExpandNodeAction({treeId: action.payload.treeId, id}));\n          } else {\n            const loadActions = action.payload.ids.map((id: string) => this.loadNodes(action.payload.treeId, id));\n            return combineLatest(loadActions)\n              .pipe(\n                take(1),\n                mergeMap((data: IOuterNode[][]) => {\n                  const loadSuccess = data.map((nodes: IOuterNode[], index) => new TreeLoadNodesSuccessAction({\n                    treeId: action.payload.treeId,\n                    id: action.payload.ids[index],\n                    nodes\n                  }));\n                  const expandNodes = action.payload.ids.map((id: string) => new TreeExpandNodeAction({\n                    treeId: action.payload.treeId,\n                    id\n                  }));\n\n                  return [...loadSuccess, ...expandNodes];\n                })\n              );\n          }\n        }\n      ),\n      mergeMap((actions: any[]) => actions)\n    );\n\n  constructor(private actions$: Actions,\n              private nodeDispatcherService: NodeDispatcherService,\n              private store: Store<ITreeState>) {\n  }\n\n  protected deleteNode(treeId: string, node: IOuterNode): Observable<IOuterNode> {\n    const nodeService = this.nodeDispatcherService.get(treeId);\n\n    return node.id ? nodeService.remove(node.id) : of(node);\n  }\n\n  protected loadNodes(treeId: string, id: string | null) {\n    const nodeService = this.nodeDispatcherService.get(treeId);\n\n    return nodeService.load(id);\n  }\n\n  protected saveNode(treeId: string, node: IOuterNode): Observable<IOuterNode> {\n    const nodeService = this.nodeDispatcherService.get(treeId);\n\n    if (node.id === NEW_NODE_ID) {\n      return nodeService.add(node, node.parentId);\n    } else {\n      return nodeService.update(node);\n    }\n  }\n\n  protected moveNode(treeId: string, source: IOuterNode, target: IOuterNode): Observable<IOuterNode> {\n    const nodeService = this.nodeDispatcherService.get(treeId);\n\n    return nodeService.move(source, target);\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {IConfiguration} from '../interfaces/IConfiguration';\nimport {TreeModel} from '../models/TreeModel';\nimport {treeSelector} from '../store/treeReducer';\nimport {Store} from '@ngrx/store';\nimport {ITreeState} from '../store/ITreeState';\nimport {NodeDispatcherService} from './nodesDispatcher.service';\nimport {IOuterNode} from '../interfaces/IOuterNode';\nimport {\n  TreeMarkAsFullyLoadedAction,\n  TreeRegisterAction,\n  TreeSetConfigurationAction\n} from '../store/treeActions.service';\n\n@Injectable()\nexport class TreeModelGeneratorService {\n  public constructor(private nodeDispatcherService: NodeDispatcherService,\n                     private store: Store<ITreeState>) {\n  }\n\n  public createTreeModel(configuration: IConfiguration, nodes: IOuterNode[] = null): TreeModel {\n    const treeId = configuration.treeId;\n    const isFullyLoaded = Boolean(nodes);\n\n    // register new tree in store\n    this.store.dispatch(new TreeRegisterAction({\n      treeId,\n      silent: isFullyLoaded,\n      nodes\n    }));\n\n    // init tree configuration\n    this.store.dispatch(new TreeSetConfigurationAction({treeId, configuration}));\n\n    if (Boolean(nodes)) {\n      this.nodeDispatcherService.get(treeId).setAllNodes(nodes);\n      this.store.dispatch(new TreeMarkAsFullyLoadedAction({treeId}));\n    }\n\n    const folders$ = this.store.select(treeSelector(configuration.treeId));\n\n    return new TreeModel(this.store, folders$, configuration, isFullyLoaded);\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core';\nimport {TreeModel} from '../models/TreeModel';\nimport {Observable} from 'rxjs';\nimport {IOuterNode} from '../interfaces/IOuterNode';\nimport {TreeSelectNodeAction} from '../store/treeActions.service';\nimport {ITreeState} from '../store/ITreeState';\nimport {Store} from '@ngrx/store';\n\n@Component({\n  selector: 'ri-tree-parents-list',\n  templateUrl: './parents-list.component.html',\n  styleUrls: ['./parents-list.component.scss']\n})\nexport class ParentsListComponent implements OnInit {\n  @Input()\n  public treeModel: TreeModel;\n\n  public parents$: Observable<IOuterNode[]>;\n\n  public constructor(protected store: Store<ITreeState>) {\n\n  }\n\n  public ngOnInit(): void {\n    this.parents$ = this.treeModel.getParentsList();\n  }\n\n  public selectNode(node: IOuterNode, isCurrentSelectedNode: boolean): void {\n    if (!isCurrentSelectedNode) {\n      this.store.dispatch(new TreeSelectNodeAction({\n        treeId: this.treeModel.treeId,\n        node,\n      }));\n    }\n  }\n\n}\n","import {Injectable, InjectionToken} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {IOuterNode} from '../interfaces/IOuterNode';\nimport {IApiConfig} from '../IApiConfig.service';\nimport {HttpClient, HttpParams} from '@angular/common/http';\n\nexport interface INodeService {\n  readonly treeId: string;\n\n  load(nodeId: string): Observable<IOuterNode[]>;\n\n  add(node: IOuterNode, parentNodeId: string | null): Observable<IOuterNode>;\n\n  move(srcNode: IOuterNode, targetNode: IOuterNode | null): Observable<IOuterNode>;\n\n  update(node: IOuterNode): Observable<IOuterNode>;\n\n  remove(nodeId: string): Observable<IOuterNode>;\n\n  setAllNodes(nodes: IOuterNode[]): void;\n}\n\nexport const NODE_SERVICE = new InjectionToken('NODE_SERVICE');\n\n@Injectable()\nexport class NodeService implements INodeService {\n  protected apiConfig: IApiConfig = {\n    addUrl: '/api/nodes',\n    getUrl: '/api/nodes',\n    moveUrl: '/api/nodes/move',\n    updateUrl: '/api/nodes',\n    removeUrl: '/api/nodes',\n  };\n\n  public get treeId(): string {\n    return 'tree';\n  }\n\n  public constructor(protected http: HttpClient) {\n  }\n\n  public setAllNodes(nodes: IOuterNode[]): void {\n\n  }\n\n  public load(nodeId = ''): Observable<IOuterNode[]> {\n    const params = new HttpParams().set('nodeId', nodeId);\n\n    return this.http.get<IOuterNode[]>(this.getPath('GET', nodeId), {params});\n  }\n\n\n  public add(node: IOuterNode, parentNodeId: string = null): Observable<IOuterNode> {\n    return this.http.post<IOuterNode>(this.getPath('CREATE', parentNodeId), {\n      node: node,\n      parentNodeId: parentNodeId\n    });\n  }\n\n  public move(srcNode: IOuterNode, targetNode: IOuterNode | null): Observable<IOuterNode> {\n    const srcId = srcNode.id;\n    const targetId = targetNode ? targetNode.id : null;\n\n    return this.http.put<IOuterNode>(this.getPath('MOVE', srcId, targetId), {source: srcId, target: targetId});\n  }\n\n  public update(node: IOuterNode): Observable<IOuterNode> {\n    return this.http.put<IOuterNode>(this.getPath('UPDATE', node.id), node);\n  }\n\n  public remove(nodeId: string): Observable<IOuterNode> {\n    const params = new HttpParams().set('nodeId', nodeId);\n\n    return this.http.delete<IOuterNode>(this.getPath('REMOVE', nodeId), {params});\n  }\n\n  protected getPath(type: string, nodeId: string, destNodeId: string = null) {\n    if (!this.apiConfig) {\n      throw new Error('No API configuration for Tree');\n    }\n\n    const urlMap = {\n      'GET': this.apiConfig.getUrl,\n      'CREATE': this.apiConfig.addUrl,\n      'REMOVE': this.apiConfig.removeUrl,\n      'UPDATE': this.apiConfig.updateUrl,\n      'MOVE': this.apiConfig.moveUrl\n    };\n\n    let path = this.replaceNodeId(urlMap[type], nodeId);\n\n    if (destNodeId) {\n      path = this.replaceDestNodeId(path, destNodeId);\n    }\n\n    return path;\n  }\n\n  protected replaceNodeId(url: string, nodeId: string) {\n    return url.replace('{nodeId}', nodeId);\n  }\n\n  protected replaceDestNodeId(url: string, nodeId: string) {\n    return url.replace('{destNodeId}', nodeId);\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {TreeModelGeneratorService} from './treeModelGenerator.service';\nimport {NodeDispatcherService} from './nodesDispatcher.service';\nimport {INodeService} from './node.service';\nimport {TreeModel} from '../models/TreeModel';\nimport {IOuterNode} from '../interfaces/IOuterNode';\nimport {IConfiguration} from '../interfaces/IConfiguration';\n\n@Injectable()\nexport class TreeInitializerService {\n  public constructor(private treeModelGeneratorService: TreeModelGeneratorService,\n                     private nodeDispatcherService: NodeDispatcherService) {\n\n  }\n\n  public init(treeConfiguration: IConfiguration,\n              treeApi: INodeService,\n              loadedNodes?: IOuterNode[]): TreeModel {\n    this.nodeDispatcherService.registerService(treeConfiguration.treeId, treeApi);\n\n    return this.treeModelGeneratorService.createTreeModel(treeConfiguration, loadedNodes);\n  }\n}\n","import {CUSTOM_ELEMENTS_SCHEMA, InjectionToken, ModuleWithProviders, NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ItemComponent} from './item/item.component';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {TreeComponent} from './tree.component';\nimport {DndModule, DraggableComponent} from 'ng2-dnd';\nimport {DragAndDrop} from './dragAndDrop/dragAndDrop.service';\nimport {DraggableDirective} from './dragAndDrop/draggable.directive';\nimport {DroppableDirective} from './dragAndDrop/droppable.directive';\nimport {DropzoneComponent} from './dragAndDrop/dropzone/dropzone.component';\nimport {StoreModule} from '@ngrx/store';\nimport {EffectsModule} from '@ngrx/effects';\nimport {TreeEffectsService} from './store/treeEffects.service';\nimport {NodeDispatcherService} from './service/nodesDispatcher.service';\nimport {TranslateModule, TranslateService} from '@ngx-translate/core';\nimport {HttpClientModule} from '@angular/common/http';\nimport {ContextMenuModule} from 'ngx-contextmenu';\nimport {treeReducer} from './store/treeReducer';\nimport {TreeModelGeneratorService} from './service/treeModelGenerator.service';\nimport {ParentsListComponent} from './parents-list/parents-list.component';\nimport {NODE_SERVICE, NodeService} from './service/node.service';\nimport {TreeInitializerService} from './service/initializer.service';\n\nexport const NODE_DISPATCHER_TOKEN = new InjectionToken<NodeDispatcherService>('NodeDispatcherService');\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ContextMenuModule,\n    DndModule,\n    EffectsModule.forFeature([TreeEffectsService]),\n    HttpClientModule,\n    FormsModule,\n    ReactiveFormsModule,\n    StoreModule.forFeature('trees', treeReducer),\n    TranslateModule,\n  ],\n  declarations: [\n    TreeComponent,\n    ItemComponent,\n    DraggableDirective,\n    DroppableDirective,\n    DropzoneComponent,\n    ParentsListComponent,\n  ],\n  exports: [\n    TreeComponent,\n    ItemComponent,\n    DraggableDirective,\n    DroppableDirective,\n    DropzoneComponent,\n    DraggableComponent,\n    ParentsListComponent,\n    StoreModule,\n    EffectsModule,\n  ],\n  providers: [\n    {provide: NODE_SERVICE, useClass: NodeService, multi: true}\n  ],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class TreeModule {\n\n  public static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: TreeModule,\n      providers: [\n        DragAndDrop,\n        NodeDispatcherService,\n        TreeEffectsService,\n        TreeInitializerService,\n        TreeModelGeneratorService,\n      ]\n    };\n  }\n\n  public static forFeature(): ModuleWithProviders {\n    return {\n      ngModule: TreeModule,\n      providers: [],\n    };\n  }\n\n  public constructor(private translate: TranslateService) {\n    this.setTranslationForEN();\n    this.setTranslationForPL();\n    this.translate.setDefaultLang('en');\n  }\n\n  private setTranslationForPL(): void {\n    this.translate.setTranslation('pl', {\n      RI_TREE_LBL_ADD_NODE: 'Dodaj',\n      RI_TREE_LBL_EDIT_NODE: 'Edytuj',\n      RI_TREE_LBL_REMOVE_NODE: 'UsuÅ',\n      RI_TREE_LBL_DROP_ZONE: 'UpuÅÄ tutaj'\n    });\n  }\n\n  private setTranslationForEN(): void {\n    this.translate.setTranslation('en', {\n      RI_TREE_LBL_ADD_NODE: 'Add data',\n      RI_TREE_LBL_EDIT_NODE: 'Edit data',\n      RI_TREE_LBL_REMOVE_NODE: 'Delete data',\n      RI_TREE_LBL_DROP_ZONE: 'Drop here to move data to root level'\n    });\n  }\n}\n\n"],"names":["state","tslib_1.__decorate"],"mappings":"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"}
