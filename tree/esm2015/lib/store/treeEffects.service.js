/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { Actions, Effect, ofType } from '@ngrx/effects';
import { TreeActionTypes, TreeDeleteNodeErrorAction, TreeDeleteNodeSuccessAction, TreeExpandNodeAction, TreeLoadNodesAction, TreeLoadNodesErrorAction, TreeLoadNodesSuccessAction, TreeMoveNodeErrorAction, TreeMoveNodeSuccessAction, TreeSaveNodeErrorAction, TreeSaveNodeSuccessAction, TreeSetAllNodesAction } from './treeActions.service';
import { combineLatest, of } from 'rxjs';
import { NodeDispatcherService } from '../service/nodesDispatcher.service';
import { DragAndDrop } from '../dragAndDrop/dragAndDrop.service';
import { catchError, filter, map, mergeMap, switchMap, take } from 'rxjs/operators';
import { select, Store } from '@ngrx/store';
import { NEW_NODE_ID, treeConfigurationSelector, treeSelector } from './treeReducer';
export class TreeEffectsService {
    /**
     * @param {?} actions$
     * @param {?} nodeDispatcherService
     * @param {?} store
     */
    constructor(actions$, nodeDispatcherService, store) {
        this.actions$ = actions$;
        this.nodeDispatcherService = nodeDispatcherService;
        this.store = store;
        this.register$ = this.actions$
            .pipe(ofType(TreeActionTypes.TREE_REGISTER), map((action) => {
            if (action.payload.silent) {
                return new TreeSetAllNodesAction({ treeId: action.payload.treeId, nodes: action.payload.nodes });
            }
            else {
                return new TreeLoadNodesAction({ treeId: action.payload.treeId, id: null });
            }
        }));
        this.load$ = this.actions$
            .pipe(ofType(TreeActionTypes.TREE_LOAD), mergeMap((action) => this.loadNodes(action.payload.treeId, action.payload.id)
            .pipe(map((nodesData) => new TreeLoadNodesSuccessAction({
            treeId: action.payload.treeId,
            id: action.payload.id,
            nodes: nodesData
        })), catchError(() => of(new TreeLoadNodesErrorAction({
            treeId: action.payload.treeId,
            id: action.payload.id
        }))))));
        this.delete$ = this.actions$
            .pipe(ofType(TreeActionTypes.TREE_DELETE_NODE), switchMap((action) => this.deleteNode(action.payload.treeId, action.payload.node)
            .pipe(map(() => new TreeDeleteNodeSuccessAction(Object.assign({}, action.payload))), catchError(() => of(new TreeDeleteNodeErrorAction(Object.assign({}, action.payload)))))));
        this.save$ = this.actions$
            .pipe(ofType(TreeActionTypes.TREE_SAVE_NODE), switchMap((action) => this.saveNode(action.payload.treeId, Object.assign({}, action.payload.node))
            .pipe(map((node) => new TreeSaveNodeSuccessAction({
            treeId: action.payload.treeId,
            oldNode: action.payload.node,
            node
        })), catchError(() => of(new TreeSaveNodeErrorAction(Object.assign({}, action.payload)))))));
        this.move$ = this.actions$
            .pipe(ofType(TreeActionTypes.TREE_MOVE_NODE), filter((action) => {
            return action.payload.sourceOfDroppedData === DragAndDrop.DROP_DATA_TYPE;
        }), switchMap((action) => {
            /** @type {?} */
            const source = (/** @type {?} */ (Object.assign({}, action.payload.oldNode)));
            /** @type {?} */
            const target = Boolean(action.payload.node) ? Object.assign({}, action.payload.node) : null;
            return this.moveNode(action.payload.treeId, source, target)
                .pipe(map((node) => {
                return {
                    treeId: action.payload.treeId,
                    oldNode: action.payload.oldNode,
                    node: node
                };
            }), switchMap((data) => {
                return this.store.select(treeConfigurationSelector(action.payload.treeId))
                    .pipe(take(1), map((configuration) => {
                    return {
                        configuration,
                        data
                    };
                }));
            }), catchError(() => {
                /** @type {?} */
                const newAction = new TreeMoveNodeErrorAction({
                    treeId: action.payload.treeId,
                    source: action.payload.oldNode,
                    target: action.payload.node
                });
                return of(newAction);
            }));
        }), mergeMap((value) => {
            /** @type {?} */
            const data = value.data;
            /** @type {?} */
            const actions = [
                new TreeMoveNodeSuccessAction({ treeId: data.treeId, source: data.oldNode, target: data.node }),
            ];
            if (!value.configuration.isFullyLoaded) {
                actions.push(new TreeLoadNodesAction({ treeId: data.treeId, id: data.node.parentId }));
            }
            return actions;
        }));
        this.expand$ = this.actions$
            .pipe(ofType(TreeActionTypes.TREE_EXPAND_NODE), switchMap((action) => this.store
            .pipe(select(treeSelector(action.payload.treeId)), take(1), filter((treeState) => !treeState.configuration.isFullyLoaded), map(() => {
            return new TreeLoadNodesAction({
                treeId: action.payload.treeId,
                id: action.payload.id
            });
        }))));
        this.insert$ = this.actions$
            .pipe(ofType(TreeActionTypes.TREE_INSERT_NODE), filter((action) => !!action.payload.parentId), map((action) => {
            return new TreeExpandNodeAction({ treeId: action.payload.treeId, id: action.payload.parentId });
        }));
        this.initPathForFullyLoadedTreeEffect$ = this.actions$
            .pipe(ofType(TreeActionTypes.TREE_LOAD_PATH), switchMap((action) => {
            return this.store.select(treeConfigurationSelector(action.payload.treeId))
                .pipe(take(1), map((configuration) => {
                return { action, configuration };
            }));
        }), map((value) => {
            const { action, configuration } = value;
            if (configuration.isFullyLoaded) {
                return action.payload.ids.map((id) => new TreeExpandNodeAction({ treeId: action.payload.treeId, id }));
            }
            else {
                /** @type {?} */
                const loadActions = action.payload.ids.map((id) => this.loadNodes(action.payload.treeId, id));
                return combineLatest(loadActions)
                    .pipe(take(1), mergeMap((data) => {
                    /** @type {?} */
                    const loadSuccess = data.map((nodes, index) => new TreeLoadNodesSuccessAction({
                        treeId: action.payload.treeId,
                        id: action.payload.ids[index],
                        nodes
                    }));
                    /** @type {?} */
                    const expandNodes = action.payload.ids.map((id) => new TreeExpandNodeAction({
                        treeId: action.payload.treeId,
                        id
                    }));
                    return [...loadSuccess, ...expandNodes];
                }));
            }
        }), mergeMap((actions) => actions));
    }
    /**
     * @protected
     * @param {?} treeId
     * @param {?} node
     * @return {?}
     */
    deleteNode(treeId, node) {
        /** @type {?} */
        const nodeService = this.nodeDispatcherService.get(treeId);
        return node.id ? nodeService.remove(node.id) : of(node);
    }
    /**
     * @protected
     * @param {?} treeId
     * @param {?} id
     * @return {?}
     */
    loadNodes(treeId, id) {
        /** @type {?} */
        const nodeService = this.nodeDispatcherService.get(treeId);
        return nodeService.load(id);
    }
    /**
     * @protected
     * @param {?} treeId
     * @param {?} node
     * @return {?}
     */
    saveNode(treeId, node) {
        /** @type {?} */
        const nodeService = this.nodeDispatcherService.get(treeId);
        if (node.id === NEW_NODE_ID) {
            return nodeService.add(node, node.parentId);
        }
        else {
            return nodeService.update(node);
        }
    }
    /**
     * @protected
     * @param {?} treeId
     * @param {?} source
     * @param {?} target
     * @return {?}
     */
    moveNode(treeId, source, target) {
        /** @type {?} */
        const nodeService = this.nodeDispatcherService.get(treeId);
        return nodeService.move(source, target);
    }
}
TreeEffectsService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
TreeEffectsService.ctorParameters = () => [
    { type: Actions },
    { type: NodeDispatcherService },
    { type: Store }
];
tslib_1.__decorate([
    Effect(),
    tslib_1.__metadata("design:type", Object)
], TreeEffectsService.prototype, "register$", void 0);
tslib_1.__decorate([
    Effect(),
    tslib_1.__metadata("design:type", Object)
], TreeEffectsService.prototype, "load$", void 0);
tslib_1.__decorate([
    Effect(),
    tslib_1.__metadata("design:type", Object)
], TreeEffectsService.prototype, "delete$", void 0);
tslib_1.__decorate([
    Effect(),
    tslib_1.__metadata("design:type", Object)
], TreeEffectsService.prototype, "save$", void 0);
tslib_1.__decorate([
    Effect(),
    tslib_1.__metadata("design:type", Object)
], TreeEffectsService.prototype, "move$", void 0);
tslib_1.__decorate([
    Effect(),
    tslib_1.__metadata("design:type", Object)
], TreeEffectsService.prototype, "expand$", void 0);
tslib_1.__decorate([
    Effect(),
    tslib_1.__metadata("design:type", Object)
], TreeEffectsService.prototype, "insert$", void 0);
tslib_1.__decorate([
    Effect(),
    tslib_1.__metadata("design:type", Object)
], TreeEffectsService.prototype, "initPathForFullyLoadedTreeEffect$", void 0);
if (false) {
    /** @type {?} */
    TreeEffectsService.prototype.register$;
    /** @type {?} */
    TreeEffectsService.prototype.load$;
    /** @type {?} */
    TreeEffectsService.prototype.delete$;
    /** @type {?} */
    TreeEffectsService.prototype.save$;
    /** @type {?} */
    TreeEffectsService.prototype.move$;
    /** @type {?} */
    TreeEffectsService.prototype.expand$;
    /** @type {?} */
    TreeEffectsService.prototype.insert$;
    /** @type {?} */
    TreeEffectsService.prototype.initPathForFullyLoadedTreeEffect$;
    /**
     * @type {?}
     * @private
     */
    TreeEffectsService.prototype.actions$;
    /**
     * @type {?}
     * @private
     */
    TreeEffectsService.prototype.nodeDispatcherService;
    /**
     * @type {?}
     * @private
     */
    TreeEffectsService.prototype.store;
}
//# sourceMappingURL=data:application/json;base64,