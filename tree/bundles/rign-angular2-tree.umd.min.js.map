{"version":3,"sources":["ng://@rign/angular2-tree/lib/store/treeActions.service.ts","../../node_modules/tslib/tslib.es6.js","ng://@rign/angular2-tree/lib/store/treeReducer.ts","ng://@rign/angular2-tree/lib/item/item.component.ts","ng://@rign/angular2-tree/lib/dragAndDrop/dragAndDrop.service.ts","ng://@rign/angular2-tree/lib/tree.component.ts","ng://@rign/angular2-tree/lib/dragAndDrop/draggable.directive.ts","ng://@rign/angular2-tree/lib/dragAndDrop/droppable.directive.ts","ng://@rign/angular2-tree/lib/dragAndDrop/dropzone/dropzone.component.ts","ng://@rign/angular2-tree/lib/service/nodesDispatcher.service.ts","ng://@rign/angular2-tree/lib/store/treeEffects.service.ts","ng://@rign/angular2-tree/lib/models/TreeModel.ts","ng://@rign/angular2-tree/lib/service/treeModelGenerator.service.ts","ng://@rign/angular2-tree/lib/parents-list/parents-list.component.ts","ng://@rign/angular2-tree/lib/service/node.service.ts","ng://@rign/angular2-tree/lib/service/initializer.service.ts","ng://@rign/angular2-tree/lib/tree.module.ts"],"names":["TREE_SAVE_NODE","TREE_SAVE_NODE_SUCCESS","TREE_SAVE_NODE_ERROR","TREE_DELETE_NODE","TREE_DELETE_NODE_SUCCESS","TREE_DELETE_NODE_ERROR","TREE_EDIT_NODE_START","TREE_COLLAPSE_NODE","TREE_EXPAND_NODE","TREE_INSERT_NODE","TREE_LOAD","TREE_LOAD_PATH","TREE_LOAD_SUCCESS","TREE_LOAD_ERROR","TREE_MARK_AS_FULLY_LOADED","TREE_MOVE_NODE","TREE_MOVE_NODE_SUCCESS","TREE_MOVE_NODE_ERROR","TREE_REGISTER","TREE_SELECT_NODE","TREE_SET_ALL_NODES","TREE_SET_CONFIGURATION","TreeCollapseNodeAction","payload","this","type","TreeActionTypes","TreeDeleteNodeAction","TreeDeleteNodeErrorAction","TreeDeleteNodeSuccessAction","TreeEditNodeStartAction","TreeExpandNodeAction","TreeInsertNodeAction","TreeLoadNodesAction","TreeLoadNodesErrorAction","TreeLoadNodesSuccessAction","TreeLoadPathAction","TreeMarkAsFullyLoadedAction","TreeMoveNodeAction","TreeMoveNodeErrorAction","TreeMoveNodeSuccessAction","TreeRegisterAction","TreeSaveNodeAction","TreeSaveNodeErrorAction","TreeSaveNodeSuccessAction","TreeSelectNodeAction","TreeSetAllNodesAction","TreeSetConfigurationAction","__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__decorate","decorators","target","key","desc","d","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__metadata","metadataKey","metadataValue","metadata","__read","o","m","Symbol","iterator","e","ar","next","done","push","value","error","__spread","concat","NEW_NODE_ID","emptyTreeData","nodes","entities","previouslySelected","selected","rootNodes","expanded","configuration","isFullyLoaded","copyState","state","treeId","newState","setAllNodes","action","newNodes","map","nodeData","id","forEach","parentId","updateParents","nodeId","parents","node","children","newParents_1","childId","treeReducer","registerTree","saveNode","old","oldNode","newNode","treeState","parent","filter","removeNode","parent_1","insertNode","name","isExpanded","loadNodes","moveNode","source","treeData","newParent","markTreeAsFullyLoaded","setConfiguration","expandNode","collapseNode","selectNode","treeStateSelector","createFeatureSelector","treeSelector","createSelector","treeConfigurationSelector","expandedNodesSelector","selectedNodeSelector","previouslySelectedNodeSelector","expand","trigger","style","overflow-y","transition","height","animate","ItemComponent","contextMenuService","actions$","store","cdr","isSelected","nameField","FormControl","isEditMode","children$","empty","isStartSave","subscription","Subscription","_node","initEditModeIfNeeded","ngOnChanges","values","firstChange","previousValue","currentValue","getChildren","ngOnDestroy","unsubscribe","ngOnInit","_this","subscribeForOnEdit","add","pipe","select","subscribe","markForCheck","collapse","dispatch","treeModel","onBlur","undoChanges","onChange","event","stopPropagation","keyCode","onContextMenu","$event","disableContextMenu","show","contextMenu","item","preventDefault","onSelect","trackByFn","setValue","setFocus","isNewNode","setTimeout","input","nativeElement","focus","ofType","Component","args","encapsulation","ViewEncapsulation","None","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","animations","ContextMenuService","Actions","Store","ChangeDetectorRef","ViewChild","Input","DragAndDrop","dropStream$","Subject","dragStream$","BehaviorSubject","drop$","withLatestFrom","_a","_b","dropNode","dragNode","dragStart","dragElement","dragEnd","dropElement","getDragStream","getLastDragElement","getValue","DROP_DATA_TYPE","Injectable","TreeComponent","dragAndDrop","defaultOptions","text","iconCls","menuList","registerMove","rootNodes$","currentSelectedNode$","currentSelectedNode","data","onAdd","onContextMenuClick","console","warn","disableMoveNodes","zones","indexOf","zoneId","sourceOfDroppedData","DraggableDirective","el","renderer","dragZone","sourceType","dragEnabled","listen","onDragStart","dataTransfer","effectAllowed","dropEffect","draggable","Error","Directive","ElementRef","Renderer","DroppableDirective","dropConfig","isDropAllowed","lastDragElement","dropZone","dropAllowed","changeTargetCursor","toggleDropClass","initConfig","setElementClass","dropAllowedCssClass","cursorType","defaultConfig","DropzoneComponent","isDragStart$","isNotRootElement","isFromCurrentTree","isDragEnd$","isOpen$","merge","onDrop","onDragOver","NodeDispatcherService","nodeServices","registerService","nodeService","get","Boolean","TreeEffectsService","nodeDispatcherService","register$","silent","load$","mergeMap","nodesData","catchError","of","delete$","switchMap","deleteNode","save$","move$","take","newAction","actions","expand$","insert$","initPathForFullyLoadedTreeEffect$","ids","loadActions","combineLatest","index","remove","load","update","move","tslib_1.__decorate","Effect","isEqual","_isEqual","TreeModel","treeData$","_fullyLoaded","nodes$","distinctUntilChanged","prev","sort","sortNodes","selectedId","initConfiguration","subscribeExpanded","subscribeSelected","subscribePreviouslySelected","destroy","getParentsList","currentNode","getNodesByParentId","tslib_1.__spread","initPath","path","has","wasPreviouslySelected","defaultConfiguration","showAddButton","isAnimation","undefined","keys","first","second","Set","TreeModelGeneratorService","createTreeModel","folders$","ParentsListComponent","parents$","isCurrentSelectedNode","NODE_SERVICE","InjectionToken","NodeService","http","apiConfig","addUrl","getUrl","moveUrl","updateUrl","removeUrl","params","HttpParams","set","getPath","parentNodeId","post","srcNode","targetNode","srcId","targetId","put","delete","destNodeId","urlMap","GET","CREATE","REMOVE","UPDATE","MOVE","replaceNodeId","replaceDestNodeId","url","replace","HttpClient","TreeInitializerService","treeModelGeneratorService","init","treeConfiguration","treeApi","loadedNodes","NODE_DISPATCHER_TOKEN","TreeModule","translate","setTranslationForEN","setTranslationForPL","setDefaultLang","forRoot","ngModule","providers","forFeature","setTranslation","RI_TREE_LBL_ADD_NODE","RI_TREE_LBL_EDIT_NODE","RI_TREE_LBL_REMOVE_NODE","RI_TREE_LBL_DROP_ZONE","NgModule","imports","CommonModule","ContextMenuModule","DndModule","EffectsModule","HttpClientModule","FormsModule","ReactiveFormsModule","StoreModule","TranslateModule","declarations","exports","DraggableComponent","provide","useClass","multi","schemas","CUSTOM_ELEMENTS_SCHEMA","TranslateService"],"mappings":"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","sourcesContent":["import {IOuterNode} from '../interfaces/IOuterNode';\nimport {Action} from '@ngrx/store';\nimport {IConfiguration} from '../interfaces/IConfiguration';\n\nexport enum TreeActionTypes {\n  TREE_SAVE_NODE = 'TREE_SAVE_NODE',\n  TREE_SAVE_NODE_SUCCESS = 'TREE_SAVE_NODE_SUCCESS',\n  TREE_SAVE_NODE_ERROR = 'TREE_SAVE_NODE_ERROR',\n  TREE_DELETE_NODE = 'TREE_DELETE_NODE',\n  TREE_DELETE_NODE_SUCCESS = 'TREE_DELETE_NODE_SUCCESS',\n  TREE_DELETE_NODE_ERROR = 'TREE_DELETE_NODE_ERROR',\n  TREE_EDIT_NODE_START = 'TREE_EDIT_NODE_START',\n  TREE_COLLAPSE_NODE = 'TREE_COLLAPSE_NODE',\n  TREE_EXPAND_NODE = 'TREE_EXPAND_NODE',\n  TREE_INSERT_NODE = 'TREE_INSERT_NODE',\n  TREE_LOAD = 'TREE_LOAD',\n  TREE_LOAD_PATH = 'TREE_LOAD_PATH',\n  TREE_LOAD_SUCCESS = 'TREE_LOAD_SUCCESS',\n  TREE_LOAD_ERROR = 'TREE_LOAD_ERROR',\n  TREE_MARK_AS_FULLY_LOADED = 'TREE_MARK_AS_FULLY_LOADED',\n  TREE_MOVE_NODE = 'TREE_MOVE_NODE',\n  TREE_MOVE_NODE_SUCCESS = 'TREE_MOVE_NODE_SUCCESS',\n  TREE_MOVE_NODE_ERROR = 'TREE_MOVE_NODE_ERROR',\n  TREE_REGISTER = 'TREE_REGISTER',\n  TREE_SELECT_NODE = 'TREE_SELECT_NODE',\n  TREE_SET_ALL_NODES = 'TREE_SET_ALL_NODES',\n  TREE_SET_CONFIGURATION = 'TREE_SET_CONFIGURATION'\n}\n\nexport class TreeCollapseNodeAction implements Action {\n  readonly type = TreeActionTypes.TREE_COLLAPSE_NODE;\n\n  public constructor(public payload: { treeId: string, id: string }) {\n\n  }\n}\n\nexport class TreeDeleteNodeAction implements Action {\n  readonly type = TreeActionTypes.TREE_DELETE_NODE;\n\n  public constructor(public payload: { treeId: string, node: IOuterNode }) {\n\n  }\n}\n\nexport class TreeDeleteNodeErrorAction implements Action {\n  readonly type = TreeActionTypes.TREE_DELETE_NODE_ERROR;\n\n  public constructor(public payload: { treeId: string, node: IOuterNode }) {\n\n  }\n}\n\nexport class TreeDeleteNodeSuccessAction implements Action {\n  readonly type = TreeActionTypes.TREE_DELETE_NODE_SUCCESS;\n\n  public constructor(public payload: { treeId: string, node: IOuterNode }) {\n\n  }\n}\n\nexport class TreeEditNodeStartAction implements Action {\n  readonly type = TreeActionTypes.TREE_EDIT_NODE_START;\n\n  public constructor(public payload: { node: IOuterNode }) {\n\n  }\n}\n\nexport class TreeExpandNodeAction implements Action {\n  readonly type = TreeActionTypes.TREE_EXPAND_NODE;\n\n  public constructor(public payload: { treeId: string, id: string }) {\n\n  }\n}\n\nexport class TreeInsertNodeAction implements Action {\n  readonly type = TreeActionTypes.TREE_INSERT_NODE;\n\n  public constructor(public payload: { treeId: string, parentId: string }) {\n\n  }\n}\n\nexport class TreeLoadNodesAction implements Action {\n  readonly type = TreeActionTypes.TREE_LOAD;\n\n  public constructor(public payload: { treeId: string, id: string }) {\n\n  }\n}\n\nexport class TreeLoadNodesErrorAction implements Action {\n  readonly type = TreeActionTypes.TREE_LOAD_ERROR;\n\n  public constructor(public payload: { treeId: string, id: string }) {\n\n  }\n}\n\nexport class TreeLoadNodesSuccessAction implements Action {\n  readonly type = TreeActionTypes.TREE_LOAD_SUCCESS;\n\n  public constructor(public payload: { treeId: string, id: string, nodes: IOuterNode[] }) {\n\n  }\n}\n\nexport class TreeLoadPathAction implements Action {\n  readonly type = TreeActionTypes.TREE_LOAD_PATH;\n\n  public constructor(public payload: { treeId: string, ids: string[] }) {\n\n  }\n}\n\nexport class TreeMarkAsFullyLoadedAction implements Action {\n  readonly type = TreeActionTypes.TREE_MARK_AS_FULLY_LOADED;\n\n  public constructor(public payload: { treeId: string }) {\n\n  }\n}\n\nexport class TreeMoveNodeAction implements Action {\n  readonly type = TreeActionTypes.TREE_MOVE_NODE;\n\n  public constructor(public payload: { treeId: string, sourceOfDroppedData: string, oldNode: any, node: IOuterNode }) {\n\n  }\n}\n\nexport class TreeMoveNodeErrorAction implements Action {\n  readonly type = TreeActionTypes.TREE_MOVE_NODE_ERROR;\n\n  public constructor(public payload: { treeId: string, source: IOuterNode, target: IOuterNode }) {\n\n  }\n}\n\nexport class TreeMoveNodeSuccessAction implements Action {\n  readonly type = TreeActionTypes.TREE_MOVE_NODE_SUCCESS;\n\n  public constructor(public payload: { treeId: string, source: IOuterNode, target: IOuterNode }) {\n\n  }\n}\n\nexport class TreeRegisterAction implements Action {\n  readonly type = TreeActionTypes.TREE_REGISTER;\n\n  public constructor(public payload: { treeId: string, silent: boolean, nodes: IOuterNode[] }) {\n\n  }\n}\n\nexport class TreeSaveNodeAction implements Action {\n  readonly type = TreeActionTypes.TREE_SAVE_NODE;\n\n  public constructor(public payload: { treeId: string, node: IOuterNode }) {\n\n  }\n}\n\nexport class TreeSaveNodeErrorAction implements Action {\n  readonly type = TreeActionTypes.TREE_SAVE_NODE_ERROR;\n\n  public constructor(public payload: { treeId: string, node: IOuterNode }) {\n\n  }\n}\n\nexport class TreeSaveNodeSuccessAction implements Action {\n  readonly type = TreeActionTypes.TREE_SAVE_NODE_SUCCESS;\n\n  public constructor(public payload: { treeId: string, node: IOuterNode, oldNode: IOuterNode }) {\n\n  }\n}\n\nexport class TreeSelectNodeAction implements Action {\n  readonly type = TreeActionTypes.TREE_SELECT_NODE;\n\n  public constructor(public payload: { treeId: string, node: IOuterNode }) {\n\n  }\n}\n\nexport class TreeSetAllNodesAction implements Action {\n  readonly type = TreeActionTypes.TREE_SET_ALL_NODES;\n\n  public constructor(public payload: { treeId: string, nodes: IOuterNode[] }) {\n\n  }\n}\n\nexport class TreeSetConfigurationAction implements Action {\n  readonly type = TreeActionTypes.TREE_SET_CONFIGURATION;\n\n  public constructor(public payload: { treeId: string, configuration: IConfiguration }) {\n\n  }\n}\n\nexport type TreeAction =\n  TreeCollapseNodeAction\n  | TreeDeleteNodeAction\n  | TreeDeleteNodeErrorAction\n  | TreeDeleteNodeSuccessAction\n  | TreeEditNodeStartAction\n  | TreeExpandNodeAction\n  | TreeInsertNodeAction\n  | TreeLoadNodesAction\n  | TreeLoadNodesErrorAction\n  | TreeLoadNodesSuccessAction\n  | TreeLoadNodesSuccessAction\n  | TreeLoadPathAction\n  | TreeMarkAsFullyLoadedAction\n  | TreeMoveNodeAction\n  | TreeMoveNodeErrorAction\n  | TreeMoveNodeSuccessAction\n  | TreeRegisterAction\n  | TreeSaveNodeAction\n  | TreeSaveNodeErrorAction\n  | TreeSaveNodeSuccessAction\n  | TreeSelectNodeAction\n  | TreeSetAllNodesAction\n  | TreeSetConfigurationAction\n  ;\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import {ITreeConfiguration, ITreeData, ITreeNodes, ITreeState} from './ITreeState';\nimport {\n  TreeAction,\n  TreeActionTypes,\n  TreeCollapseNodeAction,\n  TreeDeleteNodeSuccessAction,\n  TreeExpandNodeAction,\n  TreeInsertNodeAction,\n  TreeLoadNodesSuccessAction,\n  TreeMarkAsFullyLoadedAction,\n  TreeMoveNodeSuccessAction,\n  TreeRegisterAction,\n  TreeSaveNodeSuccessAction,\n  TreeSelectNodeAction,\n  TreeSetAllNodesAction,\n  TreeSetConfigurationAction\n} from './treeActions.service';\nimport {IOuterNode} from '../interfaces/IOuterNode';\nimport {createFeatureSelector, createSelector} from '@ngrx/store';\nimport {MemoizedSelector} from '@ngrx/store/src/selector';\n\nexport const NEW_NODE_ID = 'ri-new-node-id';\n\nexport const emptyTreeData: ITreeData = {\n  nodes: {\n    entities: {},\n    previouslySelected: null,\n    selected: null,\n    rootNodes: [],\n    expanded: [],\n  },\n  configuration: {\n    isFullyLoaded: false\n  }\n};\n\nfunction copyState(state: ITreeState, treeId: string = null) {\n  const newState = {...state};\n\n  // todo: find better way to clone object\n  if (treeId) {\n    newState[treeId] = {\n      nodes: {\n        entities: {...state[treeId].nodes.entities},\n        previouslySelected: state[treeId].nodes.previouslySelected,\n        selected: state[treeId].nodes.selected,\n        rootNodes: [...state[treeId].nodes.rootNodes],\n        expanded: [...state[treeId].nodes.expanded],\n      },\n      configuration: {...state[treeId].configuration}\n    };\n  }\n\n  return newState;\n}\n\nfunction removeNode(state: ITreeState, action: TreeDeleteNodeSuccessAction): ITreeState {\n  const newState = copyState(state, action.payload.treeId);\n  const treeId = action.payload.treeId;\n  const treeState = newState[treeId];\n  const node = action.payload.node;\n  const parentId = node.parentId;\n\n  delete treeState.nodes.entities[node.id];\n\n  if (parentId) {\n    const parent = {...treeState.nodes.entities[parentId]};\n\n    if (parent.children) {\n      parent.children = parent.children.filter((id) => id !== node.id);\n    }\n    treeState.nodes.entities[parentId] = parent;\n  } else {\n    treeState.nodes.rootNodes = treeState.nodes.rootNodes.filter((id) => id !== node.id);\n  }\n\n  return newState;\n}\n\n\nfunction loadNodes(state: ITreeState, action: TreeLoadNodesSuccessAction) {\n  const newState = copyState(state, action.payload.treeId);\n  let parent: IOuterNode | null = null;\n  const treeId = action.payload.treeId;\n  const parentId = action.payload.id;\n\n  if (parentId) {\n    parent = newState[treeId].nodes.entities[parentId];\n    parent.children = [];\n  } else {\n    newState[treeId].nodes.entities = {};\n  }\n\n  action.payload.nodes.forEach((nodeData: IOuterNode) => {\n    nodeData.treeId = treeId;\n    if (parent) {\n      parent.children.push(nodeData.id);\n      nodeData.parents = [...parent.parents, ...[parent.id]];\n    } else {\n      nodeData.parents = [];\n    }\n\n    newState[treeId].nodes.entities[nodeData.id] = nodeData;\n\n    if (!parentId) {\n      newState[treeId].nodes.rootNodes.push(nodeData.id);\n    }\n  });\n\n  return newState;\n}\n\n\nfunction expandNode(state: ITreeState, action: TreeExpandNodeAction): ITreeState {\n  const treeId = action.payload.treeId;\n  const newState = copyState(state, treeId);\n  const nodeId = action.payload.id;\n\n  // newState[treeId].nodes.entities[nodeId] = Object.assign({}, newState[treeId].nodes.entities[nodeId], {isExpanded: true});\n  newState[treeId].nodes.expanded = [...newState[treeId].nodes.expanded, nodeId];\n\n  return newState;\n}\n\n\nfunction collapseNode(state: ITreeState, action: TreeCollapseNodeAction): ITreeState {\n  const treeId = action.payload.treeId;\n  const newState = copyState(state, treeId);\n  const nodeId = action.payload.id;\n\n  // newState[treeId].nodes.entities[nodeId] = {...newState[treeId].nodes.entities[nodeId], ...{isExpanded: false}};\n  newState[treeId].nodes.expanded = newState[treeId].nodes.expanded.filter((id) => id !== nodeId);\n\n\n  return newState;\n}\n\n\nfunction insertNode(state: ITreeState, action: TreeInsertNodeAction): ITreeState {\n  const treeId = action.payload.treeId;\n  const newState = copyState(state, treeId);\n  const parentId = action.payload.parentId;\n  const newNode: IOuterNode = {\n    id: NEW_NODE_ID,\n    treeId: treeId,\n    name: 'New data',\n    parentId: parentId,\n    children: [],\n    parents: [],\n    isExpanded: false\n  };\n\n  newState[treeId].nodes.entities[NEW_NODE_ID] = newNode;\n\n  if (!parentId) {\n    newState[treeId].nodes.rootNodes = [...newState[treeId].nodes.rootNodes, NEW_NODE_ID];\n  }\n\n  return newState;\n}\n\nfunction saveNode(state: ITreeState, action: TreeSaveNodeSuccessAction): ITreeState {\n  const newState = copyState(state, action.payload.treeId);\n  const old = action.payload.oldNode;\n  const newNode = action.payload.node;\n  const treeId = action.payload.treeId;\n  const treeState = newState[treeId].nodes.entities;\n\n  if (treeState[NEW_NODE_ID]) {\n    delete treeState[NEW_NODE_ID];\n  } else {\n    delete treeState[old.id];\n  }\n\n  const nodeId = newNode.id;\n  treeState[nodeId] = newNode;\n\n  const parentId = newNode.parentId;\n  const parent = treeState[parentId] || null;\n\n  newNode.parents = [];\n\n  if (parentId) {\n    if (parent) {\n      if (!parent.children) {\n        parent.children = [];\n      }\n\n      parent.children.push(nodeId);\n\n      newNode.parents = [...parent.parents, parent.id];\n    }\n  } else if (old.id === NEW_NODE_ID) {\n    newState[treeId].nodes.rootNodes = newState[treeId].nodes.rootNodes.filter((id) => id !== NEW_NODE_ID);\n    newState[treeId].nodes.rootNodes.push(nodeId);\n  }\n\n  return newState;\n}\n\nfunction moveNode(state: ITreeState, action: TreeMoveNodeSuccessAction) {\n  const newState = copyState(state, action.payload.treeId);\n  const oldNode = action.payload.source;\n  const newNode = action.payload.target;\n  const treeId = action.payload.treeId;\n  const treeData = newState[treeId];\n  const treeState = newState[treeId].nodes.entities;\n\n  // remove info about removed child\n  if (oldNode.parentId) {\n    treeState[oldNode.parentId].children = treeState[oldNode.parentId].children.filter((id) => id !== oldNode.id);\n  } else {\n    treeData.nodes.rootNodes = treeData.nodes.rootNodes.filter((id) => id !== oldNode.id);\n  }\n\n  // add info about moved node\n  if (newNode.parentId) {\n    const newParent = treeState[newNode.parentId];\n\n    if (newParent.children) {\n      newParent.children.push(newNode.id);\n    }\n\n    newNode.parents = [...newParent.parents, newParent.id];\n  } else {\n    treeData.nodes.rootNodes.push(newNode.id);\n    newNode.parents = [];\n  }\n\n  // replace node data\n  treeState[newNode.id] = {...newNode};\n\n  return newState;\n}\n\nfunction registerTree(state: ITreeState, action: TreeRegisterAction) {\n  const newState = copyState(state);\n\n  newState[action.payload.treeId] = {\n    nodes: {\n      entities: {...emptyTreeData.nodes.entities},\n      previouslySelected: emptyTreeData.nodes.previouslySelected,\n      selected: emptyTreeData.nodes.selected,\n      rootNodes: [...emptyTreeData.nodes.rootNodes],\n      expanded: [...emptyTreeData.nodes.expanded]\n    },\n    configuration: {...emptyTreeData.configuration}\n  };\n\n  return newState;\n}\n\n\nfunction setAllNodes(state: ITreeState, action: TreeSetAllNodesAction): ITreeState {\n  const newState = copyState(state, action.payload.treeId);\n  const treeId = action.payload.treeId;\n  const nodes = action.payload.nodes;\n  const newNodes: ITreeNodes = {};\n  const ids: string[] = nodes.map((nodeData: IOuterNode) => nodeData.id);\n\n  nodes.forEach((nodeData: IOuterNode) => {\n    nodeData.treeId = treeId;\n    newNodes[nodeData.id] = nodeData;\n\n    if (nodeData.parentId === null) {\n      newState[treeId].nodes.rootNodes.push(nodeData.id);\n    }\n  });\n\n  newState[treeId].nodes.rootNodes.forEach((id) => updateParents(newNodes, id));\n\n  newState[treeId].nodes.entities = newNodes;\n\n  return newState;\n}\n\nfunction updateParents(nodes: ITreeNodes, nodeId: string, parents: string[] = []): void {\n  const node: IOuterNode = nodes[nodeId];\n\n  if (node) {\n    node.parents = [...parents];\n\n    if (node.children.length > 0) {\n      const newParents = [...parents, ...[node.id]];\n\n      node.children.forEach(childId => updateParents(nodes, childId, newParents));\n    }\n  }\n}\n\nfunction markTreeAsFullyLoaded(state: ITreeState, action: TreeMarkAsFullyLoadedAction): ITreeState {\n  const treeId = action.payload.treeId;\n  const newState = copyState(state, treeId);\n\n  newState[treeId].configuration = {...newState[treeId].configuration, ...{isFullyLoaded: true}};\n\n  return newState;\n}\n\nfunction setConfiguration(state: ITreeState, action: TreeSetConfigurationAction): ITreeState {\n  const treeId = action.payload.treeId;\n  const newState = copyState(state, treeId);\n\n  newState[treeId].configuration = {...newState[treeId].configuration, ...action.payload.configuration};\n\n  return newState;\n}\n\nfunction selectNode(state: ITreeState, action: TreeSelectNodeAction) {\n  const treeId = action.payload.treeId;\n  const node = action.payload.node;\n  const newState = copyState(state, treeId);\n\n  newState[treeId].nodes.previouslySelected = newState[treeId].nodes.selected;\n  newState[treeId].nodes.selected = node ? node.id : null;\n\n  return newState;\n}\n\nexport function treeReducer(state: ITreeState = {}, action: TreeAction): ITreeState {\n  switch (action.type) {\n    case TreeActionTypes.TREE_REGISTER:\n      return registerTree(state, action);\n    case TreeActionTypes.TREE_SAVE_NODE_SUCCESS:\n      return saveNode(state, action);\n    case TreeActionTypes.TREE_DELETE_NODE_SUCCESS:\n      return removeNode(state, action);\n    case TreeActionTypes.TREE_INSERT_NODE:\n      return insertNode(state, action);\n    case TreeActionTypes.TREE_LOAD_SUCCESS:\n      return loadNodes(state, action);\n    case TreeActionTypes.TREE_MOVE_NODE_SUCCESS:\n      return moveNode(state, action);\n    case TreeActionTypes.TREE_SET_ALL_NODES:\n      return setAllNodes(state, action);\n    case TreeActionTypes.TREE_MARK_AS_FULLY_LOADED:\n      return markTreeAsFullyLoaded(state, action);\n    case TreeActionTypes.TREE_SET_CONFIGURATION:\n      return setConfiguration(state, action);\n    case TreeActionTypes.TREE_EXPAND_NODE:\n      return expandNode(state, action);\n    case TreeActionTypes.TREE_COLLAPSE_NODE:\n      return collapseNode(state, action);\n    case TreeActionTypes.TREE_SELECT_NODE:\n      return selectNode(state, action);\n    case TreeActionTypes.TREE_DELETE_NODE:\n    case TreeActionTypes.TREE_EDIT_NODE_START:\n    case TreeActionTypes.TREE_LOAD:\n    case TreeActionTypes.TREE_MOVE_NODE:\n    case TreeActionTypes.TREE_SAVE_NODE:\n      return state;\n    default:\n      return state;\n  }\n\n}\n\nexport const treeStateSelector: MemoizedSelector<object, ITreeState> = createFeatureSelector<ITreeState>('trees');\n\nexport function treeSelector(treeId: string): MemoizedSelector<object, ITreeData> {\n  return createSelector(treeStateSelector, (state: ITreeState) => state[treeId] || null);\n}\n\nexport function treeConfigurationSelector(treeId: string): MemoizedSelector<object, ITreeConfiguration> {\n  return createSelector(treeStateSelector, (state: ITreeState) => state[treeId].configuration || null);\n}\n\nexport function expandedNodesSelector(treeId: string): MemoizedSelector<object, string[]> {\n  return createSelector(treeStateSelector, (state: ITreeState) => state[treeId].nodes.expanded || []);\n}\n\nexport function selectedNodeSelector(treeId: string): MemoizedSelector<object, string> {\n  return createSelector(treeStateSelector, (state: ITreeState) => state[treeId].nodes.selected || null);\n}\n\nexport function previouslySelectedNodeSelector(treeId: string): MemoizedSelector<object, string> {\n  return createSelector(treeStateSelector, (state: ITreeState) => state[treeId].nodes.previouslySelected || null);\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {ContextMenuComponent, ContextMenuService} from 'ngx-contextmenu';\nimport {IOuterNode} from '../interfaces/IOuterNode';\nimport {\n  TreeActionTypes,\n  TreeCollapseNodeAction,\n  TreeDeleteNodeAction,\n  TreeEditNodeStartAction,\n  TreeExpandNodeAction,\n  TreeSaveNodeAction,\n  TreeSelectNodeAction\n} from '../store/treeActions.service';\nimport {TreeModel} from '../models/TreeModel';\nimport {Actions} from '@ngrx/effects';\nimport {animate, state, style, transition, trigger} from '@angular/animations';\nimport {AnimationTriggerMetadata} from '@angular/animations/src/animation_metadata';\nimport {select, Store} from '@ngrx/store';\nimport {ITreeState} from '../store/ITreeState';\nimport {NEW_NODE_ID, previouslySelectedNodeSelector} from '../store/treeReducer';\nimport {filter} from 'rxjs/operators';\nimport {empty, Observable, Subscription} from 'rxjs';\n\n\nexport function expand(): AnimationTriggerMetadata {\n  return trigger('expand', [\n    state('*', style({'overflow-y': 'hidden'})),\n    state('void', style({'overflow-y': 'hidden'})),\n    transition('* => void', [\n      style({height: '*'}),\n      animate(300, style({height: 0}))\n    ]),\n    transition('void => *', [\n      style({height: '0'}),\n      animate(300, style({height: '*'}))\n    ])\n  ]);\n}\n\n@Component({\n  encapsulation: ViewEncapsulation.None,\n  selector: 'ri-tree-item',\n  templateUrl: './item.component.html',\n  styleUrls: ['./item.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [expand()]\n})\nexport class ItemComponent implements OnInit, OnDestroy, OnChanges {\n  /**\n   * Input field where we can change data name\n   */\n  @ViewChild('inputElement') input: any;\n\n  /**\n   * Node instance\n   */\n  @Input()\n  public set node(node: IOuterNode) {\n    this._node = node;\n\n    this.initEditModeIfNeeded(node);\n  }\n\n  public get node(): IOuterNode {\n    return this._node;\n  }\n\n  @Input()\n  public treeModel: TreeModel;\n\n  @Input()\n  public contextMenu: ContextMenuComponent;\n\n  @Input()\n  public isExpanded = false;\n\n  @Input()\n  public isSelected = false;\n\n  /**\n   * Form field to change data name\n   */\n  public nameField = new FormControl();\n\n  public isEditMode = false;\n\n  public children$: Observable<IOuterNode[]> = empty();\n\n  protected isStartSave = false;\n\n  protected subscription = new Subscription();\n\n  protected _node: IOuterNode;\n\n  public constructor(protected contextMenuService: ContextMenuService,\n                     protected actions$: Actions,\n                     protected store: Store<ITreeState>,\n                     protected cdr: ChangeDetectorRef) {\n  }\n\n  public ngOnChanges(values): void {\n    // if node is added to the tree then some part of nodes is moving down\n    // and the new one is inserted, then all sub nodes should be rewritten\n    const node = values.node;\n\n    if (node && !node.firstChange && node.previousValue.id !== node.currentValue.id) {\n      this.children$ = this.getChildren();\n    }\n  }\n\n  public ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n\n  public ngOnInit() {\n    this.children$ = this.getChildren();\n\n    this.subscribeForOnEdit();\n\n    this.subscription.add(\n      this.store\n        .pipe(\n          select(previouslySelectedNodeSelector(this.node.treeId)),\n          filter((previouslySelected: string) => previouslySelected === this.node.id)\n        )\n        .subscribe(() => this.cdr.markForCheck())\n    );\n  }\n\n  /**\n   * Collapse node\n   */\n  public collapse(): void {\n    this.store.dispatch(new TreeCollapseNodeAction({\n      treeId: this.treeModel.treeId,\n      id: this.node.id,\n    }));\n  }\n\n  /**\n   * Expand node\n   */\n  public expand(): void {\n    this.store.dispatch(new TreeExpandNodeAction({treeId: this.treeModel.treeId, id: this.node.id}));\n  }\n\n  public onBlur() {\n    if (this.isStartSave) {\n      this.isStartSave = false;\n    } else {\n      this.undoChanges();\n    }\n  }\n\n  public onChange(event: KeyboardEvent) {\n    event.stopPropagation();\n\n    if (event.keyCode === 27) {\n      this.undoChanges();\n    } else if (event.keyCode === 13) {\n      this.isStartSave = true;\n      const node: IOuterNode = {\n        id: this.node.id,\n        treeId: this.node.treeId,\n        name: this.nameField.value,\n        parentId: this.node.parentId,\n        children: this.node.children,\n        parents: this.node.parents,\n        isExpanded: false\n      };\n\n      this.store.dispatch(new TreeSaveNodeAction({\n        treeId: this.treeModel.treeId,\n        node,\n      }));\n      this.isEditMode = false;\n    }\n  }\n\n  public onContextMenu($event: MouseEvent) {\n    if (!this.treeModel.configuration.disableContextMenu) {\n      this.contextMenuService.show.next({\n        contextMenu: this.contextMenu,\n        event: $event,\n        item: this.node\n      });\n    }\n\n    $event.preventDefault();\n    $event.stopPropagation();\n  }\n\n  public onSelect() {\n    if (this.isSelected) {\n      this.store.dispatch(new TreeSelectNodeAction({\n        treeId: this.treeModel.treeId,\n        node: null,\n      }));\n    } else {\n      this.store.dispatch(new TreeSelectNodeAction({\n        treeId: this.treeModel.treeId,\n        node: this.node,\n      }));\n    }\n  }\n\n  public trackByFn(item: IOuterNode): string {\n    return item.id;\n  }\n\n  protected getChildren(): Observable<IOuterNode[]> {\n    return this.treeModel.getChildren(this.node.id);\n  }\n\n  protected initEditModeIfNeeded(node: IOuterNode) {\n    if (!node) {\n      return;\n    }\n\n    this.isEditMode = node.id === NEW_NODE_ID;\n\n    if (this.isEditMode) {\n      this.nameField.setValue('');\n      this.setFocus();\n    }\n  }\n\n  protected isNewNode() {\n    return this.node.id === NEW_NODE_ID;\n  }\n\n  protected setFocus() {\n    setTimeout(() => this.input.nativeElement.focus(), 0);\n  }\n\n  protected subscribeForOnEdit(): void {\n    this.subscription.add(\n      this.actions$\n        .ofType(TreeActionTypes.TREE_EDIT_NODE_START)\n        .pipe(\n          filter((action: TreeEditNodeStartAction) => action.payload.node === this.node)\n        )\n        .subscribe((action: TreeEditNodeStartAction) => {\n          this.nameField.setValue(this.node.name);\n          this.isEditMode = true;\n          this.cdr.markForCheck();\n          this.setFocus();\n        })\n    );\n  }\n\n  protected undoChanges() {\n    this.isEditMode = false;\n\n    if (this.isNewNode()) {\n      this.store.dispatch(new TreeDeleteNodeAction({\n        treeId: this.treeModel.treeId,\n        node: this.node,\n      }));\n    }\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {IDragAndDrop, IDragElement, IDropElement} from '../interfaces/IDragAndDrop';\nimport {BehaviorSubject, Observable, Subject} from 'rxjs';\nimport {map, withLatestFrom} from 'rxjs/operators';\n\n@Injectable()\nexport class DragAndDrop {\n  public static DROP_DATA_TYPE = 'TREE_NODE';\n\n  protected dropStream$: Subject<IDropElement | null> = new Subject();\n  protected dragStream$: BehaviorSubject<IDragElement | null> = new BehaviorSubject(null);\n\n  public drop$: Observable<any>;\n\n  public constructor() {\n    this.drop$ = this.dropStream$\n      .pipe(\n        withLatestFrom(this.dragStream$),\n        map(([dropNode, dragNode]: [IDropElement, IDragElement]): IDragAndDrop => {\n          return {dragNode: dragNode, dropNode: dropNode, type: dragNode.type};\n        })\n      );\n  }\n\n  public dragStart(dragElement: IDragElement) {\n    this.dragStream$.next(dragElement);\n  }\n\n  public dragEnd(dropElement: IDropElement | null) {\n    this.dropStream$.next(dropElement);\n  }\n\n  public getDragStream(): BehaviorSubject<IDragElement | null> {\n    return this.dragStream$;\n  }\n\n  public getLastDragElement(): IDragElement {\n    return this.dragStream$.getValue();\n  }\n}\n","import {Component, Input, OnChanges, OnDestroy, OnInit, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {IOuterNode} from './interfaces/IOuterNode';\nimport {IContextMenu} from './interfaces/IContextMenu';\nimport {TreeModel} from './models/TreeModel';\nimport {ContextMenuComponent} from 'ngx-contextmenu';\nimport {DragAndDrop} from './dragAndDrop/dragAndDrop.service';\nimport {IDragAndDrop} from './interfaces/IDragAndDrop';\nimport {Store} from '@ngrx/store';\nimport {ITreeState} from './store/ITreeState';\nimport {filter} from 'rxjs/operators';\nimport {\n  TreeDeleteNodeAction,\n  TreeEditNodeStartAction,\n  TreeInsertNodeAction,\n  TreeMoveNodeAction\n} from './store/treeActions.service';\nimport {Observable, Subscription} from 'rxjs';\n\n@Component({\n  encapsulation: ViewEncapsulation.None,\n  selector: 'ri-tree',\n  templateUrl: './tree.component.html',\n  styleUrls: ['./tree.component.scss']\n})\nexport class TreeComponent implements OnInit, OnChanges, OnDestroy {\n  @Input() treeModel: TreeModel;\n\n  @ViewChild('contextMenu') contextMenu: ContextMenuComponent;\n\n  /**\n   * List of default options for context menu\n   */\n  private defaultOptions: IContextMenu[] = [\n    {\n      name: 'onEdit',\n      text: 'RI_TREE_LBL_EDIT_NODE',\n      iconCls: 'fa fa-edit'\n    },\n    {\n      name: 'onDelete',\n      text: 'RI_TREE_LBL_REMOVE_NODE',\n      iconCls: 'fa fa-trash'\n    }\n  ];\n\n  /**\n   * List of context menu items\n   */\n  public menuList: IContextMenu[] = [];\n\n  public rootNodes$: Observable<IOuterNode[]>;\n\n  protected currentSelectedNode: IOuterNode;\n\n  protected subscription = new Subscription();\n\n  public constructor(protected store: Store<ITreeState>,\n                     protected dragAndDrop: DragAndDrop) {\n\n  }\n\n  public ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n\n  public ngOnInit() {\n    this.registerMove();\n\n    this.rootNodes$ = this.treeModel.rootNodes$;\n\n    this.subscription.add(\n      this.treeModel.currentSelectedNode$\n        .subscribe((node: IOuterNode) => this.currentSelectedNode = node)\n    );\n  }\n\n  public ngOnChanges(data: any) {\n    this.menuList = [];\n    this.defaultOptions.forEach((item) => this.menuList.push(item));\n  }\n\n  public onAdd() {\n    const parentId = this.currentSelectedNode ? this.currentSelectedNode.id : null;\n\n    this.store.dispatch(new TreeInsertNodeAction({treeId: this.treeModel.treeId, parentId}));\n  }\n\n  /**\n   * On select item from context menu\n   *\n   * @param name - name of the event\n   * @param node - data item\n   */\n  public onContextMenuClick(name: string, node: IOuterNode) {\n\n    switch (name) {\n      case 'onEdit':\n        event.stopPropagation();\n        this.store.dispatch(new TreeEditNodeStartAction({node}));\n        break;\n      case 'onDelete':\n        this.store.dispatch(new TreeDeleteNodeAction({treeId: this.treeModel.treeId, node}));\n        break;\n      default:\n        console.warn('Unknown context menu action: ' + name);\n    }\n  }\n\n  public trackByFn(item: IOuterNode): string {\n    return item.id;\n  }\n\n  /**\n   * Register data \"move event\"\n   */\n  protected registerMove(): void {\n    if (this.treeModel.configuration.disableMoveNodes) {\n      return;\n    }\n\n    this.dragAndDrop.drop$\n      .pipe(\n        filter((data: IDragAndDrop) => {\n          if (data.type === DragAndDrop.DROP_DATA_TYPE) {\n            if (data.dropNode) {\n              return data.dropNode.data.treeId === this.treeModel.treeId;\n            } else {\n              return data.dragNode.data.treeId === this.treeModel.treeId;\n            }\n          } else {\n            if (data.dropNode && data.dropNode.zones && data.dropNode.zones.indexOf(data.dragNode.zoneId) === -1) {\n              return false;\n            }\n\n            return true;\n          }\n        })\n      )\n      .subscribe((data: IDragAndDrop) => {\n        const dropNode = data.dropNode ? data.dropNode.data : null;\n        this.store.dispatch(new TreeMoveNodeAction({\n            sourceOfDroppedData: data.type,\n            treeId: this.treeModel.treeId,\n            oldNode: data.dragNode.data,\n            node: dropNode\n          }\n        ));\n      });\n  }\n}\n","import {Directive, ElementRef, Input, OnInit, Renderer} from '@angular/core';\nimport {DragAndDrop} from './dragAndDrop.service';\n\n@Directive({\n  selector: '[riDraggable]'\n})\nexport class DraggableDirective implements OnInit {\n  @Input() data: any;\n  @Input() dragZone: string | null = null;\n  @Input() sourceType: string = DragAndDrop.DROP_DATA_TYPE;\n\n  public dragEnabled = true;\n\n  public constructor(protected el: ElementRef,\n                     private renderer: Renderer,\n                     protected dragAndDrop: DragAndDrop) {\n    renderer.listen(el.nativeElement, 'dragstart', ($event) => {\n      if (this.dragEnabled) {\n        this.onDragStart($event);\n      }\n    });\n\n    renderer.listen(el.nativeElement, 'dragend', () => {\n      // on drag end we reset last drag element (this event is fired after drop)\n      this.dragAndDrop.dragStart(null);\n    });\n  }\n\n  private onDragStart($event: DragEvent) {\n    this.dragAndDrop.dragStart({zoneId: this.dragZone, data: this.data, type: this.sourceType});\n\n    $event.dataTransfer.effectAllowed = 'copy';\n    $event.dataTransfer.dropEffect = 'copy';\n  }\n\n  public ngOnInit() {\n    this.el.nativeElement.draggable = this.dragEnabled;\n\n    if (!this.data) {\n      throw new Error('DraggableDirective needs data');\n    }\n  }\n}\n","import {Directive, ElementRef, Input, OnInit, Renderer} from '@angular/core';\nimport {DragAndDrop} from './dragAndDrop.service';\nimport {IOuterNode} from '../interfaces/IOuterNode';\n\nexport interface DropConfig {\n  dropAllowedCssClass?: string;\n  dropZone?: string[] | null;\n}\n\n\n@Directive({\n  selector: '[riDroppable]'\n})\nexport class DroppableDirective implements OnInit {\n  @Input() data: IOuterNode;\n  @Input() dropConfig: DropConfig = {};\n\n  public constructor(protected el: ElementRef, private renderer: Renderer, protected dragAndDrop: DragAndDrop) {\n    renderer.listen(el.nativeElement, 'dragover', ($event) => {\n      $event.preventDefault();\n      const dropAllowed = this.isDropAllowed();\n\n      this.changeTargetCursor($event, dropAllowed);\n      this.toggleDropClass(dropAllowed);\n    });\n\n    renderer.listen(el.nativeElement, 'dragleave', ($event) => {\n      $event.preventDefault();\n      this.toggleDropClass(false);\n    });\n\n    renderer.listen(el.nativeElement, 'drop', () => {\n      this.toggleDropClass(false);\n\n      if (this.isDropAllowed()) {\n        this.dragAndDrop.dragEnd({zones: this.dropConfig.dropZone, data: this.data});\n      }\n    });\n  }\n\n  public ngOnInit() {\n    this.initConfig();\n\n    if (!this.data) {\n      throw new Error('DroppableDirective needs data');\n    }\n  }\n\n  /**\n   * Add or remove additional class when drop allowed\n   * @param dropAllowed\n   */\n  private toggleDropClass(dropAllowed = false) {\n    this.renderer.setElementClass(this.el.nativeElement, this.dropConfig.dropAllowedCssClass, dropAllowed);\n  }\n\n  private isDropAllowed = function () {\n    const lastDragElement = this.dragAndDrop.getLastDragElement();\n    const source = lastDragElement.data;\n    const target = this.data;\n    const dropZone = this.dropConfig.dropZone;\n\n    if (dropZone && dropZone.length > 0 && dropZone.indexOf(lastDragElement.zoneId) === -1) {\n      return false;\n    }\n\n    // todo: check drag and drop zones\n    return !(source === target || target.id === source.parentId || target.parents.indexOf(source.id) > -1);\n  };\n\n  /**\n   * Change drag event cursor\n   * @param $event\n   * @param add\n   */\n  private changeTargetCursor($event: DragEvent, add = false) {\n    const cursorType = add ? 'copy' : 'none';\n\n    $event.dataTransfer.effectAllowed = cursorType;\n    $event.dataTransfer.dropEffect = cursorType;\n  }\n\n  /**\n   * initialize configuration options, use default or passed\n   */\n  private initConfig(): void {\n    const defaultConfig: DropConfig = {\n      dropAllowedCssClass: 'drop-allowed'\n    };\n\n    for (const key in defaultConfig) {\n      if (defaultConfig.hasOwnProperty(key)) {\n        this.dropConfig[key] = this.dropConfig[key] || defaultConfig[key];\n      }\n    }\n  }\n}\n","import {Component, Input} from '@angular/core';\nimport {TreeModel} from '../../models/TreeModel';\nimport {DragAndDrop} from '../dragAndDrop.service';\nimport {IDragAndDrop, IDragElement} from '../../interfaces/IDragAndDrop';\nimport {map} from 'rxjs/operators';\nimport {merge, Observable} from 'rxjs';\n\n@Component({\n  selector: 'ri-dropzone',\n  templateUrl: './dropzone.component.html',\n  styleUrls: ['./dropzone.component.scss']\n})\nexport class DropzoneComponent {\n  @Input() treeModel: TreeModel;\n  @Input() dropZone: string[] = [];\n\n  public isOpen$: Observable<boolean>;\n\n  constructor(public dragAndDrop: DragAndDrop) {\n\n    const isDragStart$ = this.dragAndDrop.getDragStream()\n      .pipe(\n        map((dragElement: IDragElement): boolean => {\n          const isDragElement = !!dragElement && !!dragElement.data;\n\n          if (isDragElement) {\n            if (dragElement.type === DragAndDrop.DROP_DATA_TYPE) {\n              const isNotRootElement = dragElement.data.parentId;\n              const isFromCurrentTree = dragElement.data.treeId === this.treeModel.treeId;\n\n              return (isNotRootElement && isFromCurrentTree) ? true : false;\n            } else {\n              return true;\n            }\n          }\n\n          return false;\n        })\n      );\n\n    const isDragEnd$ = this.dragAndDrop.drop$\n      .pipe(\n        map((data: IDragAndDrop): boolean => {\n          return false;\n        })\n      );\n\n    this.isOpen$ = merge(isDragStart$, isDragEnd$);\n  }\n\n  public onDrop() {\n    this.dragAndDrop.dragEnd(null);\n  }\n\n  public onDragOver($event) {\n    $event.preventDefault();\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {INodeService} from './node.service';\n\n@Injectable()\nexport class NodeDispatcherService {\n  private nodeServices: { [key: string]: INodeService } = {};\n\n  public registerService(name: string, nodeService: INodeService): void {\n    this.nodeServices[name] = nodeService;\n  }\n\n  public get(name: string): INodeService {\n    if (Boolean(this.nodeServices[name])) {\n      return this.nodeServices[name];\n    } else {\n      // default node service provider\n      throw Error(`No tree service with name ${name}`);\n    }\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {Actions, Effect, ofType} from '@ngrx/effects';\nimport {\n  TreeAction,\n  TreeActionTypes,\n  TreeDeleteNodeAction,\n  TreeDeleteNodeErrorAction,\n  TreeDeleteNodeSuccessAction,\n  TreeExpandNodeAction,\n  TreeInsertNodeAction,\n  TreeLoadNodesAction,\n  TreeLoadNodesErrorAction,\n  TreeLoadNodesSuccessAction,\n  TreeLoadPathAction,\n  TreeMoveNodeAction,\n  TreeMoveNodeErrorAction,\n  TreeMoveNodeSuccessAction,\n  TreeRegisterAction,\n  TreeSaveNodeAction,\n  TreeSaveNodeErrorAction,\n  TreeSaveNodeSuccessAction,\n  TreeSetAllNodesAction\n} from './treeActions.service';\nimport {IOuterNode} from '../interfaces/IOuterNode';\nimport {combineLatest, Observable, of} from 'rxjs';\nimport {ITreeActionPayload, ITreeConfiguration, ITreeData, ITreeState} from './ITreeState';\nimport {NodeDispatcherService} from '../service/nodesDispatcher.service';\nimport {DragAndDrop} from '../dragAndDrop/dragAndDrop.service';\nimport {catchError, filter, map, mergeMap, switchMap, take} from 'rxjs/operators';\nimport {select, Store} from '@ngrx/store';\nimport {NEW_NODE_ID, treeConfigurationSelector, treeSelector} from './treeReducer';\n\n@Injectable()\nexport class TreeEffectsService {\n  @Effect()\n  public register$ = this.actions$\n    .pipe(\n      ofType(TreeActionTypes.TREE_REGISTER),\n      map((action: TreeRegisterAction): TreeAction => {\n        if (action.payload.silent) {\n          return new TreeSetAllNodesAction({treeId: action.payload.treeId, nodes: action.payload.nodes});\n        } else {\n          return new TreeLoadNodesAction({treeId: action.payload.treeId, id: null});\n        }\n      })\n    );\n\n  @Effect()\n  public load$ = this.actions$\n    .pipe(\n      ofType(TreeActionTypes.TREE_LOAD),\n      mergeMap((action: TreeLoadNodesAction) => this.loadNodes(action.payload.treeId, action.payload.id)\n        .pipe(\n          map((nodesData: IOuterNode[]): TreeLoadNodesSuccessAction => new TreeLoadNodesSuccessAction({\n            treeId: action.payload.treeId,\n            id: action.payload.id,\n            nodes: nodesData\n          })),\n          catchError(() => of(new TreeLoadNodesErrorAction({\n            treeId: action.payload.treeId,\n            id: action.payload.id\n          })))\n        )\n      )\n    );\n\n\n  @Effect()\n  public delete$ = this.actions$\n    .pipe(\n      ofType(TreeActionTypes.TREE_DELETE_NODE),\n      switchMap((action: TreeDeleteNodeAction) => this.deleteNode(action.payload.treeId, action.payload.node)\n        .pipe(\n          map((): TreeDeleteNodeSuccessAction => new TreeDeleteNodeSuccessAction({...action.payload})),\n          catchError((): Observable<TreeDeleteNodeErrorAction> => of(new TreeDeleteNodeErrorAction({...action.payload})))\n        )\n      )\n    );\n\n\n  @Effect()\n  public save$ = this.actions$\n    .pipe(\n      ofType(TreeActionTypes.TREE_SAVE_NODE),\n      switchMap((action: TreeSaveNodeAction) => this.saveNode(action.payload.treeId, {...action.payload.node})\n        .pipe(\n          map((node: IOuterNode): TreeSaveNodeSuccessAction => new TreeSaveNodeSuccessAction({\n            treeId: action.payload.treeId,\n            oldNode: action.payload.node,\n            node\n          })),\n          catchError(() => of(new TreeSaveNodeErrorAction({...action.payload})))\n        )\n      )\n    );\n\n  @Effect()\n  public move$ = this.actions$\n    .pipe(\n      ofType(TreeActionTypes.TREE_MOVE_NODE),\n      filter((action: TreeMoveNodeAction) => {\n        return action.payload.sourceOfDroppedData === DragAndDrop.DROP_DATA_TYPE;\n      }),\n      switchMap((action: TreeMoveNodeAction) => {\n          const source = <IOuterNode>{...action.payload.oldNode};\n          const target = Boolean(action.payload.node) ? {...action.payload.node} : null;\n\n          return this.moveNode(action.payload.treeId, source, target)\n            .pipe(\n              map((node: IOuterNode): ITreeActionPayload => {\n                return {\n                  treeId: action.payload.treeId,\n                  oldNode: action.payload.oldNode,\n                  node: node\n                };\n              }),\n              switchMap((data: ITreeActionPayload) => {\n                return this.store.select(treeConfigurationSelector(action.payload.treeId))\n                  .pipe(\n                    take(1),\n                    map((configuration: ITreeConfiguration) => {\n                      return {\n                        configuration,\n                        data\n                      };\n                    })\n                  );\n              }),\n              catchError(() => {\n                const newAction = new TreeMoveNodeErrorAction({\n                  treeId: action.payload.treeId,\n                  source: action.payload.oldNode,\n                  target: action.payload.node\n                });\n\n                return of(newAction);\n              })\n            );\n        }\n      ),\n      mergeMap((value: { data: ITreeActionPayload, configuration: ITreeConfiguration }) => {\n        const data = value.data;\n        const actions: TreeAction[] = [\n          new TreeMoveNodeSuccessAction({treeId: data.treeId, source: data.oldNode, target: data.node}),\n        ];\n\n        if (!value.configuration.isFullyLoaded) {\n          actions.push(new TreeLoadNodesAction({treeId: data.treeId, id: data.node.parentId}));\n        }\n\n        return actions;\n      })\n    );\n\n  @Effect()\n  public expand$ = this.actions$\n    .pipe(\n      ofType(TreeActionTypes.TREE_EXPAND_NODE),\n      switchMap((action: TreeExpandNodeAction) =>\n        this.store\n          .pipe(\n            select(treeSelector(action.payload.treeId)),\n            take(1),\n            filter((treeState: ITreeData) => !treeState.configuration.isFullyLoaded),\n            map(() => {\n              return new TreeLoadNodesAction({\n                  treeId: action.payload.treeId,\n                  id: action.payload.id\n                }\n              );\n            })\n          )\n      )\n    );\n\n  @Effect()\n  public insert$ = this.actions$\n    .pipe(\n      ofType(TreeActionTypes.TREE_INSERT_NODE),\n      filter((action: TreeInsertNodeAction) => !!action.payload.parentId),\n      map((action: TreeInsertNodeAction) => {\n        return new TreeExpandNodeAction({treeId: action.payload.treeId, id: action.payload.parentId});\n      })\n    );\n\n  @Effect()\n  public initPathForFullyLoadedTreeEffect$ = this.actions$\n    .pipe(\n      ofType(TreeActionTypes.TREE_LOAD_PATH),\n      switchMap((action: TreeLoadPathAction) => {\n        return this.store.select(treeConfigurationSelector(action.payload.treeId))\n          .pipe(\n            take(1),\n            map((configuration: ITreeConfiguration) => {\n              return {action, configuration};\n            })\n          );\n      }),\n      map((value: { action: TreeLoadPathAction, configuration: ITreeConfiguration }) => {\n          const {action, configuration} = value;\n\n          if (configuration.isFullyLoaded) {\n            return action.payload.ids.map((id: string) => new TreeExpandNodeAction({treeId: action.payload.treeId, id}));\n          } else {\n            const loadActions = action.payload.ids.map((id: string) => this.loadNodes(action.payload.treeId, id));\n            return combineLatest(loadActions)\n              .pipe(\n                take(1),\n                mergeMap((data: IOuterNode[][]) => {\n                  const loadSuccess = data.map((nodes: IOuterNode[], index) => new TreeLoadNodesSuccessAction({\n                    treeId: action.payload.treeId,\n                    id: action.payload.ids[index],\n                    nodes\n                  }));\n                  const expandNodes = action.payload.ids.map((id: string) => new TreeExpandNodeAction({\n                    treeId: action.payload.treeId,\n                    id\n                  }));\n\n                  return [...loadSuccess, ...expandNodes];\n                })\n              );\n          }\n        }\n      ),\n      mergeMap((actions: any[]) => actions)\n    );\n\n  constructor(private actions$: Actions,\n              private nodeDispatcherService: NodeDispatcherService,\n              private store: Store<ITreeState>) {\n  }\n\n  protected deleteNode(treeId: string, node: IOuterNode): Observable<IOuterNode> {\n    const nodeService = this.nodeDispatcherService.get(treeId);\n\n    return node.id ? nodeService.remove(node.id) : of(node);\n  }\n\n  protected loadNodes(treeId: string, id: string | null) {\n    const nodeService = this.nodeDispatcherService.get(treeId);\n\n    return nodeService.load(id);\n  }\n\n  protected saveNode(treeId: string, node: IOuterNode): Observable<IOuterNode> {\n    const nodeService = this.nodeDispatcherService.get(treeId);\n\n    if (node.id === NEW_NODE_ID) {\n      return nodeService.add(node, node.parentId);\n    } else {\n      return nodeService.update(node);\n    }\n  }\n\n  protected moveNode(treeId: string, source: IOuterNode, target: IOuterNode): Observable<IOuterNode> {\n    const nodeService = this.nodeDispatcherService.get(treeId);\n\n    return nodeService.move(source, target);\n  }\n}\n","import {IOuterNode} from '../interfaces/IOuterNode';\nimport {IConfiguration} from '../interfaces/IConfiguration';\nimport {ITreeData, ITreeNodes, ITreeState} from '../store/ITreeState';\nimport {distinctUntilChanged, map} from 'rxjs/operators';\nimport * as _isEqual from 'lodash.isequal';\nimport {\n  expandedNodesSelector,\n  NEW_NODE_ID,\n  previouslySelectedNodeSelector,\n  selectedNodeSelector\n} from '../store/treeReducer';\nimport {select, Store} from '@ngrx/store';\nimport {TreeLoadPathAction} from '../store/treeActions.service';\nimport {combineLatest, Observable, Subscription} from 'rxjs';\n\nconst isEqual = _isEqual;\n\nexport class TreeModel {\n\n  public get treeId(): string {\n    return this.configuration.treeId;\n  }\n\n  public get isFullyLoaded(): boolean {\n    return this._fullyLoaded;\n  }\n\n  public nodes$: Observable<ITreeNodes>;\n  public rootNodes$: Observable<IOuterNode[]>;\n  public currentSelectedNode$: Observable<IOuterNode>;\n  private expanded: Set<string>;\n  private selected: string = null;\n  private previouslySelected: string = null;\n\n  private subscription = new Subscription();\n\n  public constructor(protected store: Store<ITreeState>,\n                     protected treeData$: Observable<ITreeData>,\n                     public configuration: IConfiguration,\n                     protected _fullyLoaded = false) {\n    this.nodes$ = this.treeData$\n      .pipe(\n        distinctUntilChanged((prev: ITreeData, next: ITreeData) => {\n          return isEqual(prev.nodes.entities, next.nodes.entities);\n        }),\n        map((treeData: ITreeData): ITreeNodes => treeData.nodes.entities)\n      );\n\n    this.rootNodes$ = this.treeData$\n      .pipe(\n        map((treeData: ITreeData): IOuterNode[] => treeData.nodes.rootNodes.map((id) => treeData.nodes.entities[id]).sort(this.sortNodes)),\n        distinctUntilChanged(),\n      );\n\n    this.currentSelectedNode$ = this.treeData$\n      .pipe(\n        map((treeData: ITreeData): IOuterNode => {\n          const nodesData = treeData.nodes;\n          const selectedId = nodesData.selected;\n\n          return selectedId ? nodesData.entities[selectedId] : null;\n        }),\n        // distinctUntilChanged((prev: IOuterNode, next: IOuterNode) => {\n        //   return isEqual(prev ? prev.id : null, next ? next.id : null)\n        // })\n      );\n\n    this.initConfiguration();\n    this.subscribeExpanded();\n    this.subscribeSelected();\n    this.subscribePreviouslySelected();\n  }\n\n  public destroy(): void {\n    this.subscription.unsubscribe();\n  }\n\n  public getParentsList(): Observable<IOuterNode[]> {\n    return combineLatest(\n      this.currentSelectedNode$,\n      this.nodes$\n    )\n      .pipe(\n        map(([currentNode, nodes]: [IOuterNode, ITreeNodes]): IOuterNode[] => {\n          if (!Boolean(currentNode)) {\n            return [];\n          }\n\n          const parents: IOuterNode[] = currentNode.parents.map(id => nodes[id]);\n\n          parents.push(currentNode);\n\n          return parents;\n        })\n      );\n  }\n\n  public getChildren(nodeId: string | null): Observable<IOuterNode[]> {\n    return this.nodes$\n      .pipe(\n        map((state: ITreeNodes): IOuterNode[] => this.getNodesByParentId(state, nodeId)),\n        map((nodes: IOuterNode[]) => {\n          return [...nodes].sort(this.sortNodes);\n        })\n      );\n  }\n\n  public initPath(path: string[]): void {\n    this.store.dispatch(new TreeLoadPathAction({treeId: this.configuration.treeId, ids: path}));\n  }\n\n  public isExpanded(node: IOuterNode): boolean {\n    if (!node) {\n      return false;\n    }\n\n    return this.expanded.has(node.id);\n  }\n\n  public isSelected(node: IOuterNode): boolean {\n    if (!node) {\n      return false;\n    }\n\n    return this.selected === node.id;\n  }\n\n  public wasPreviouslySelected(nodeId: string): boolean {\n    return this.previouslySelected === nodeId;\n  }\n\n  private initConfiguration(): void {\n    const defaultConfiguration: IConfiguration = {\n      disableMoveNodes: false,\n      dragZone: null,\n      dropZone: null,\n      treeId: 'tree',\n      showAddButton: true,\n      isAnimation: false,\n    };\n\n    for (const key in defaultConfiguration) {\n      if (this.configuration[key] === undefined) {\n        this.configuration[key] = defaultConfiguration[key];\n      }\n    }\n  }\n\n  private getNodesByParentId(state: ITreeNodes, id: string | null): IOuterNode[] {\n    return Object.keys(state)\n      .filter((key: string) => state[key].parentId === id)\n      .map((key: string) => state[key]);\n  }\n\n  private sortNodes(first: IOuterNode, second: IOuterNode): number {\n    if (second.id === NEW_NODE_ID) {\n      return -1;\n    }\n\n    return first.name > second.name ? 1 : -1;\n  }\n\n  private subscribeExpanded(): void {\n    this.subscription.add(\n      this.store\n        .pipe(\n          select(expandedNodesSelector(this.treeId))\n        )\n        .subscribe((expanded: string[]) => this.expanded = new Set(expanded))\n    );\n  }\n\n  private subscribeSelected(): void {\n    this.subscription.add(\n      this.store\n        .pipe(\n          select(selectedNodeSelector(this.treeId))\n        )\n        .subscribe((selected: string) => this.selected = selected)\n    );\n  }\n\n  private subscribePreviouslySelected(): void {\n    this.subscription.add(\n      this.store\n        .pipe(\n          select(previouslySelectedNodeSelector(this.treeId))\n        )\n        .subscribe((selected: string) => this.previouslySelected = selected)\n    );\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {IConfiguration} from '../interfaces/IConfiguration';\nimport {TreeModel} from '../models/TreeModel';\nimport {treeSelector} from '../store/treeReducer';\nimport {Store} from '@ngrx/store';\nimport {ITreeState} from '../store/ITreeState';\nimport {NodeDispatcherService} from './nodesDispatcher.service';\nimport {IOuterNode} from '../interfaces/IOuterNode';\nimport {\n  TreeMarkAsFullyLoadedAction,\n  TreeRegisterAction,\n  TreeSetConfigurationAction\n} from '../store/treeActions.service';\n\n@Injectable()\nexport class TreeModelGeneratorService {\n  public constructor(private nodeDispatcherService: NodeDispatcherService,\n                     private store: Store<ITreeState>) {\n  }\n\n  public createTreeModel(configuration: IConfiguration, nodes: IOuterNode[] = null): TreeModel {\n    const treeId = configuration.treeId;\n    const isFullyLoaded = Boolean(nodes);\n\n    // register new tree in store\n    this.store.dispatch(new TreeRegisterAction({\n      treeId,\n      silent: isFullyLoaded,\n      nodes\n    }));\n\n    // init tree configuration\n    this.store.dispatch(new TreeSetConfigurationAction({treeId, configuration}));\n\n    if (Boolean(nodes)) {\n      this.nodeDispatcherService.get(treeId).setAllNodes(nodes);\n      this.store.dispatch(new TreeMarkAsFullyLoadedAction({treeId}));\n    }\n\n    const folders$ = this.store.select(treeSelector(configuration.treeId));\n\n    return new TreeModel(this.store, folders$, configuration, isFullyLoaded);\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core';\nimport {TreeModel} from '../models/TreeModel';\nimport {Observable} from 'rxjs';\nimport {IOuterNode} from '../interfaces/IOuterNode';\nimport {TreeSelectNodeAction} from '../store/treeActions.service';\nimport {ITreeState} from '../store/ITreeState';\nimport {Store} from '@ngrx/store';\n\n@Component({\n  selector: 'ri-tree-parents-list',\n  templateUrl: './parents-list.component.html',\n  styleUrls: ['./parents-list.component.scss']\n})\nexport class ParentsListComponent implements OnInit {\n  @Input()\n  public treeModel: TreeModel;\n\n  public parents$: Observable<IOuterNode[]>;\n\n  public constructor(protected store: Store<ITreeState>) {\n\n  }\n\n  public ngOnInit(): void {\n    this.parents$ = this.treeModel.getParentsList();\n  }\n\n  public selectNode(node: IOuterNode, isCurrentSelectedNode: boolean): void {\n    if (!isCurrentSelectedNode) {\n      this.store.dispatch(new TreeSelectNodeAction({\n        treeId: this.treeModel.treeId,\n        node,\n      }));\n    }\n  }\n\n}\n","import {Injectable, InjectionToken} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {IOuterNode} from '../interfaces/IOuterNode';\nimport {IApiConfig} from '../IApiConfig.service';\nimport {HttpClient, HttpParams} from '@angular/common/http';\n\nexport interface INodeService {\n  readonly treeId: string;\n\n  load(nodeId: string): Observable<IOuterNode[]>;\n\n  add(node: IOuterNode, parentNodeId: string | null): Observable<IOuterNode>;\n\n  move(srcNode: IOuterNode, targetNode: IOuterNode | null): Observable<IOuterNode>;\n\n  update(node: IOuterNode): Observable<IOuterNode>;\n\n  remove(nodeId: string): Observable<IOuterNode>;\n\n  setAllNodes(nodes: IOuterNode[]): void;\n}\n\nexport const NODE_SERVICE = new InjectionToken('NODE_SERVICE');\n\n@Injectable()\nexport class NodeService implements INodeService {\n  protected apiConfig: IApiConfig = {\n    addUrl: '/api/nodes',\n    getUrl: '/api/nodes',\n    moveUrl: '/api/nodes/move',\n    updateUrl: '/api/nodes',\n    removeUrl: '/api/nodes',\n  };\n\n  public get treeId(): string {\n    return 'tree';\n  }\n\n  public constructor(protected http: HttpClient) {\n  }\n\n  public setAllNodes(nodes: IOuterNode[]): void {\n\n  }\n\n  public load(nodeId = ''): Observable<IOuterNode[]> {\n    const params = new HttpParams().set('nodeId', nodeId);\n\n    return this.http.get<IOuterNode[]>(this.getPath('GET', nodeId), {params});\n  }\n\n\n  public add(node: IOuterNode, parentNodeId: string = null): Observable<IOuterNode> {\n    return this.http.post<IOuterNode>(this.getPath('CREATE', parentNodeId), {\n      node: node,\n      parentNodeId: parentNodeId\n    });\n  }\n\n  public move(srcNode: IOuterNode, targetNode: IOuterNode | null): Observable<IOuterNode> {\n    const srcId = srcNode.id;\n    const targetId = targetNode ? targetNode.id : null;\n\n    return this.http.put<IOuterNode>(this.getPath('MOVE', srcId, targetId), {source: srcId, target: targetId});\n  }\n\n  public update(node: IOuterNode): Observable<IOuterNode> {\n    return this.http.put<IOuterNode>(this.getPath('UPDATE', node.id), node);\n  }\n\n  public remove(nodeId: string): Observable<IOuterNode> {\n    const params = new HttpParams().set('nodeId', nodeId);\n\n    return this.http.delete<IOuterNode>(this.getPath('REMOVE', nodeId), {params});\n  }\n\n  protected getPath(type: string, nodeId: string, destNodeId: string = null) {\n    if (!this.apiConfig) {\n      throw new Error('No API configuration for Tree');\n    }\n\n    const urlMap = {\n      'GET': this.apiConfig.getUrl,\n      'CREATE': this.apiConfig.addUrl,\n      'REMOVE': this.apiConfig.removeUrl,\n      'UPDATE': this.apiConfig.updateUrl,\n      'MOVE': this.apiConfig.moveUrl\n    };\n\n    let path = this.replaceNodeId(urlMap[type], nodeId);\n\n    if (destNodeId) {\n      path = this.replaceDestNodeId(path, destNodeId);\n    }\n\n    return path;\n  }\n\n  protected replaceNodeId(url: string, nodeId: string) {\n    return url.replace('{nodeId}', nodeId);\n  }\n\n  protected replaceDestNodeId(url: string, nodeId: string) {\n    return url.replace('{destNodeId}', nodeId);\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {TreeModelGeneratorService} from './treeModelGenerator.service';\nimport {NodeDispatcherService} from './nodesDispatcher.service';\nimport {INodeService} from './node.service';\nimport {TreeModel} from '../models/TreeModel';\nimport {IOuterNode} from '../interfaces/IOuterNode';\nimport {IConfiguration} from '../interfaces/IConfiguration';\n\n@Injectable()\nexport class TreeInitializerService {\n  public constructor(private treeModelGeneratorService: TreeModelGeneratorService,\n                     private nodeDispatcherService: NodeDispatcherService) {\n\n  }\n\n  public init(treeConfiguration: IConfiguration,\n              treeApi: INodeService,\n              loadedNodes?: IOuterNode[]): TreeModel {\n    this.nodeDispatcherService.registerService(treeConfiguration.treeId, treeApi);\n\n    return this.treeModelGeneratorService.createTreeModel(treeConfiguration, loadedNodes);\n  }\n}\n","import {CUSTOM_ELEMENTS_SCHEMA, InjectionToken, ModuleWithProviders, NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ItemComponent} from './item/item.component';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {TreeComponent} from './tree.component';\nimport {DndModule, DraggableComponent} from 'ng2-dnd';\nimport {DragAndDrop} from './dragAndDrop/dragAndDrop.service';\nimport {DraggableDirective} from './dragAndDrop/draggable.directive';\nimport {DroppableDirective} from './dragAndDrop/droppable.directive';\nimport {DropzoneComponent} from './dragAndDrop/dropzone/dropzone.component';\nimport {StoreModule} from '@ngrx/store';\nimport {EffectsModule} from '@ngrx/effects';\nimport {TreeEffectsService} from './store/treeEffects.service';\nimport {NodeDispatcherService} from './service/nodesDispatcher.service';\nimport {TranslateModule, TranslateService} from '@ngx-translate/core';\nimport {HttpClientModule} from '@angular/common/http';\nimport {ContextMenuModule} from 'ngx-contextmenu';\nimport {treeReducer} from './store/treeReducer';\nimport {TreeModelGeneratorService} from './service/treeModelGenerator.service';\nimport {ParentsListComponent} from './parents-list/parents-list.component';\nimport {NODE_SERVICE, NodeService} from './service/node.service';\nimport {TreeInitializerService} from './service/initializer.service';\n\nexport const NODE_DISPATCHER_TOKEN = new InjectionToken<NodeDispatcherService>('NodeDispatcherService');\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ContextMenuModule,\n    DndModule,\n    EffectsModule.forFeature([TreeEffectsService]),\n    HttpClientModule,\n    FormsModule,\n    ReactiveFormsModule,\n    StoreModule.forFeature('trees', treeReducer),\n    TranslateModule,\n  ],\n  declarations: [\n    TreeComponent,\n    ItemComponent,\n    DraggableDirective,\n    DroppableDirective,\n    DropzoneComponent,\n    ParentsListComponent,\n  ],\n  exports: [\n    TreeComponent,\n    ItemComponent,\n    DraggableDirective,\n    DroppableDirective,\n    DropzoneComponent,\n    DraggableComponent,\n    ParentsListComponent,\n    StoreModule,\n    EffectsModule,\n  ],\n  providers: [\n    {provide: NODE_SERVICE, useClass: NodeService, multi: true}\n  ],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class TreeModule {\n\n  public static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: TreeModule,\n      providers: [\n        DragAndDrop,\n        NodeDispatcherService,\n        TreeEffectsService,\n        TreeInitializerService,\n        TreeModelGeneratorService,\n      ]\n    };\n  }\n\n  public static forFeature(): ModuleWithProviders {\n    return {\n      ngModule: TreeModule,\n      providers: [],\n    };\n  }\n\n  public constructor(private translate: TranslateService) {\n    this.setTranslationForEN();\n    this.setTranslationForPL();\n    this.translate.setDefaultLang('en');\n  }\n\n  private setTranslationForPL(): void {\n    this.translate.setTranslation('pl', {\n      RI_TREE_LBL_ADD_NODE: 'Dodaj',\n      RI_TREE_LBL_EDIT_NODE: 'Edytuj',\n      RI_TREE_LBL_REMOVE_NODE: 'UsuÅ',\n      RI_TREE_LBL_DROP_ZONE: 'UpuÅÄ tutaj'\n    });\n  }\n\n  private setTranslationForEN(): void {\n    this.translate.setTranslation('en', {\n      RI_TREE_LBL_ADD_NODE: 'Add data',\n      RI_TREE_LBL_EDIT_NODE: 'Edit data',\n      RI_TREE_LBL_REMOVE_NODE: 'Delete data',\n      RI_TREE_LBL_DROP_ZONE: 'Drop here to move data to root level'\n    });\n  }\n}\n\n"]}