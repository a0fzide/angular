{"version":3,"file":"rign-angular2-tree.umd.js.map","sources":["ng://@rign/angular2-tree/lib/store/treeActions.service.ts","../../node_modules/tslib/tslib.es6.js","ng://@rign/angular2-tree/lib/store/treeReducer.ts","ng://@rign/angular2-tree/lib/item/item.component.ts","ng://@rign/angular2-tree/lib/dragAndDrop/dragAndDrop.service.ts","ng://@rign/angular2-tree/lib/tree.component.ts","ng://@rign/angular2-tree/lib/dragAndDrop/draggable.directive.ts","ng://@rign/angular2-tree/lib/dragAndDrop/droppable.directive.ts","ng://@rign/angular2-tree/lib/dragAndDrop/dropzone/dropzone.component.ts","ng://@rign/angular2-tree/lib/service/nodesDispatcher.service.ts","ng://@rign/angular2-tree/lib/store/treeEffects.service.ts","ng://@rign/angular2-tree/lib/models/TreeModel.ts","ng://@rign/angular2-tree/lib/service/treeModelGenerator.service.ts","ng://@rign/angular2-tree/lib/parents-list/parents-list.component.ts","ng://@rign/angular2-tree/lib/service/node.service.ts","ng://@rign/angular2-tree/lib/service/initializer.service.ts","ng://@rign/angular2-tree/lib/tree.module.ts"],"sourcesContent":["import {IOuterNode} from '../interfaces/IOuterNode';\nimport {Action} from '@ngrx/store';\nimport {IConfiguration} from '../interfaces/IConfiguration';\n\nexport enum TreeActionTypes {\n  TREE_SAVE_NODE = 'TREE_SAVE_NODE',\n  TREE_SAVE_NODE_SUCCESS = 'TREE_SAVE_NODE_SUCCESS',\n  TREE_SAVE_NODE_ERROR = 'TREE_SAVE_NODE_ERROR',\n  TREE_DELETE_NODE = 'TREE_DELETE_NODE',\n  TREE_DELETE_NODE_SUCCESS = 'TREE_DELETE_NODE_SUCCESS',\n  TREE_DELETE_NODE_ERROR = 'TREE_DELETE_NODE_ERROR',\n  TREE_EDIT_NODE_START = 'TREE_EDIT_NODE_START',\n  TREE_COLLAPSE_NODE = 'TREE_COLLAPSE_NODE',\n  TREE_EXPAND_NODE = 'TREE_EXPAND_NODE',\n  TREE_INSERT_NODE = 'TREE_INSERT_NODE',\n  TREE_LOAD = 'TREE_LOAD',\n  TREE_LOAD_PATH = 'TREE_LOAD_PATH',\n  TREE_LOAD_SUCCESS = 'TREE_LOAD_SUCCESS',\n  TREE_LOAD_ERROR = 'TREE_LOAD_ERROR',\n  TREE_MARK_AS_FULLY_LOADED = 'TREE_MARK_AS_FULLY_LOADED',\n  TREE_MOVE_NODE = 'TREE_MOVE_NODE',\n  TREE_MOVE_NODE_SUCCESS = 'TREE_MOVE_NODE_SUCCESS',\n  TREE_MOVE_NODE_ERROR = 'TREE_MOVE_NODE_ERROR',\n  TREE_REGISTER = 'TREE_REGISTER',\n  TREE_SELECT_NODE = 'TREE_SELECT_NODE',\n  TREE_SET_ALL_NODES = 'TREE_SET_ALL_NODES',\n  TREE_SET_CONFIGURATION = 'TREE_SET_CONFIGURATION'\n}\n\nexport class TreeCollapseNodeAction implements Action {\n  readonly type = TreeActionTypes.TREE_COLLAPSE_NODE;\n\n  public constructor(public payload: { treeId: string, id: string }) {\n\n  }\n}\n\nexport class TreeDeleteNodeAction implements Action {\n  readonly type = TreeActionTypes.TREE_DELETE_NODE;\n\n  public constructor(public payload: { treeId: string, node: IOuterNode }) {\n\n  }\n}\n\nexport class TreeDeleteNodeErrorAction implements Action {\n  readonly type = TreeActionTypes.TREE_DELETE_NODE_ERROR;\n\n  public constructor(public payload: { treeId: string, node: IOuterNode }) {\n\n  }\n}\n\nexport class TreeDeleteNodeSuccessAction implements Action {\n  readonly type = TreeActionTypes.TREE_DELETE_NODE_SUCCESS;\n\n  public constructor(public payload: { treeId: string, node: IOuterNode }) {\n\n  }\n}\n\nexport class TreeEditNodeStartAction implements Action {\n  readonly type = TreeActionTypes.TREE_EDIT_NODE_START;\n\n  public constructor(public payload: { node: IOuterNode }) {\n\n  }\n}\n\nexport class TreeExpandNodeAction implements Action {\n  readonly type = TreeActionTypes.TREE_EXPAND_NODE;\n\n  public constructor(public payload: { treeId: string, id: string }) {\n\n  }\n}\n\nexport class TreeInsertNodeAction implements Action {\n  readonly type = TreeActionTypes.TREE_INSERT_NODE;\n\n  public constructor(public payload: { treeId: string, parentId: string }) {\n\n  }\n}\n\nexport class TreeLoadNodesAction implements Action {\n  readonly type = TreeActionTypes.TREE_LOAD;\n\n  public constructor(public payload: { treeId: string, id: string }) {\n\n  }\n}\n\nexport class TreeLoadNodesErrorAction implements Action {\n  readonly type = TreeActionTypes.TREE_LOAD_ERROR;\n\n  public constructor(public payload: { treeId: string, id: string }) {\n\n  }\n}\n\nexport class TreeLoadNodesSuccessAction implements Action {\n  readonly type = TreeActionTypes.TREE_LOAD_SUCCESS;\n\n  public constructor(public payload: { treeId: string, id: string, nodes: IOuterNode[] }) {\n\n  }\n}\n\nexport class TreeLoadPathAction implements Action {\n  readonly type = TreeActionTypes.TREE_LOAD_PATH;\n\n  public constructor(public payload: { treeId: string, ids: string[] }) {\n\n  }\n}\n\nexport class TreeMarkAsFullyLoadedAction implements Action {\n  readonly type = TreeActionTypes.TREE_MARK_AS_FULLY_LOADED;\n\n  public constructor(public payload: { treeId: string }) {\n\n  }\n}\n\nexport class TreeMoveNodeAction implements Action {\n  readonly type = TreeActionTypes.TREE_MOVE_NODE;\n\n  public constructor(public payload: { treeId: string, sourceOfDroppedData: string, oldNode: any, node: IOuterNode }) {\n\n  }\n}\n\nexport class TreeMoveNodeErrorAction implements Action {\n  readonly type = TreeActionTypes.TREE_MOVE_NODE_ERROR;\n\n  public constructor(public payload: { treeId: string, source: IOuterNode, target: IOuterNode }) {\n\n  }\n}\n\nexport class TreeMoveNodeSuccessAction implements Action {\n  readonly type = TreeActionTypes.TREE_MOVE_NODE_SUCCESS;\n\n  public constructor(public payload: { treeId: string, source: IOuterNode, target: IOuterNode }) {\n\n  }\n}\n\nexport class TreeRegisterAction implements Action {\n  readonly type = TreeActionTypes.TREE_REGISTER;\n\n  public constructor(public payload: { treeId: string, silent: boolean, nodes: IOuterNode[] }) {\n\n  }\n}\n\nexport class TreeSaveNodeAction implements Action {\n  readonly type = TreeActionTypes.TREE_SAVE_NODE;\n\n  public constructor(public payload: { treeId: string, node: IOuterNode }) {\n\n  }\n}\n\nexport class TreeSaveNodeErrorAction implements Action {\n  readonly type = TreeActionTypes.TREE_SAVE_NODE_ERROR;\n\n  public constructor(public payload: { treeId: string, node: IOuterNode }) {\n\n  }\n}\n\nexport class TreeSaveNodeSuccessAction implements Action {\n  readonly type = TreeActionTypes.TREE_SAVE_NODE_SUCCESS;\n\n  public constructor(public payload: { treeId: string, node: IOuterNode, oldNode: IOuterNode }) {\n\n  }\n}\n\nexport class TreeSelectNodeAction implements Action {\n  readonly type = TreeActionTypes.TREE_SELECT_NODE;\n\n  public constructor(public payload: { treeId: string, node: IOuterNode }) {\n\n  }\n}\n\nexport class TreeSetAllNodesAction implements Action {\n  readonly type = TreeActionTypes.TREE_SET_ALL_NODES;\n\n  public constructor(public payload: { treeId: string, nodes: IOuterNode[] }) {\n\n  }\n}\n\nexport class TreeSetConfigurationAction implements Action {\n  readonly type = TreeActionTypes.TREE_SET_CONFIGURATION;\n\n  public constructor(public payload: { treeId: string, configuration: IConfiguration }) {\n\n  }\n}\n\nexport type TreeAction =\n  TreeCollapseNodeAction\n  | TreeDeleteNodeAction\n  | TreeDeleteNodeErrorAction\n  | TreeDeleteNodeSuccessAction\n  | TreeEditNodeStartAction\n  | TreeExpandNodeAction\n  | TreeInsertNodeAction\n  | TreeLoadNodesAction\n  | TreeLoadNodesErrorAction\n  | TreeLoadNodesSuccessAction\n  | TreeLoadNodesSuccessAction\n  | TreeLoadPathAction\n  | TreeMarkAsFullyLoadedAction\n  | TreeMoveNodeAction\n  | TreeMoveNodeErrorAction\n  | TreeMoveNodeSuccessAction\n  | TreeRegisterAction\n  | TreeSaveNodeAction\n  | TreeSaveNodeErrorAction\n  | TreeSaveNodeSuccessAction\n  | TreeSelectNodeAction\n  | TreeSetAllNodesAction\n  | TreeSetConfigurationAction\n  ;\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import {ITreeConfiguration, ITreeData, ITreeNodes, ITreeState} from './ITreeState';\nimport {\n  TreeAction,\n  TreeActionTypes,\n  TreeCollapseNodeAction,\n  TreeDeleteNodeSuccessAction,\n  TreeExpandNodeAction,\n  TreeInsertNodeAction,\n  TreeLoadNodesSuccessAction,\n  TreeMarkAsFullyLoadedAction,\n  TreeMoveNodeSuccessAction,\n  TreeRegisterAction,\n  TreeSaveNodeSuccessAction,\n  TreeSelectNodeAction,\n  TreeSetAllNodesAction,\n  TreeSetConfigurationAction\n} from './treeActions.service';\nimport {IOuterNode} from '../interfaces/IOuterNode';\nimport {createFeatureSelector, createSelector} from '@ngrx/store';\nimport {MemoizedSelector} from '@ngrx/store/src/selector';\n\nexport const NEW_NODE_ID = 'ri-new-node-id';\n\nexport const emptyTreeData: ITreeData = {\n  nodes: {\n    entities: {},\n    previouslySelected: null,\n    selected: null,\n    rootNodes: [],\n    expanded: [],\n  },\n  configuration: {\n    isFullyLoaded: false\n  }\n};\n\nfunction copyState(state: ITreeState, treeId: string = null) {\n  const newState = {...state};\n\n  // todo: find better way to clone object\n  if (treeId) {\n    newState[treeId] = {\n      nodes: {\n        entities: {...state[treeId].nodes.entities},\n        previouslySelected: state[treeId].nodes.previouslySelected,\n        selected: state[treeId].nodes.selected,\n        rootNodes: [...state[treeId].nodes.rootNodes],\n        expanded: [...state[treeId].nodes.expanded],\n      },\n      configuration: {...state[treeId].configuration}\n    };\n  }\n\n  return newState;\n}\n\nfunction removeNode(state: ITreeState, action: TreeDeleteNodeSuccessAction): ITreeState {\n  const newState = copyState(state, action.payload.treeId);\n  const treeId = action.payload.treeId;\n  const treeState = newState[treeId];\n  const node = action.payload.node;\n  const parentId = node.parentId;\n\n  delete treeState.nodes.entities[node.id];\n\n  if (parentId) {\n    const parent = {...treeState.nodes.entities[parentId]};\n\n    if (parent.children) {\n      parent.children = parent.children.filter((id) => id !== node.id);\n    }\n    treeState.nodes.entities[parentId] = parent;\n  } else {\n    treeState.nodes.rootNodes = treeState.nodes.rootNodes.filter((id) => id !== node.id);\n  }\n\n  return newState;\n}\n\n\nfunction loadNodes(state: ITreeState, action: TreeLoadNodesSuccessAction) {\n  const newState = copyState(state, action.payload.treeId);\n  let parent: IOuterNode | null = null;\n  const treeId = action.payload.treeId;\n  const parentId = action.payload.id;\n\n  if (parentId) {\n    parent = newState[treeId].nodes.entities[parentId];\n    parent.children = [];\n  } else {\n    newState[treeId].nodes.entities = {};\n  }\n\n  action.payload.nodes.forEach((nodeData: IOuterNode) => {\n    nodeData.treeId = treeId;\n    if (parent) {\n      parent.children.push(nodeData.id);\n      nodeData.parents = [...parent.parents, ...[parent.id]];\n    } else {\n      nodeData.parents = [];\n    }\n\n    newState[treeId].nodes.entities[nodeData.id] = nodeData;\n\n    if (!parentId) {\n      newState[treeId].nodes.rootNodes.push(nodeData.id);\n    }\n  });\n\n  return newState;\n}\n\n\nfunction expandNode(state: ITreeState, action: TreeExpandNodeAction): ITreeState {\n  const treeId = action.payload.treeId;\n  const newState = copyState(state, treeId);\n  const nodeId = action.payload.id;\n\n  // newState[treeId].nodes.entities[nodeId] = Object.assign({}, newState[treeId].nodes.entities[nodeId], {isExpanded: true});\n  newState[treeId].nodes.expanded = [...newState[treeId].nodes.expanded, nodeId];\n\n  return newState;\n}\n\n\nfunction collapseNode(state: ITreeState, action: TreeCollapseNodeAction): ITreeState {\n  const treeId = action.payload.treeId;\n  const newState = copyState(state, treeId);\n  const nodeId = action.payload.id;\n\n  // newState[treeId].nodes.entities[nodeId] = {...newState[treeId].nodes.entities[nodeId], ...{isExpanded: false}};\n  newState[treeId].nodes.expanded = newState[treeId].nodes.expanded.filter((id) => id !== nodeId);\n\n\n  return newState;\n}\n\n\nfunction insertNode(state: ITreeState, action: TreeInsertNodeAction): ITreeState {\n  const treeId = action.payload.treeId;\n  const newState = copyState(state, treeId);\n  const parentId = action.payload.parentId;\n  const newNode: IOuterNode = {\n    id: NEW_NODE_ID,\n    treeId: treeId,\n    name: 'New data',\n    parentId: parentId,\n    children: [],\n    parents: [],\n    isExpanded: false\n  };\n\n  newState[treeId].nodes.entities[NEW_NODE_ID] = newNode;\n\n  if (!parentId) {\n    newState[treeId].nodes.rootNodes = [...newState[treeId].nodes.rootNodes, NEW_NODE_ID];\n  }\n\n  return newState;\n}\n\nfunction saveNode(state: ITreeState, action: TreeSaveNodeSuccessAction): ITreeState {\n  const newState = copyState(state, action.payload.treeId);\n  const old = action.payload.oldNode;\n  const newNode = action.payload.node;\n  const treeId = action.payload.treeId;\n  const treeState = newState[treeId].nodes.entities;\n\n  if (treeState[NEW_NODE_ID]) {\n    delete treeState[NEW_NODE_ID];\n  } else {\n    delete treeState[old.id];\n  }\n\n  const nodeId = newNode.id;\n  treeState[nodeId] = newNode;\n\n  const parentId = newNode.parentId;\n  const parent = treeState[parentId] || null;\n\n  newNode.parents = [];\n\n  if (parentId) {\n    if (parent) {\n      if (!parent.children) {\n        parent.children = [];\n      }\n\n      parent.children.push(nodeId);\n\n      newNode.parents = [...parent.parents, parent.id];\n    }\n  } else if (old.id === NEW_NODE_ID) {\n    newState[treeId].nodes.rootNodes = newState[treeId].nodes.rootNodes.filter((id) => id !== NEW_NODE_ID);\n    newState[treeId].nodes.rootNodes.push(nodeId);\n  }\n\n  return newState;\n}\n\nfunction moveNode(state: ITreeState, action: TreeMoveNodeSuccessAction) {\n  const newState = copyState(state, action.payload.treeId);\n  const oldNode = action.payload.source;\n  const newNode = action.payload.target;\n  const treeId = action.payload.treeId;\n  const treeData = newState[treeId];\n  const treeState = newState[treeId].nodes.entities;\n\n  // remove info about removed child\n  if (oldNode.parentId) {\n    treeState[oldNode.parentId].children = treeState[oldNode.parentId].children.filter((id) => id !== oldNode.id);\n  } else {\n    treeData.nodes.rootNodes = treeData.nodes.rootNodes.filter((id) => id !== oldNode.id);\n  }\n\n  // add info about moved node\n  if (newNode.parentId) {\n    const newParent = treeState[newNode.parentId];\n\n    if (newParent.children) {\n      newParent.children.push(newNode.id);\n    }\n\n    newNode.parents = [...newParent.parents, newParent.id];\n  } else {\n    treeData.nodes.rootNodes.push(newNode.id);\n    newNode.parents = [];\n  }\n\n  // replace node data\n  treeState[newNode.id] = {...newNode};\n\n  return newState;\n}\n\nfunction registerTree(state: ITreeState, action: TreeRegisterAction) {\n  const newState = copyState(state);\n\n  newState[action.payload.treeId] = {\n    nodes: {\n      entities: {...emptyTreeData.nodes.entities},\n      previouslySelected: emptyTreeData.nodes.previouslySelected,\n      selected: emptyTreeData.nodes.selected,\n      rootNodes: [...emptyTreeData.nodes.rootNodes],\n      expanded: [...emptyTreeData.nodes.expanded]\n    },\n    configuration: {...emptyTreeData.configuration}\n  };\n\n  return newState;\n}\n\n\nfunction setAllNodes(state: ITreeState, action: TreeSetAllNodesAction): ITreeState {\n  const newState = copyState(state, action.payload.treeId);\n  const treeId = action.payload.treeId;\n  const nodes = action.payload.nodes;\n  const newNodes: ITreeNodes = {};\n  const ids: string[] = nodes.map((nodeData: IOuterNode) => nodeData.id);\n\n  nodes.forEach((nodeData: IOuterNode) => {\n    nodeData.treeId = treeId;\n    newNodes[nodeData.id] = nodeData;\n\n    if (nodeData.parentId === null) {\n      newState[treeId].nodes.rootNodes.push(nodeData.id);\n    }\n  });\n\n  newState[treeId].nodes.rootNodes.forEach((id) => updateParents(newNodes, id));\n\n  newState[treeId].nodes.entities = newNodes;\n\n  return newState;\n}\n\nfunction updateParents(nodes: ITreeNodes, nodeId: string, parents: string[] = []): void {\n  const node: IOuterNode = nodes[nodeId];\n\n  if (node) {\n    node.parents = [...parents];\n\n    if (node.children.length > 0) {\n      const newParents = [...parents, ...[node.id]];\n\n      node.children.forEach(childId => updateParents(nodes, childId, newParents));\n    }\n  }\n}\n\nfunction markTreeAsFullyLoaded(state: ITreeState, action: TreeMarkAsFullyLoadedAction): ITreeState {\n  const treeId = action.payload.treeId;\n  const newState = copyState(state, treeId);\n\n  newState[treeId].configuration = {...newState[treeId].configuration, ...{isFullyLoaded: true}};\n\n  return newState;\n}\n\nfunction setConfiguration(state: ITreeState, action: TreeSetConfigurationAction): ITreeState {\n  const treeId = action.payload.treeId;\n  const newState = copyState(state, treeId);\n\n  newState[treeId].configuration = {...newState[treeId].configuration, ...action.payload.configuration};\n\n  return newState;\n}\n\nfunction selectNode(state: ITreeState, action: TreeSelectNodeAction) {\n  const treeId = action.payload.treeId;\n  const node = action.payload.node;\n  const newState = copyState(state, treeId);\n\n  newState[treeId].nodes.previouslySelected = newState[treeId].nodes.selected;\n  newState[treeId].nodes.selected = node ? node.id : null;\n\n  return newState;\n}\n\nexport function treeReducer(state: ITreeState = {}, action: TreeAction): ITreeState {\n  switch (action.type) {\n    case TreeActionTypes.TREE_REGISTER:\n      return registerTree(state, action);\n    case TreeActionTypes.TREE_SAVE_NODE_SUCCESS:\n      return saveNode(state, action);\n    case TreeActionTypes.TREE_DELETE_NODE_SUCCESS:\n      return removeNode(state, action);\n    case TreeActionTypes.TREE_INSERT_NODE:\n      return insertNode(state, action);\n    case TreeActionTypes.TREE_LOAD_SUCCESS:\n      return loadNodes(state, action);\n    case TreeActionTypes.TREE_MOVE_NODE_SUCCESS:\n      return moveNode(state, action);\n    case TreeActionTypes.TREE_SET_ALL_NODES:\n      return setAllNodes(state, action);\n    case TreeActionTypes.TREE_MARK_AS_FULLY_LOADED:\n      return markTreeAsFullyLoaded(state, action);\n    case TreeActionTypes.TREE_SET_CONFIGURATION:\n      return setConfiguration(state, action);\n    case TreeActionTypes.TREE_EXPAND_NODE:\n      return expandNode(state, action);\n    case TreeActionTypes.TREE_COLLAPSE_NODE:\n      return collapseNode(state, action);\n    case TreeActionTypes.TREE_SELECT_NODE:\n      return selectNode(state, action);\n    case TreeActionTypes.TREE_DELETE_NODE:\n    case TreeActionTypes.TREE_EDIT_NODE_START:\n    case TreeActionTypes.TREE_LOAD:\n    case TreeActionTypes.TREE_MOVE_NODE:\n    case TreeActionTypes.TREE_SAVE_NODE:\n      return state;\n    default:\n      return state;\n  }\n\n}\n\nexport const treeStateSelector: MemoizedSelector<object, ITreeState> = createFeatureSelector<ITreeState>('trees');\n\nexport function treeSelector(treeId: string): MemoizedSelector<object, ITreeData> {\n  return createSelector(treeStateSelector, (state: ITreeState) => state[treeId] || null);\n}\n\nexport function treeConfigurationSelector(treeId: string): MemoizedSelector<object, ITreeConfiguration> {\n  return createSelector(treeStateSelector, (state: ITreeState) => state[treeId].configuration || null);\n}\n\nexport function expandedNodesSelector(treeId: string): MemoizedSelector<object, string[]> {\n  return createSelector(treeStateSelector, (state: ITreeState) => state[treeId].nodes.expanded || []);\n}\n\nexport function selectedNodeSelector(treeId: string): MemoizedSelector<object, string> {\n  return createSelector(treeStateSelector, (state: ITreeState) => state[treeId].nodes.selected || null);\n}\n\nexport function previouslySelectedNodeSelector(treeId: string): MemoizedSelector<object, string> {\n  return createSelector(treeStateSelector, (state: ITreeState) => state[treeId].nodes.previouslySelected || null);\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {ContextMenuComponent, ContextMenuService} from 'ngx-contextmenu';\nimport {IOuterNode} from '../interfaces/IOuterNode';\nimport {\n  TreeActionTypes,\n  TreeCollapseNodeAction,\n  TreeDeleteNodeAction,\n  TreeEditNodeStartAction,\n  TreeExpandNodeAction,\n  TreeSaveNodeAction,\n  TreeSelectNodeAction\n} from '../store/treeActions.service';\nimport {TreeModel} from '../models/TreeModel';\nimport {Actions} from '@ngrx/effects';\nimport {animate, state, style, transition, trigger} from '@angular/animations';\nimport {AnimationTriggerMetadata} from '@angular/animations/src/animation_metadata';\nimport {select, Store} from '@ngrx/store';\nimport {ITreeState} from '../store/ITreeState';\nimport {NEW_NODE_ID, previouslySelectedNodeSelector} from '../store/treeReducer';\nimport {filter} from 'rxjs/operators';\nimport {empty, Observable, Subscription} from 'rxjs';\n\n\nexport function expand(): AnimationTriggerMetadata {\n  return trigger('expand', [\n    state('*', style({'overflow-y': 'hidden'})),\n    state('void', style({'overflow-y': 'hidden'})),\n    transition('* => void', [\n      style({height: '*'}),\n      animate(300, style({height: 0}))\n    ]),\n    transition('void => *', [\n      style({height: '0'}),\n      animate(300, style({height: '*'}))\n    ])\n  ]);\n}\n\n@Component({\n  encapsulation: ViewEncapsulation.None,\n  selector: 'ri-tree-item',\n  templateUrl: './item.component.html',\n  styleUrls: ['./item.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [expand()]\n})\nexport class ItemComponent implements OnInit, OnDestroy, OnChanges {\n  /**\n   * Input field where we can change data name\n   */\n  @ViewChild('inputElement') input: any;\n\n  /**\n   * Node instance\n   */\n  @Input()\n  public set node(node: IOuterNode) {\n    this._node = node;\n\n    this.initEditModeIfNeeded(node);\n  }\n\n  public get node(): IOuterNode {\n    return this._node;\n  }\n\n  @Input()\n  public treeModel: TreeModel;\n\n  @Input()\n  public contextMenu: ContextMenuComponent;\n\n  @Input()\n  public isExpanded = false;\n\n  @Input()\n  public isSelected = false;\n\n  /**\n   * Form field to change data name\n   */\n  public nameField = new FormControl();\n\n  public isEditMode = false;\n\n  public children$: Observable<IOuterNode[]> = empty();\n\n  protected isStartSave = false;\n\n  protected subscription = new Subscription();\n\n  protected _node: IOuterNode;\n\n  public constructor(protected contextMenuService: ContextMenuService,\n                     protected actions$: Actions,\n                     protected store: Store<ITreeState>,\n                     protected cdr: ChangeDetectorRef) {\n  }\n\n  public ngOnChanges(values): void {\n    // if node is added to the tree then some part of nodes is moving down\n    // and the new one is inserted, then all sub nodes should be rewritten\n    const node = values.node;\n\n    if (node && !node.firstChange && node.previousValue.id !== node.currentValue.id) {\n      this.children$ = this.getChildren();\n    }\n  }\n\n  public ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n\n  public ngOnInit() {\n    this.children$ = this.getChildren();\n\n    this.subscribeForOnEdit();\n\n    this.subscription.add(\n      this.store\n        .pipe(\n          select(previouslySelectedNodeSelector(this.node.treeId)),\n          filter((previouslySelected: string) => previouslySelected === this.node.id)\n        )\n        .subscribe(() => this.cdr.markForCheck())\n    );\n  }\n\n  /**\n   * Collapse node\n   */\n  public collapse(): void {\n    this.store.dispatch(new TreeCollapseNodeAction({\n      treeId: this.treeModel.treeId,\n      id: this.node.id,\n    }));\n  }\n\n  /**\n   * Expand node\n   */\n  public expand(): void {\n    this.store.dispatch(new TreeExpandNodeAction({treeId: this.treeModel.treeId, id: this.node.id}));\n  }\n\n  public onBlur() {\n    if (this.isStartSave) {\n      this.isStartSave = false;\n    } else {\n      this.undoChanges();\n    }\n  }\n\n  public onChange(event: KeyboardEvent) {\n    event.stopPropagation();\n\n    if (event.keyCode === 27) {\n      this.undoChanges();\n    } else if (event.keyCode === 13) {\n      this.isStartSave = true;\n      const node: IOuterNode = {\n        id: this.node.id,\n        treeId: this.node.treeId,\n        name: this.nameField.value,\n        parentId: this.node.parentId,\n        children: this.node.children,\n        parents: this.node.parents,\n        isExpanded: false\n      };\n\n      this.store.dispatch(new TreeSaveNodeAction({\n        treeId: this.treeModel.treeId,\n        node,\n      }));\n      this.isEditMode = false;\n    }\n  }\n\n  public onContextMenu($event: MouseEvent) {\n    if (!this.treeModel.configuration.disableContextMenu) {\n      this.contextMenuService.show.next({\n        contextMenu: this.contextMenu,\n        event: $event,\n        item: this.node\n      });\n    }\n\n    $event.preventDefault();\n    $event.stopPropagation();\n  }\n\n  public onSelect() {\n    if (this.isSelected) {\n      this.store.dispatch(new TreeSelectNodeAction({\n        treeId: this.treeModel.treeId,\n        node: null,\n      }));\n    } else {\n      this.store.dispatch(new TreeSelectNodeAction({\n        treeId: this.treeModel.treeId,\n        node: this.node,\n      }));\n    }\n  }\n\n  public trackByFn(item: IOuterNode): string {\n    return item.id;\n  }\n\n  protected getChildren(): Observable<IOuterNode[]> {\n    return this.treeModel.getChildren(this.node.id);\n  }\n\n  protected initEditModeIfNeeded(node: IOuterNode) {\n    if (!node) {\n      return;\n    }\n\n    this.isEditMode = node.id === NEW_NODE_ID;\n\n    if (this.isEditMode) {\n      this.nameField.setValue('');\n      this.setFocus();\n    }\n  }\n\n  protected isNewNode() {\n    return this.node.id === NEW_NODE_ID;\n  }\n\n  protected setFocus() {\n    setTimeout(() => this.input.nativeElement.focus(), 0);\n  }\n\n  protected subscribeForOnEdit(): void {\n    this.subscription.add(\n      this.actions$\n        .ofType(TreeActionTypes.TREE_EDIT_NODE_START)\n        .pipe(\n          filter((action: TreeEditNodeStartAction) => action.payload.node === this.node)\n        )\n        .subscribe((action: TreeEditNodeStartAction) => {\n          this.nameField.setValue(this.node.name);\n          this.isEditMode = true;\n          this.cdr.markForCheck();\n          this.setFocus();\n        })\n    );\n  }\n\n  protected undoChanges() {\n    this.isEditMode = false;\n\n    if (this.isNewNode()) {\n      this.store.dispatch(new TreeDeleteNodeAction({\n        treeId: this.treeModel.treeId,\n        node: this.node,\n      }));\n    }\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {IDragAndDrop, IDragElement, IDropElement} from '../interfaces/IDragAndDrop';\nimport {BehaviorSubject, Observable, Subject} from 'rxjs';\nimport {map, withLatestFrom} from 'rxjs/operators';\n\n@Injectable()\nexport class DragAndDrop {\n  public static DROP_DATA_TYPE = 'TREE_NODE';\n\n  protected dropStream$: Subject<IDropElement | null> = new Subject();\n  protected dragStream$: BehaviorSubject<IDragElement | null> = new BehaviorSubject(null);\n\n  public drop$: Observable<any>;\n\n  public constructor() {\n    this.drop$ = this.dropStream$\n      .pipe(\n        withLatestFrom(this.dragStream$),\n        map(([dropNode, dragNode]: [IDropElement, IDragElement]): IDragAndDrop => {\n          return {dragNode: dragNode, dropNode: dropNode, type: dragNode.type};\n        })\n      );\n  }\n\n  public dragStart(dragElement: IDragElement) {\n    this.dragStream$.next(dragElement);\n  }\n\n  public dragEnd(dropElement: IDropElement | null) {\n    this.dropStream$.next(dropElement);\n  }\n\n  public getDragStream(): BehaviorSubject<IDragElement | null> {\n    return this.dragStream$;\n  }\n\n  public getLastDragElement(): IDragElement {\n    return this.dragStream$.getValue();\n  }\n}\n","import {Component, Input, OnChanges, OnDestroy, OnInit, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {IOuterNode} from './interfaces/IOuterNode';\nimport {IContextMenu} from './interfaces/IContextMenu';\nimport {TreeModel} from './models/TreeModel';\nimport {ContextMenuComponent} from 'ngx-contextmenu';\nimport {DragAndDrop} from './dragAndDrop/dragAndDrop.service';\nimport {IDragAndDrop} from './interfaces/IDragAndDrop';\nimport {Store} from '@ngrx/store';\nimport {ITreeState} from './store/ITreeState';\nimport {filter} from 'rxjs/operators';\nimport {\n  TreeDeleteNodeAction,\n  TreeEditNodeStartAction,\n  TreeInsertNodeAction,\n  TreeMoveNodeAction\n} from './store/treeActions.service';\nimport {Observable, Subscription} from 'rxjs';\n\n@Component({\n  encapsulation: ViewEncapsulation.None,\n  selector: 'ri-tree',\n  templateUrl: './tree.component.html',\n  styleUrls: ['./tree.component.scss']\n})\nexport class TreeComponent implements OnInit, OnChanges, OnDestroy {\n  @Input() treeModel: TreeModel;\n\n  @ViewChild('contextMenu') contextMenu: ContextMenuComponent;\n\n  /**\n   * List of default options for context menu\n   */\n  private defaultOptions: IContextMenu[] = [\n    {\n      name: 'onEdit',\n      text: 'RI_TREE_LBL_EDIT_NODE',\n      iconCls: 'fa fa-edit'\n    },\n    {\n      name: 'onDelete',\n      text: 'RI_TREE_LBL_REMOVE_NODE',\n      iconCls: 'fa fa-trash'\n    }\n  ];\n\n  /**\n   * List of context menu items\n   */\n  public menuList: IContextMenu[] = [];\n\n  public rootNodes$: Observable<IOuterNode[]>;\n\n  protected currentSelectedNode: IOuterNode;\n\n  protected subscription = new Subscription();\n\n  public constructor(protected store: Store<ITreeState>,\n                     protected dragAndDrop: DragAndDrop) {\n\n  }\n\n  public ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n\n  public ngOnInit() {\n    this.registerMove();\n\n    this.rootNodes$ = this.treeModel.rootNodes$;\n\n    this.subscription.add(\n      this.treeModel.currentSelectedNode$\n        .subscribe((node: IOuterNode) => this.currentSelectedNode = node)\n    );\n  }\n\n  public ngOnChanges(data: any) {\n    this.menuList = [];\n    this.defaultOptions.forEach((item) => this.menuList.push(item));\n  }\n\n  public onAdd() {\n    const parentId = this.currentSelectedNode ? this.currentSelectedNode.id : null;\n\n    this.store.dispatch(new TreeInsertNodeAction({treeId: this.treeModel.treeId, parentId}));\n  }\n\n  /**\n   * On select item from context menu\n   *\n   * @param name - name of the event\n   * @param node - data item\n   */\n  public onContextMenuClick(name: string, node: IOuterNode) {\n\n    switch (name) {\n      case 'onEdit':\n        event.stopPropagation();\n        this.store.dispatch(new TreeEditNodeStartAction({node}));\n        break;\n      case 'onDelete':\n        this.store.dispatch(new TreeDeleteNodeAction({treeId: this.treeModel.treeId, node}));\n        break;\n      default:\n        console.warn('Unknown context menu action: ' + name);\n    }\n  }\n\n  public trackByFn(item: IOuterNode): string {\n    return item.id;\n  }\n\n  /**\n   * Register data \"move event\"\n   */\n  protected registerMove(): void {\n    if (this.treeModel.configuration.disableMoveNodes) {\n      return;\n    }\n\n    this.dragAndDrop.drop$\n      .pipe(\n        filter((data: IDragAndDrop) => {\n          if (data.type === DragAndDrop.DROP_DATA_TYPE) {\n            if (data.dropNode) {\n              return data.dropNode.data.treeId === this.treeModel.treeId;\n            } else {\n              return data.dragNode.data.treeId === this.treeModel.treeId;\n            }\n          } else {\n            if (data.dropNode && data.dropNode.zones && data.dropNode.zones.indexOf(data.dragNode.zoneId) === -1) {\n              return false;\n            }\n\n            return true;\n          }\n        })\n      )\n      .subscribe((data: IDragAndDrop) => {\n        const dropNode = data.dropNode ? data.dropNode.data : null;\n        this.store.dispatch(new TreeMoveNodeAction({\n            sourceOfDroppedData: data.type,\n            treeId: this.treeModel.treeId,\n            oldNode: data.dragNode.data,\n            node: dropNode\n          }\n        ));\n      });\n  }\n}\n","import {Directive, ElementRef, Input, OnInit, Renderer} from '@angular/core';\nimport {DragAndDrop} from './dragAndDrop.service';\n\n@Directive({\n  selector: '[riDraggable]'\n})\nexport class DraggableDirective implements OnInit {\n  @Input() data: any;\n  @Input() dragZone: string | null = null;\n  @Input() sourceType: string = DragAndDrop.DROP_DATA_TYPE;\n\n  public dragEnabled = true;\n\n  public constructor(protected el: ElementRef,\n                     private renderer: Renderer,\n                     protected dragAndDrop: DragAndDrop) {\n    renderer.listen(el.nativeElement, 'dragstart', ($event) => {\n      if (this.dragEnabled) {\n        this.onDragStart($event);\n      }\n    });\n\n    renderer.listen(el.nativeElement, 'dragend', () => {\n      // on drag end we reset last drag element (this event is fired after drop)\n      this.dragAndDrop.dragStart(null);\n    });\n  }\n\n  private onDragStart($event: DragEvent) {\n    this.dragAndDrop.dragStart({zoneId: this.dragZone, data: this.data, type: this.sourceType});\n\n    $event.dataTransfer.effectAllowed = 'copy';\n    $event.dataTransfer.dropEffect = 'copy';\n  }\n\n  public ngOnInit() {\n    this.el.nativeElement.draggable = this.dragEnabled;\n\n    if (!this.data) {\n      throw new Error('DraggableDirective needs data');\n    }\n  }\n}\n","import {Directive, ElementRef, Input, OnInit, Renderer} from '@angular/core';\nimport {DragAndDrop} from './dragAndDrop.service';\nimport {IOuterNode} from '../interfaces/IOuterNode';\n\nexport interface DropConfig {\n  dropAllowedCssClass?: string;\n  dropZone?: string[] | null;\n}\n\n\n@Directive({\n  selector: '[riDroppable]'\n})\nexport class DroppableDirective implements OnInit {\n  @Input() data: IOuterNode;\n  @Input() dropConfig: DropConfig = {};\n\n  public constructor(protected el: ElementRef, private renderer: Renderer, protected dragAndDrop: DragAndDrop) {\n    renderer.listen(el.nativeElement, 'dragover', ($event) => {\n      $event.preventDefault();\n      const dropAllowed = this.isDropAllowed();\n\n      this.changeTargetCursor($event, dropAllowed);\n      this.toggleDropClass(dropAllowed);\n    });\n\n    renderer.listen(el.nativeElement, 'dragleave', ($event) => {\n      $event.preventDefault();\n      this.toggleDropClass(false);\n    });\n\n    renderer.listen(el.nativeElement, 'drop', () => {\n      this.toggleDropClass(false);\n\n      if (this.isDropAllowed()) {\n        this.dragAndDrop.dragEnd({zones: this.dropConfig.dropZone, data: this.data});\n      }\n    });\n  }\n\n  public ngOnInit() {\n    this.initConfig();\n\n    if (!this.data) {\n      throw new Error('DroppableDirective needs data');\n    }\n  }\n\n  /**\n   * Add or remove additional class when drop allowed\n   * @param dropAllowed\n   */\n  private toggleDropClass(dropAllowed = false) {\n    this.renderer.setElementClass(this.el.nativeElement, this.dropConfig.dropAllowedCssClass, dropAllowed);\n  }\n\n  private isDropAllowed = function () {\n    const lastDragElement = this.dragAndDrop.getLastDragElement();\n    const source = lastDragElement.data;\n    const target = this.data;\n    const dropZone = this.dropConfig.dropZone;\n\n    if (dropZone && dropZone.length > 0 && dropZone.indexOf(lastDragElement.zoneId) === -1) {\n      return false;\n    }\n\n    // todo: check drag and drop zones\n    return !(source === target || target.id === source.parentId || target.parents.indexOf(source.id) > -1);\n  };\n\n  /**\n   * Change drag event cursor\n   * @param $event\n   * @param add\n   */\n  private changeTargetCursor($event: DragEvent, add = false) {\n    const cursorType = add ? 'copy' : 'none';\n\n    $event.dataTransfer.effectAllowed = cursorType;\n    $event.dataTransfer.dropEffect = cursorType;\n  }\n\n  /**\n   * initialize configuration options, use default or passed\n   */\n  private initConfig(): void {\n    const defaultConfig: DropConfig = {\n      dropAllowedCssClass: 'drop-allowed'\n    };\n\n    for (const key in defaultConfig) {\n      if (defaultConfig.hasOwnProperty(key)) {\n        this.dropConfig[key] = this.dropConfig[key] || defaultConfig[key];\n      }\n    }\n  }\n}\n","import {Component, Input} from '@angular/core';\nimport {TreeModel} from '../../models/TreeModel';\nimport {DragAndDrop} from '../dragAndDrop.service';\nimport {IDragAndDrop, IDragElement} from '../../interfaces/IDragAndDrop';\nimport {map} from 'rxjs/operators';\nimport {merge, Observable} from 'rxjs';\n\n@Component({\n  selector: 'ri-dropzone',\n  templateUrl: './dropzone.component.html',\n  styleUrls: ['./dropzone.component.scss']\n})\nexport class DropzoneComponent {\n  @Input() treeModel: TreeModel;\n  @Input() dropZone: string[] = [];\n\n  public isOpen$: Observable<boolean>;\n\n  constructor(public dragAndDrop: DragAndDrop) {\n\n    const isDragStart$ = this.dragAndDrop.getDragStream()\n      .pipe(\n        map((dragElement: IDragElement): boolean => {\n          const isDragElement = !!dragElement && !!dragElement.data;\n\n          if (isDragElement) {\n            if (dragElement.type === DragAndDrop.DROP_DATA_TYPE) {\n              const isNotRootElement = dragElement.data.parentId;\n              const isFromCurrentTree = dragElement.data.treeId === this.treeModel.treeId;\n\n              return (isNotRootElement && isFromCurrentTree) ? true : false;\n            } else {\n              return true;\n            }\n          }\n\n          return false;\n        })\n      );\n\n    const isDragEnd$ = this.dragAndDrop.drop$\n      .pipe(\n        map((data: IDragAndDrop): boolean => {\n          return false;\n        })\n      );\n\n    this.isOpen$ = merge(isDragStart$, isDragEnd$);\n  }\n\n  public onDrop() {\n    this.dragAndDrop.dragEnd(null);\n  }\n\n  public onDragOver($event) {\n    $event.preventDefault();\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {INodeService} from './node.service';\n\n@Injectable()\nexport class NodeDispatcherService {\n  private nodeServices: { [key: string]: INodeService } = {};\n\n  public registerService(name: string, nodeService: INodeService): void {\n    this.nodeServices[name] = nodeService;\n  }\n\n  public get(name: string): INodeService {\n    if (Boolean(this.nodeServices[name])) {\n      return this.nodeServices[name];\n    } else {\n      // default node service provider\n      throw Error(`No tree service with name ${name}`);\n    }\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {Actions, Effect, ofType} from '@ngrx/effects';\nimport {\n  TreeAction,\n  TreeActionTypes,\n  TreeDeleteNodeAction,\n  TreeDeleteNodeErrorAction,\n  TreeDeleteNodeSuccessAction,\n  TreeExpandNodeAction,\n  TreeInsertNodeAction,\n  TreeLoadNodesAction,\n  TreeLoadNodesErrorAction,\n  TreeLoadNodesSuccessAction,\n  TreeLoadPathAction,\n  TreeMoveNodeAction,\n  TreeMoveNodeErrorAction,\n  TreeMoveNodeSuccessAction,\n  TreeRegisterAction,\n  TreeSaveNodeAction,\n  TreeSaveNodeErrorAction,\n  TreeSaveNodeSuccessAction,\n  TreeSetAllNodesAction\n} from './treeActions.service';\nimport {IOuterNode} from '../interfaces/IOuterNode';\nimport {combineLatest, Observable, of} from 'rxjs';\nimport {ITreeActionPayload, ITreeConfiguration, ITreeData, ITreeState} from './ITreeState';\nimport {NodeDispatcherService} from '../service/nodesDispatcher.service';\nimport {DragAndDrop} from '../dragAndDrop/dragAndDrop.service';\nimport {catchError, filter, map, mergeMap, switchMap, take} from 'rxjs/operators';\nimport {select, Store} from '@ngrx/store';\nimport {NEW_NODE_ID, treeConfigurationSelector, treeSelector} from './treeReducer';\n\n@Injectable()\nexport class TreeEffectsService {\n  @Effect()\n  public register$ = this.actions$\n    .pipe(\n      ofType(TreeActionTypes.TREE_REGISTER),\n      map((action: TreeRegisterAction): TreeAction => {\n        if (action.payload.silent) {\n          return new TreeSetAllNodesAction({treeId: action.payload.treeId, nodes: action.payload.nodes});\n        } else {\n          return new TreeLoadNodesAction({treeId: action.payload.treeId, id: null});\n        }\n      })\n    );\n\n  @Effect()\n  public load$ = this.actions$\n    .pipe(\n      ofType(TreeActionTypes.TREE_LOAD),\n      mergeMap((action: TreeLoadNodesAction) => this.loadNodes(action.payload.treeId, action.payload.id)\n        .pipe(\n          map((nodesData: IOuterNode[]): TreeLoadNodesSuccessAction => new TreeLoadNodesSuccessAction({\n            treeId: action.payload.treeId,\n            id: action.payload.id,\n            nodes: nodesData\n          })),\n          catchError(() => of(new TreeLoadNodesErrorAction({\n            treeId: action.payload.treeId,\n            id: action.payload.id\n          })))\n        )\n      )\n    );\n\n\n  @Effect()\n  public delete$ = this.actions$\n    .pipe(\n      ofType(TreeActionTypes.TREE_DELETE_NODE),\n      switchMap((action: TreeDeleteNodeAction) => this.deleteNode(action.payload.treeId, action.payload.node)\n        .pipe(\n          map((): TreeDeleteNodeSuccessAction => new TreeDeleteNodeSuccessAction({...action.payload})),\n          catchError((): Observable<TreeDeleteNodeErrorAction> => of(new TreeDeleteNodeErrorAction({...action.payload})))\n        )\n      )\n    );\n\n\n  @Effect()\n  public save$ = this.actions$\n    .pipe(\n      ofType(TreeActionTypes.TREE_SAVE_NODE),\n      switchMap((action: TreeSaveNodeAction) => this.saveNode(action.payload.treeId, {...action.payload.node})\n        .pipe(\n          map((node: IOuterNode): TreeSaveNodeSuccessAction => new TreeSaveNodeSuccessAction({\n            treeId: action.payload.treeId,\n            oldNode: action.payload.node,\n            node\n          })),\n          catchError(() => of(new TreeSaveNodeErrorAction({...action.payload})))\n        )\n      )\n    );\n\n  @Effect()\n  public move$ = this.actions$\n    .pipe(\n      ofType(TreeActionTypes.TREE_MOVE_NODE),\n      filter((action: TreeMoveNodeAction) => {\n        return action.payload.sourceOfDroppedData === DragAndDrop.DROP_DATA_TYPE;\n      }),\n      switchMap((action: TreeMoveNodeAction) => {\n          const source = <IOuterNode>{...action.payload.oldNode};\n          const target = Boolean(action.payload.node) ? {...action.payload.node} : null;\n\n          return this.moveNode(action.payload.treeId, source, target)\n            .pipe(\n              map((node: IOuterNode): ITreeActionPayload => {\n                return {\n                  treeId: action.payload.treeId,\n                  oldNode: action.payload.oldNode,\n                  node: node\n                };\n              }),\n              switchMap((data: ITreeActionPayload) => {\n                return this.store.select(treeConfigurationSelector(action.payload.treeId))\n                  .pipe(\n                    take(1),\n                    map((configuration: ITreeConfiguration) => {\n                      return {\n                        configuration,\n                        data\n                      };\n                    })\n                  );\n              }),\n              catchError(() => {\n                const newAction = new TreeMoveNodeErrorAction({\n                  treeId: action.payload.treeId,\n                  source: action.payload.oldNode,\n                  target: action.payload.node\n                });\n\n                return of(newAction);\n              })\n            );\n        }\n      ),\n      mergeMap((value: { data: ITreeActionPayload, configuration: ITreeConfiguration }) => {\n        const data = value.data;\n        const actions: TreeAction[] = [\n          new TreeMoveNodeSuccessAction({treeId: data.treeId, source: data.oldNode, target: data.node}),\n        ];\n\n        if (!value.configuration.isFullyLoaded) {\n          actions.push(new TreeLoadNodesAction({treeId: data.treeId, id: data.node.parentId}));\n        }\n\n        return actions;\n      })\n    );\n\n  @Effect()\n  public expand$ = this.actions$\n    .pipe(\n      ofType(TreeActionTypes.TREE_EXPAND_NODE),\n      switchMap((action: TreeExpandNodeAction) =>\n        this.store\n          .pipe(\n            select(treeSelector(action.payload.treeId)),\n            take(1),\n            filter((treeState: ITreeData) => !treeState.configuration.isFullyLoaded),\n            map(() => {\n              return new TreeLoadNodesAction({\n                  treeId: action.payload.treeId,\n                  id: action.payload.id\n                }\n              );\n            })\n          )\n      )\n    );\n\n  @Effect()\n  public insert$ = this.actions$\n    .pipe(\n      ofType(TreeActionTypes.TREE_INSERT_NODE),\n      filter((action: TreeInsertNodeAction) => !!action.payload.parentId),\n      map((action: TreeInsertNodeAction) => {\n        return new TreeExpandNodeAction({treeId: action.payload.treeId, id: action.payload.parentId});\n      })\n    );\n\n  @Effect()\n  public initPathForFullyLoadedTreeEffect$ = this.actions$\n    .pipe(\n      ofType(TreeActionTypes.TREE_LOAD_PATH),\n      switchMap((action: TreeLoadPathAction) => {\n        return this.store.select(treeConfigurationSelector(action.payload.treeId))\n          .pipe(\n            take(1),\n            map((configuration: ITreeConfiguration) => {\n              return {action, configuration};\n            })\n          );\n      }),\n      map((value: { action: TreeLoadPathAction, configuration: ITreeConfiguration }) => {\n          const {action, configuration} = value;\n\n          if (configuration.isFullyLoaded) {\n            return action.payload.ids.map((id: string) => new TreeExpandNodeAction({treeId: action.payload.treeId, id}));\n          } else {\n            const loadActions = action.payload.ids.map((id: string) => this.loadNodes(action.payload.treeId, id));\n            return combineLatest(loadActions)\n              .pipe(\n                take(1),\n                mergeMap((data: IOuterNode[][]) => {\n                  const loadSuccess = data.map((nodes: IOuterNode[], index) => new TreeLoadNodesSuccessAction({\n                    treeId: action.payload.treeId,\n                    id: action.payload.ids[index],\n                    nodes\n                  }));\n                  const expandNodes = action.payload.ids.map((id: string) => new TreeExpandNodeAction({\n                    treeId: action.payload.treeId,\n                    id\n                  }));\n\n                  return [...loadSuccess, ...expandNodes];\n                })\n              );\n          }\n        }\n      ),\n      mergeMap((actions: any[]) => actions)\n    );\n\n  constructor(private actions$: Actions,\n              private nodeDispatcherService: NodeDispatcherService,\n              private store: Store<ITreeState>) {\n  }\n\n  protected deleteNode(treeId: string, node: IOuterNode): Observable<IOuterNode> {\n    const nodeService = this.nodeDispatcherService.get(treeId);\n\n    return node.id ? nodeService.remove(node.id) : of(node);\n  }\n\n  protected loadNodes(treeId: string, id: string | null) {\n    const nodeService = this.nodeDispatcherService.get(treeId);\n\n    return nodeService.load(id);\n  }\n\n  protected saveNode(treeId: string, node: IOuterNode): Observable<IOuterNode> {\n    const nodeService = this.nodeDispatcherService.get(treeId);\n\n    if (node.id === NEW_NODE_ID) {\n      return nodeService.add(node, node.parentId);\n    } else {\n      return nodeService.update(node);\n    }\n  }\n\n  protected moveNode(treeId: string, source: IOuterNode, target: IOuterNode): Observable<IOuterNode> {\n    const nodeService = this.nodeDispatcherService.get(treeId);\n\n    return nodeService.move(source, target);\n  }\n}\n","import {IOuterNode} from '../interfaces/IOuterNode';\nimport {IConfiguration} from '../interfaces/IConfiguration';\nimport {ITreeData, ITreeNodes, ITreeState} from '../store/ITreeState';\nimport {distinctUntilChanged, map} from 'rxjs/operators';\nimport * as _isEqual from 'lodash.isequal';\nimport {\n  expandedNodesSelector,\n  NEW_NODE_ID,\n  previouslySelectedNodeSelector,\n  selectedNodeSelector\n} from '../store/treeReducer';\nimport {select, Store} from '@ngrx/store';\nimport {TreeLoadPathAction} from '../store/treeActions.service';\nimport {combineLatest, Observable, Subscription} from 'rxjs';\n\nconst isEqual = _isEqual;\n\nexport class TreeModel {\n\n  public get treeId(): string {\n    return this.configuration.treeId;\n  }\n\n  public get isFullyLoaded(): boolean {\n    return this._fullyLoaded;\n  }\n\n  public nodes$: Observable<ITreeNodes>;\n  public rootNodes$: Observable<IOuterNode[]>;\n  public currentSelectedNode$: Observable<IOuterNode>;\n  private expanded: Set<string>;\n  private selected: string = null;\n  private previouslySelected: string = null;\n\n  private subscription = new Subscription();\n\n  public constructor(protected store: Store<ITreeState>,\n                     protected treeData$: Observable<ITreeData>,\n                     public configuration: IConfiguration,\n                     protected _fullyLoaded = false) {\n    this.nodes$ = this.treeData$\n      .pipe(\n        distinctUntilChanged((prev: ITreeData, next: ITreeData) => {\n          return isEqual(prev.nodes.entities, next.nodes.entities);\n        }),\n        map((treeData: ITreeData): ITreeNodes => treeData.nodes.entities)\n      );\n\n    this.rootNodes$ = this.treeData$\n      .pipe(\n        map((treeData: ITreeData): IOuterNode[] => treeData.nodes.rootNodes.map((id) => treeData.nodes.entities[id]).sort(this.sortNodes)),\n        distinctUntilChanged(),\n      );\n\n    this.currentSelectedNode$ = this.treeData$\n      .pipe(\n        map((treeData: ITreeData): IOuterNode => {\n          const nodesData = treeData.nodes;\n          const selectedId = nodesData.selected;\n\n          return selectedId ? nodesData.entities[selectedId] : null;\n        }),\n        // distinctUntilChanged((prev: IOuterNode, next: IOuterNode) => {\n        //   return isEqual(prev ? prev.id : null, next ? next.id : null)\n        // })\n      );\n\n    this.initConfiguration();\n    this.subscribeExpanded();\n    this.subscribeSelected();\n    this.subscribePreviouslySelected();\n  }\n\n  public destroy(): void {\n    this.subscription.unsubscribe();\n  }\n\n  public getParentsList(): Observable<IOuterNode[]> {\n    return combineLatest(\n      this.currentSelectedNode$,\n      this.nodes$\n    )\n      .pipe(\n        map(([currentNode, nodes]: [IOuterNode, ITreeNodes]): IOuterNode[] => {\n          if (!Boolean(currentNode)) {\n            return [];\n          }\n\n          const parents: IOuterNode[] = currentNode.parents.map(id => nodes[id]);\n\n          parents.push(currentNode);\n\n          return parents;\n        })\n      );\n  }\n\n  public getChildren(nodeId: string | null): Observable<IOuterNode[]> {\n    return this.nodes$\n      .pipe(\n        map((state: ITreeNodes): IOuterNode[] => this.getNodesByParentId(state, nodeId)),\n        map((nodes: IOuterNode[]) => {\n          return [...nodes].sort(this.sortNodes);\n        })\n      );\n  }\n\n  public initPath(path: string[]): void {\n    this.store.dispatch(new TreeLoadPathAction({treeId: this.configuration.treeId, ids: path}));\n  }\n\n  public isExpanded(node: IOuterNode): boolean {\n    if (!node) {\n      return false;\n    }\n\n    return this.expanded.has(node.id);\n  }\n\n  public isSelected(node: IOuterNode): boolean {\n    if (!node) {\n      return false;\n    }\n\n    return this.selected === node.id;\n  }\n\n  public wasPreviouslySelected(nodeId: string): boolean {\n    return this.previouslySelected === nodeId;\n  }\n\n  private initConfiguration(): void {\n    const defaultConfiguration: IConfiguration = {\n      disableMoveNodes: false,\n      dragZone: null,\n      dropZone: null,\n      treeId: 'tree',\n      showAddButton: true,\n      isAnimation: false,\n    };\n\n    for (const key in defaultConfiguration) {\n      if (this.configuration[key] === undefined) {\n        this.configuration[key] = defaultConfiguration[key];\n      }\n    }\n  }\n\n  private getNodesByParentId(state: ITreeNodes, id: string | null): IOuterNode[] {\n    return Object.keys(state)\n      .filter((key: string) => state[key].parentId === id)\n      .map((key: string) => state[key]);\n  }\n\n  private sortNodes(first: IOuterNode, second: IOuterNode): number {\n    if (second.id === NEW_NODE_ID) {\n      return -1;\n    }\n\n    return first.name > second.name ? 1 : -1;\n  }\n\n  private subscribeExpanded(): void {\n    this.subscription.add(\n      this.store\n        .pipe(\n          select(expandedNodesSelector(this.treeId))\n        )\n        .subscribe((expanded: string[]) => this.expanded = new Set(expanded))\n    );\n  }\n\n  private subscribeSelected(): void {\n    this.subscription.add(\n      this.store\n        .pipe(\n          select(selectedNodeSelector(this.treeId))\n        )\n        .subscribe((selected: string) => this.selected = selected)\n    );\n  }\n\n  private subscribePreviouslySelected(): void {\n    this.subscription.add(\n      this.store\n        .pipe(\n          select(previouslySelectedNodeSelector(this.treeId))\n        )\n        .subscribe((selected: string) => this.previouslySelected = selected)\n    );\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {IConfiguration} from '../interfaces/IConfiguration';\nimport {TreeModel} from '../models/TreeModel';\nimport {treeSelector} from '../store/treeReducer';\nimport {Store} from '@ngrx/store';\nimport {ITreeState} from '../store/ITreeState';\nimport {NodeDispatcherService} from './nodesDispatcher.service';\nimport {IOuterNode} from '../interfaces/IOuterNode';\nimport {\n  TreeMarkAsFullyLoadedAction,\n  TreeRegisterAction,\n  TreeSetConfigurationAction\n} from '../store/treeActions.service';\n\n@Injectable()\nexport class TreeModelGeneratorService {\n  public constructor(private nodeDispatcherService: NodeDispatcherService,\n                     private store: Store<ITreeState>) {\n  }\n\n  public createTreeModel(configuration: IConfiguration, nodes: IOuterNode[] = null): TreeModel {\n    const treeId = configuration.treeId;\n    const isFullyLoaded = Boolean(nodes);\n\n    // register new tree in store\n    this.store.dispatch(new TreeRegisterAction({\n      treeId,\n      silent: isFullyLoaded,\n      nodes\n    }));\n\n    // init tree configuration\n    this.store.dispatch(new TreeSetConfigurationAction({treeId, configuration}));\n\n    if (Boolean(nodes)) {\n      this.nodeDispatcherService.get(treeId).setAllNodes(nodes);\n      this.store.dispatch(new TreeMarkAsFullyLoadedAction({treeId}));\n    }\n\n    const folders$ = this.store.select(treeSelector(configuration.treeId));\n\n    return new TreeModel(this.store, folders$, configuration, isFullyLoaded);\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core';\nimport {TreeModel} from '../models/TreeModel';\nimport {Observable} from 'rxjs';\nimport {IOuterNode} from '../interfaces/IOuterNode';\nimport {TreeSelectNodeAction} from '../store/treeActions.service';\nimport {ITreeState} from '../store/ITreeState';\nimport {Store} from '@ngrx/store';\n\n@Component({\n  selector: 'ri-tree-parents-list',\n  templateUrl: './parents-list.component.html',\n  styleUrls: ['./parents-list.component.scss']\n})\nexport class ParentsListComponent implements OnInit {\n  @Input()\n  public treeModel: TreeModel;\n\n  public parents$: Observable<IOuterNode[]>;\n\n  public constructor(protected store: Store<ITreeState>) {\n\n  }\n\n  public ngOnInit(): void {\n    this.parents$ = this.treeModel.getParentsList();\n  }\n\n  public selectNode(node: IOuterNode, isCurrentSelectedNode: boolean): void {\n    if (!isCurrentSelectedNode) {\n      this.store.dispatch(new TreeSelectNodeAction({\n        treeId: this.treeModel.treeId,\n        node,\n      }));\n    }\n  }\n\n}\n","import {Injectable, InjectionToken} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {IOuterNode} from '../interfaces/IOuterNode';\nimport {IApiConfig} from '../IApiConfig.service';\nimport {HttpClient, HttpParams} from '@angular/common/http';\n\nexport interface INodeService {\n  readonly treeId: string;\n\n  load(nodeId: string): Observable<IOuterNode[]>;\n\n  add(node: IOuterNode, parentNodeId: string | null): Observable<IOuterNode>;\n\n  move(srcNode: IOuterNode, targetNode: IOuterNode | null): Observable<IOuterNode>;\n\n  update(node: IOuterNode): Observable<IOuterNode>;\n\n  remove(nodeId: string): Observable<IOuterNode>;\n\n  setAllNodes(nodes: IOuterNode[]): void;\n}\n\nexport const NODE_SERVICE = new InjectionToken('NODE_SERVICE');\n\n@Injectable()\nexport class NodeService implements INodeService {\n  protected apiConfig: IApiConfig = {\n    addUrl: '/api/nodes',\n    getUrl: '/api/nodes',\n    moveUrl: '/api/nodes/move',\n    updateUrl: '/api/nodes',\n    removeUrl: '/api/nodes',\n  };\n\n  public get treeId(): string {\n    return 'tree';\n  }\n\n  public constructor(protected http: HttpClient) {\n  }\n\n  public setAllNodes(nodes: IOuterNode[]): void {\n\n  }\n\n  public load(nodeId = ''): Observable<IOuterNode[]> {\n    const params = new HttpParams().set('nodeId', nodeId);\n\n    return this.http.get<IOuterNode[]>(this.getPath('GET', nodeId), {params});\n  }\n\n\n  public add(node: IOuterNode, parentNodeId: string = null): Observable<IOuterNode> {\n    return this.http.post<IOuterNode>(this.getPath('CREATE', parentNodeId), {\n      node: node,\n      parentNodeId: parentNodeId\n    });\n  }\n\n  public move(srcNode: IOuterNode, targetNode: IOuterNode | null): Observable<IOuterNode> {\n    const srcId = srcNode.id;\n    const targetId = targetNode ? targetNode.id : null;\n\n    return this.http.put<IOuterNode>(this.getPath('MOVE', srcId, targetId), {source: srcId, target: targetId});\n  }\n\n  public update(node: IOuterNode): Observable<IOuterNode> {\n    return this.http.put<IOuterNode>(this.getPath('UPDATE', node.id), node);\n  }\n\n  public remove(nodeId: string): Observable<IOuterNode> {\n    const params = new HttpParams().set('nodeId', nodeId);\n\n    return this.http.delete<IOuterNode>(this.getPath('REMOVE', nodeId), {params});\n  }\n\n  protected getPath(type: string, nodeId: string, destNodeId: string = null) {\n    if (!this.apiConfig) {\n      throw new Error('No API configuration for Tree');\n    }\n\n    const urlMap = {\n      'GET': this.apiConfig.getUrl,\n      'CREATE': this.apiConfig.addUrl,\n      'REMOVE': this.apiConfig.removeUrl,\n      'UPDATE': this.apiConfig.updateUrl,\n      'MOVE': this.apiConfig.moveUrl\n    };\n\n    let path = this.replaceNodeId(urlMap[type], nodeId);\n\n    if (destNodeId) {\n      path = this.replaceDestNodeId(path, destNodeId);\n    }\n\n    return path;\n  }\n\n  protected replaceNodeId(url: string, nodeId: string) {\n    return url.replace('{nodeId}', nodeId);\n  }\n\n  protected replaceDestNodeId(url: string, nodeId: string) {\n    return url.replace('{destNodeId}', nodeId);\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {TreeModelGeneratorService} from './treeModelGenerator.service';\nimport {NodeDispatcherService} from './nodesDispatcher.service';\nimport {INodeService} from './node.service';\nimport {TreeModel} from '../models/TreeModel';\nimport {IOuterNode} from '../interfaces/IOuterNode';\nimport {IConfiguration} from '../interfaces/IConfiguration';\n\n@Injectable()\nexport class TreeInitializerService {\n  public constructor(private treeModelGeneratorService: TreeModelGeneratorService,\n                     private nodeDispatcherService: NodeDispatcherService) {\n\n  }\n\n  public init(treeConfiguration: IConfiguration,\n              treeApi: INodeService,\n              loadedNodes?: IOuterNode[]): TreeModel {\n    this.nodeDispatcherService.registerService(treeConfiguration.treeId, treeApi);\n\n    return this.treeModelGeneratorService.createTreeModel(treeConfiguration, loadedNodes);\n  }\n}\n","import {CUSTOM_ELEMENTS_SCHEMA, InjectionToken, ModuleWithProviders, NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ItemComponent} from './item/item.component';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {TreeComponent} from './tree.component';\nimport {DndModule, DraggableComponent} from 'ng2-dnd';\nimport {DragAndDrop} from './dragAndDrop/dragAndDrop.service';\nimport {DraggableDirective} from './dragAndDrop/draggable.directive';\nimport {DroppableDirective} from './dragAndDrop/droppable.directive';\nimport {DropzoneComponent} from './dragAndDrop/dropzone/dropzone.component';\nimport {StoreModule} from '@ngrx/store';\nimport {EffectsModule} from '@ngrx/effects';\nimport {TreeEffectsService} from './store/treeEffects.service';\nimport {NodeDispatcherService} from './service/nodesDispatcher.service';\nimport {TranslateModule, TranslateService} from '@ngx-translate/core';\nimport {HttpClientModule} from '@angular/common/http';\nimport {ContextMenuModule} from 'ngx-contextmenu';\nimport {treeReducer} from './store/treeReducer';\nimport {TreeModelGeneratorService} from './service/treeModelGenerator.service';\nimport {ParentsListComponent} from './parents-list/parents-list.component';\nimport {NODE_SERVICE, NodeService} from './service/node.service';\nimport {TreeInitializerService} from './service/initializer.service';\n\nexport const NODE_DISPATCHER_TOKEN = new InjectionToken<NodeDispatcherService>('NodeDispatcherService');\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ContextMenuModule,\n    DndModule,\n    EffectsModule.forFeature([TreeEffectsService]),\n    HttpClientModule,\n    FormsModule,\n    ReactiveFormsModule,\n    StoreModule.forFeature('trees', treeReducer),\n    TranslateModule,\n  ],\n  declarations: [\n    TreeComponent,\n    ItemComponent,\n    DraggableDirective,\n    DroppableDirective,\n    DropzoneComponent,\n    ParentsListComponent,\n  ],\n  exports: [\n    TreeComponent,\n    ItemComponent,\n    DraggableDirective,\n    DroppableDirective,\n    DropzoneComponent,\n    DraggableComponent,\n    ParentsListComponent,\n    StoreModule,\n    EffectsModule,\n  ],\n  providers: [\n    {provide: NODE_SERVICE, useClass: NodeService, multi: true}\n  ],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class TreeModule {\n\n  public static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: TreeModule,\n      providers: [\n        DragAndDrop,\n        NodeDispatcherService,\n        TreeEffectsService,\n        TreeInitializerService,\n        TreeModelGeneratorService,\n      ]\n    };\n  }\n\n  public static forFeature(): ModuleWithProviders {\n    return {\n      ngModule: TreeModule,\n      providers: [],\n    };\n  }\n\n  public constructor(private translate: TranslateService) {\n    this.setTranslationForEN();\n    this.setTranslationForPL();\n    this.translate.setDefaultLang('en');\n  }\n\n  private setTranslationForPL(): void {\n    this.translate.setTranslation('pl', {\n      RI_TREE_LBL_ADD_NODE: 'Dodaj',\n      RI_TREE_LBL_EDIT_NODE: 'Edytuj',\n      RI_TREE_LBL_REMOVE_NODE: 'UsuÅ',\n      RI_TREE_LBL_DROP_ZONE: 'UpuÅÄ tutaj'\n    });\n  }\n\n  private setTranslationForEN(): void {\n    this.translate.setTranslation('en', {\n      RI_TREE_LBL_ADD_NODE: 'Add data',\n      RI_TREE_LBL_EDIT_NODE: 'Edit data',\n      RI_TREE_LBL_REMOVE_NODE: 'Delete data',\n      RI_TREE_LBL_DROP_ZONE: 'Drop here to move data to root level'\n    });\n  }\n}\n\n"],"names":["createFeatureSelector","createSelector","trigger","state","style","transition","animate","store","FormControl","empty","Subscription","select","filter","Component","ViewEncapsulation","ChangeDetectionStrategy","ContextMenuService","Actions","Store","ChangeDetectorRef","ViewChild","Input","Subject","BehaviorSubject","withLatestFrom","map","Injectable","Directive","ElementRef","Renderer","merge","ofType","mergeMap","catchError","of","switchMap","take","combineLatest","tslib_1.__decorate","Effect","distinctUntilChanged","tslib_1.__spread","InjectionToken","http","HttpParams","HttpClient","NgModule","CommonModule","ContextMenuModule","DndModule","EffectsModule","HttpClientModule","FormsModule","ReactiveFormsModule","StoreModule","TranslateModule","DraggableComponent","CUSTOM_ELEMENTS_SCHEMA","TranslateService"],"mappings":"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"}
